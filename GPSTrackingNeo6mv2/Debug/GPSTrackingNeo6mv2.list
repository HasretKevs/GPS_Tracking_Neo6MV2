
GPSTrackingNeo6mv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009220  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  080093b0  080093b0  000193b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009854  08009854  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009854  08009854  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009854  08009854  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009854  08009854  00019854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009858  08009858  00019858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800985c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000003b8  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000590  20000590  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b85a  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f94  00000000  00000000  0002baa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000890  00000000  00000000  0002da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000681  00000000  00000000  0002e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000208fe  00000000  00000000  0002e949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c7dd  00000000  00000000  0004f247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc64c  00000000  00000000  0005ba24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000035a4  00000000  00000000  00118070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0011b614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009398 	.word	0x08009398

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009398 	.word	0x08009398

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d106      	bne.n	8000d16 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3371      	adds	r3, #113	; 0x71
 8000d0c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000d0e:	e002      	b.n	8000d16 <prv_parse_number+0x22>
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	3301      	adds	r3, #1
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <prv_parse_number+0x30>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b20      	cmp	r3, #32
 8000d22:	d0f5      	beq.n	8000d10 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b2d      	cmp	r3, #45	; 0x2d
 8000d2a:	d104      	bne.n	8000d36 <prv_parse_number+0x42>
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <prv_parse_number+0x44>
 8000d36:	2300      	movs	r3, #0
 8000d38:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8000d3a:	e00d      	b.n	8000d58 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	461a      	mov	r2, r3
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	3b30      	subs	r3, #48	; 0x30
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d007      	beq.n	8000d6e <prv_parse_number+0x7a>
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b2f      	cmp	r3, #47	; 0x2f
 8000d64:	d903      	bls.n	8000d6e <prv_parse_number+0x7a>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b39      	cmp	r3, #57	; 0x39
 8000d6c:	d9e6      	bls.n	8000d3c <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d002      	beq.n	8000d7a <prv_parse_number+0x86>
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	425b      	negs	r3, r3
 8000d78:	e000      	b.n	8000d7c <prv_parse_number+0x88>
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d106      	bne.n	8000da6 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3371      	adds	r3, #113	; 0x71
 8000d9c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000d9e:	e002      	b.n	8000da6 <prv_parse_float_number+0x1e>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <prv_parse_float_number+0x2c>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b20      	cmp	r3, #32
 8000db2:	d0f5      	beq.n	8000da0 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8000db4:	2100      	movs	r1, #0
 8000db6:	6838      	ldr	r0, [r7, #0]
 8000db8:	f004 ffce 	bl	8005d58 <strtod>
 8000dbc:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8000dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dc4:	ec43 2b17 	vmov	d7, r2, r3
}
 8000dc8:	eeb0 0a47 	vmov.f32	s0, s14
 8000dcc:	eef0 0a67 	vmov.f32	s1, s15
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8000de0:	2100      	movs	r1, #0
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffd0 	bl	8000d88 <prv_parse_float_number>
 8000de8:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8000dec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000df0:	f7ff feb2 	bl	8000b58 <__aeabi_d2iz>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <prv_parse_lat_long+0x94>)
 8000df8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dfc:	1152      	asrs	r2, r2, #5
 8000dfe:	17db      	asrs	r3, r3, #31
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fb8e 	bl	8000524 <__aeabi_i2d>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <prv_parse_lat_long+0x98>)
 8000e16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e1a:	f7ff fbed 	bl	80005f8 <__aeabi_dmul>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e26:	f7ff fa2f 	bl	8000288 <__aeabi_dsub>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8000e32:	f04f 0200 	mov.w	r2, #0
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <prv_parse_lat_long+0x9c>)
 8000e38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e3c:	f7ff fd06 	bl	800084c <__aeabi_ddiv>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e48:	f7ff fa20 	bl	800028c <__adddf3>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8000e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e58:	ec43 2b17 	vmov	d7, r2, r3
}
 8000e5c:	eeb0 0a47 	vmov.f32	s0, s14
 8000e60:	eef0 0a67 	vmov.f32	s1, s15
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	51eb851f 	.word	0x51eb851f
 8000e70:	40590000 	.word	0x40590000
 8000e74:	404e0000 	.word	0x404e0000

08000e78 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8000e78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8000e88:	2900      	cmp	r1, #0
 8000e8a:	d169      	bne.n	8000f60 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3371      	adds	r3, #113	; 0x71
 8000e90:	2206      	movs	r2, #6
 8000e92:	49ba      	ldr	r1, [pc, #744]	; (800117c <prv_parse_term+0x304>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f005 fcec 	bl	8006872 <strncmp>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d009      	beq.n	8000eb4 <prv_parse_term+0x3c>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3371      	adds	r3, #113	; 0x71
 8000ea4:	2206      	movs	r2, #6
 8000ea6:	49b6      	ldr	r1, [pc, #728]	; (8001180 <prv_parse_term+0x308>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f005 fce2 	bl	8006872 <strncmp>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d104      	bne.n	8000ebe <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8000ebc:	e04e      	b.n	8000f5c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3371      	adds	r3, #113	; 0x71
 8000ec2:	2206      	movs	r2, #6
 8000ec4:	49af      	ldr	r1, [pc, #700]	; (8001184 <prv_parse_term+0x30c>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f005 fcd3 	bl	8006872 <strncmp>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d009      	beq.n	8000ee6 <prv_parse_term+0x6e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3371      	adds	r3, #113	; 0x71
 8000ed6:	2206      	movs	r2, #6
 8000ed8:	49ab      	ldr	r1, [pc, #684]	; (8001188 <prv_parse_term+0x310>)
 8000eda:	4618      	mov	r0, r3
 8000edc:	f005 fcc9 	bl	8006872 <strncmp>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d104      	bne.n	8000ef0 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2202      	movs	r2, #2
 8000eea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8000eee:	e035      	b.n	8000f5c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3371      	adds	r3, #113	; 0x71
 8000ef4:	2206      	movs	r2, #6
 8000ef6:	49a5      	ldr	r1, [pc, #660]	; (800118c <prv_parse_term+0x314>)
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f005 fcba 	bl	8006872 <strncmp>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d009      	beq.n	8000f18 <prv_parse_term+0xa0>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3371      	adds	r3, #113	; 0x71
 8000f08:	2206      	movs	r2, #6
 8000f0a:	49a1      	ldr	r1, [pc, #644]	; (8001190 <prv_parse_term+0x318>)
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f005 fcb0 	bl	8006872 <strncmp>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d104      	bne.n	8000f22 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8000f20:	e01c      	b.n	8000f5c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3371      	adds	r3, #113	; 0x71
 8000f26:	2206      	movs	r2, #6
 8000f28:	499a      	ldr	r1, [pc, #616]	; (8001194 <prv_parse_term+0x31c>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f005 fca1 	bl	8006872 <strncmp>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d009      	beq.n	8000f4a <prv_parse_term+0xd2>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3371      	adds	r3, #113	; 0x71
 8000f3a:	2206      	movs	r2, #6
 8000f3c:	4996      	ldr	r1, [pc, #600]	; (8001198 <prv_parse_term+0x320>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f005 fc97 	bl	8006872 <strncmp>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d104      	bne.n	8000f54 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8000f52:	e003      	b.n	8000f5c <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e231      	b.n	80013c4 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8000f66:	2900      	cmp	r1, #0
 8000f68:	f000 822b 	beq.w	80013c2 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8000f72:	2901      	cmp	r1, #1
 8000f74:	f040 80c9 	bne.w	800110a <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	2b0a      	cmp	r3, #10
 8000f82:	f200 8213 	bhi.w	80013ac <prv_parse_term+0x534>
 8000f86:	a201      	add	r2, pc, #4	; (adr r2, 8000f8c <prv_parse_term+0x114>)
 8000f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8c:	08000fb9 	.word	0x08000fb9
 8000f90:	08001033 	.word	0x08001033
 8000f94:	08001049 	.word	0x08001049
 8000f98:	08001073 	.word	0x08001073
 8000f9c:	08001089 	.word	0x08001089
 8000fa0:	080010b3 	.word	0x080010b3
 8000fa4:	080010c7 	.word	0x080010c7
 8000fa8:	080013ad 	.word	0x080013ad
 8000fac:	080010db 	.word	0x080010db
 8000fb0:	080013ad 	.word	0x080013ad
 8000fb4:	080010f3 	.word	0x080010f3
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8000fbe:	3b30      	subs	r3, #48	; 0x30
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	0092      	lsls	r2, r2, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	3b30      	subs	r3, #48	; 0x30
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8000fe6:	3b30      	subs	r3, #48	; 0x30
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	3b30      	subs	r3, #48	; 0x30
 8001000:	b2da      	uxtb	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800100e:	3b30      	subs	r3, #48	; 0x30
 8001010:	b2db      	uxtb	r3, r3
 8001012:	461a      	mov	r2, r3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001022:	4413      	add	r3, r2
 8001024:	b2db      	uxtb	r3, r3
 8001026:	3b30      	subs	r3, #48	; 0x30
 8001028:	b2da      	uxtb	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8001030:	e1c7      	b.n	80013c2 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fed0 	bl	8000dd8 <prv_parse_lat_long>
 8001038:	eeb0 7a40 	vmov.f32	s14, s0
 800103c:	eef0 7a60 	vmov.f32	s15, s1
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001046:	e1bc      	b.n	80013c2 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800104e:	2b53      	cmp	r3, #83	; 0x53
 8001050:	d005      	beq.n	800105e <prv_parse_term+0x1e6>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001058:	2b73      	cmp	r3, #115	; 0x73
 800105a:	f040 81a9 	bne.w	80013b0 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001064:	4690      	mov	r8, r2
 8001066:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8001070:	e19e      	b.n	80013b0 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff feb0 	bl	8000dd8 <prv_parse_lat_long>
 8001078:	eeb0 7a40 	vmov.f32	s14, s0
 800107c:	eef0 7a60 	vmov.f32	s15, s1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001086:	e19c      	b.n	80013c2 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800108e:	2b57      	cmp	r3, #87	; 0x57
 8001090:	d005      	beq.n	800109e <prv_parse_term+0x226>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001098:	2b77      	cmp	r3, #119	; 0x77
 800109a:	f040 818b 	bne.w	80013b4 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80010a4:	4614      	mov	r4, r2
 80010a6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 80010b0:	e180      	b.n	80013b4 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80010b2:	2100      	movs	r1, #0
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fe1d 	bl	8000cf4 <prv_parse_number>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 80010c4:	e17d      	b.n	80013c2 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80010c6:	2100      	movs	r1, #0
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff fe13 	bl	8000cf4 <prv_parse_number>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 80010d8:	e173      	b.n	80013c2 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 80010da:	2100      	movs	r1, #0
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff fe53 	bl	8000d88 <prv_parse_float_number>
 80010e2:	eeb0 7a40 	vmov.f32	s14, s0
 80010e6:	eef0 7a60 	vmov.f32	s15, s1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80010f0:	e167      	b.n	80013c2 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 80010f2:	2100      	movs	r1, #0
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fe47 	bl	8000d88 <prv_parse_float_number>
 80010fa:	eeb0 7a40 	vmov.f32	s14, s0
 80010fe:	eef0 7a60 	vmov.f32	s15, s1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001108:	e15b      	b.n	80013c2 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001110:	2902      	cmp	r1, #2
 8001112:	f040 8083 	bne.w	800121c <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800111c:	3b02      	subs	r3, #2
 800111e:	2b0f      	cmp	r3, #15
 8001120:	d860      	bhi.n	80011e4 <prv_parse_term+0x36c>
 8001122:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <prv_parse_term+0x2b0>)
 8001124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001128:	08001169 	.word	0x08001169
 800112c:	080011e5 	.word	0x080011e5
 8001130:	080011e5 	.word	0x080011e5
 8001134:	080011e5 	.word	0x080011e5
 8001138:	080011e5 	.word	0x080011e5
 800113c:	080011e5 	.word	0x080011e5
 8001140:	080011e5 	.word	0x080011e5
 8001144:	080011e5 	.word	0x080011e5
 8001148:	080011e5 	.word	0x080011e5
 800114c:	080011e5 	.word	0x080011e5
 8001150:	080011e5 	.word	0x080011e5
 8001154:	080011e5 	.word	0x080011e5
 8001158:	080011e5 	.word	0x080011e5
 800115c:	0800119d 	.word	0x0800119d
 8001160:	080011b5 	.word	0x080011b5
 8001164:	080011cd 	.word	0x080011cd
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001168:	2100      	movs	r1, #0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fdc2 	bl	8000cf4 <prv_parse_number>
 8001170:	4603      	mov	r3, r0
 8001172:	b2da      	uxtb	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 800117a:	e122      	b.n	80013c2 <prv_parse_term+0x54a>
 800117c:	080093b0 	.word	0x080093b0
 8001180:	080093b8 	.word	0x080093b8
 8001184:	080093c0 	.word	0x080093c0
 8001188:	080093c8 	.word	0x080093c8
 800118c:	080093d0 	.word	0x080093d0
 8001190:	080093d8 	.word	0x080093d8
 8001194:	080093e0 	.word	0x080093e0
 8001198:	080093e8 	.word	0x080093e8
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 800119c:	2100      	movs	r1, #0
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fdf2 	bl	8000d88 <prv_parse_float_number>
 80011a4:	eeb0 7a40 	vmov.f32	s14, s0
 80011a8:	eef0 7a60 	vmov.f32	s15, s1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80011b2:	e106      	b.n	80013c2 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80011b4:	2100      	movs	r1, #0
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fde6 	bl	8000d88 <prv_parse_float_number>
 80011bc:	eeb0 7a40 	vmov.f32	s14, s0
 80011c0:	eef0 7a60 	vmov.f32	s15, s1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80011ca:	e0fa      	b.n	80013c2 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80011cc:	2100      	movs	r1, #0
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fdda 	bl	8000d88 <prv_parse_float_number>
 80011d4:	eeb0 7a40 	vmov.f32	s14, s0
 80011d8:	eef0 7a60 	vmov.f32	s15, s1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80011e2:	e0ee      	b.n	80013c2 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	f240 80e4 	bls.w	80013b8 <prv_parse_term+0x540>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80011f6:	2b0e      	cmp	r3, #14
 80011f8:	f200 80de 	bhi.w	80013b8 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 80011fc:	2100      	movs	r1, #0
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fd78 	bl	8000cf4 <prv_parse_number>
 8001204:	4602      	mov	r2, r0
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800120c:	3b03      	subs	r3, #3
 800120e:	b2d1      	uxtb	r1, r2
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4413      	add	r3, r2
 8001214:	460a      	mov	r2, r1
 8001216:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 800121a:	e0cd      	b.n	80013b8 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001222:	2903      	cmp	r1, #3
 8001224:	d11b      	bne.n	800125e <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800122c:	2b02      	cmp	r3, #2
 800122e:	d002      	beq.n	8001236 <prv_parse_term+0x3be>
 8001230:	2b03      	cmp	r3, #3
 8001232:	d00a      	beq.n	800124a <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001234:	e0c5      	b.n	80013c2 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001236:	2100      	movs	r1, #0
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff fd5b 	bl	8000cf4 <prv_parse_number>
 800123e:	4603      	mov	r3, r0
 8001240:	b2da      	uxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8001248:	e0bb      	b.n	80013c2 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800124a:	2100      	movs	r1, #0
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fd51 	bl	8000cf4 <prv_parse_number>
 8001252:	4603      	mov	r3, r0
 8001254:	b2da      	uxtb	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 800125c:	e0b1      	b.n	80013c2 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001264:	2904      	cmp	r1, #4
 8001266:	f040 80ac 	bne.w	80013c2 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001270:	3902      	subs	r1, #2
 8001272:	2909      	cmp	r1, #9
 8001274:	f200 80a2 	bhi.w	80013bc <prv_parse_term+0x544>
 8001278:	a001      	add	r0, pc, #4	; (adr r0, 8001280 <prv_parse_term+0x408>)
 800127a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800127e:	bf00      	nop
 8001280:	080012a9 	.word	0x080012a9
 8001284:	080013bd 	.word	0x080013bd
 8001288:	080013bd 	.word	0x080013bd
 800128c:	080013bd 	.word	0x080013bd
 8001290:	080013bd 	.word	0x080013bd
 8001294:	080012c3 	.word	0x080012c3
 8001298:	080012db 	.word	0x080012db
 800129c:	080012f3 	.word	0x080012f3
 80012a0:	0800136d 	.word	0x0800136d
 80012a4:	08001385 	.word	0x08001385
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012ae:	2b41      	cmp	r3, #65	; 0x41
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80012c0:	e07f      	b.n	80013c2 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80012c2:	2100      	movs	r1, #0
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fd5f 	bl	8000d88 <prv_parse_float_number>
 80012ca:	eeb0 7a40 	vmov.f32	s14, s0
 80012ce:	eef0 7a60 	vmov.f32	s15, s1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80012d8:	e073      	b.n	80013c2 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 80012da:	2100      	movs	r1, #0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fd53 	bl	8000d88 <prv_parse_float_number>
 80012e2:	eeb0 7a40 	vmov.f32	s14, s0
 80012e6:	eef0 7a60 	vmov.f32	s15, s1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80012f0:	e067      	b.n	80013c2 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012f8:	3b30      	subs	r3, #48	; 0x30
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4413      	add	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800130c:	4413      	add	r3, r2
 800130e:	b2db      	uxtb	r3, r3
 8001310:	3b30      	subs	r3, #48	; 0x30
 8001312:	b2da      	uxtb	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001320:	3b30      	subs	r3, #48	; 0x30
 8001322:	b2db      	uxtb	r3, r3
 8001324:	461a      	mov	r2, r3
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4413      	add	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	b2da      	uxtb	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001334:	4413      	add	r3, r2
 8001336:	b2db      	uxtb	r3, r3
 8001338:	3b30      	subs	r3, #48	; 0x30
 800133a:	b2da      	uxtb	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001348:	3b30      	subs	r3, #48	; 0x30
 800134a:	b2db      	uxtb	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4413      	add	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	b2da      	uxtb	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800135c:	4413      	add	r3, r2
 800135e:	b2db      	uxtb	r3, r3
 8001360:	3b30      	subs	r3, #48	; 0x30
 8001362:	b2da      	uxtb	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 800136a:	e02a      	b.n	80013c2 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 800136c:	2100      	movs	r1, #0
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fd0a 	bl	8000d88 <prv_parse_float_number>
 8001374:	eeb0 7a40 	vmov.f32	s14, s0
 8001378:	eef0 7a60 	vmov.f32	s15, s1
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001382:	e01e      	b.n	80013c2 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 800138a:	2957      	cmp	r1, #87	; 0x57
 800138c:	d004      	beq.n	8001398 <prv_parse_term+0x520>
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001394:	2977      	cmp	r1, #119	; 0x77
 8001396:	d113      	bne.n	80013c0 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 800139e:	4602      	mov	r2, r0
 80013a0:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 80013aa:	e009      	b.n	80013c0 <prv_parse_term+0x548>
                break;
 80013ac:	bf00      	nop
 80013ae:	e008      	b.n	80013c2 <prv_parse_term+0x54a>
                break;
 80013b0:	bf00      	nop
 80013b2:	e006      	b.n	80013c2 <prv_parse_term+0x54a>
                break;
 80013b4:	bf00      	nop
 80013b6:	e004      	b.n	80013c2 <prv_parse_term+0x54a>
                break;
 80013b8:	bf00      	nop
 80013ba:	e002      	b.n	80013c2 <prv_parse_term+0x54a>
            default:
                break;
 80013bc:	bf00      	nop
 80013be:	e000      	b.n	80013c2 <prv_parse_term+0x54a>
                break;
 80013c0:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013ce:	bf00      	nop

080013d0 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80013de:	2b2f      	cmp	r3, #47	; 0x2f
 80013e0:	d90d      	bls.n	80013fe <prv_check_crc+0x2e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80013e8:	2b39      	cmp	r3, #57	; 0x39
 80013ea:	d808      	bhi.n	80013fe <prv_check_crc+0x2e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80013f2:	3b30      	subs	r3, #48	; 0x30
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	b25a      	sxtb	r2, r3
 80013fc:	e026      	b.n	800144c <prv_check_crc+0x7c>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001404:	2b60      	cmp	r3, #96	; 0x60
 8001406:	d90d      	bls.n	8001424 <prv_check_crc+0x54>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800140e:	2b7a      	cmp	r3, #122	; 0x7a
 8001410:	d808      	bhi.n	8001424 <prv_check_crc+0x54>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001418:	3b57      	subs	r3, #87	; 0x57
 800141a:	b2db      	uxtb	r3, r3
 800141c:	011b      	lsls	r3, r3, #4
 800141e:	b2db      	uxtb	r3, r3
 8001420:	b25a      	sxtb	r2, r3
 8001422:	e013      	b.n	800144c <prv_check_crc+0x7c>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800142a:	2b40      	cmp	r3, #64	; 0x40
 800142c:	d90d      	bls.n	800144a <prv_check_crc+0x7a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001434:	2b5a      	cmp	r3, #90	; 0x5a
 8001436:	d808      	bhi.n	800144a <prv_check_crc+0x7a>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800143e:	3b37      	subs	r3, #55	; 0x37
 8001440:	b2db      	uxtb	r3, r3
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	b2db      	uxtb	r3, r3
 8001446:	b25a      	sxtb	r2, r3
 8001448:	e000      	b.n	800144c <prv_check_crc+0x7c>
 800144a:	2200      	movs	r2, #0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001452:	2b2f      	cmp	r3, #47	; 0x2f
 8001454:	d90c      	bls.n	8001470 <prv_check_crc+0xa0>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800145c:	2b39      	cmp	r3, #57	; 0x39
 800145e:	d807      	bhi.n	8001470 <prv_check_crc+0xa0>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001466:	b25b      	sxtb	r3, r3
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	b25b      	sxtb	r3, r3
 800146e:	e028      	b.n	80014c2 <prv_check_crc+0xf2>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001476:	2b60      	cmp	r3, #96	; 0x60
 8001478:	d90e      	bls.n	8001498 <prv_check_crc+0xc8>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001480:	2b7a      	cmp	r3, #122	; 0x7a
 8001482:	d809      	bhi.n	8001498 <prv_check_crc+0xc8>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800148a:	3b57      	subs	r3, #87	; 0x57
 800148c:	b2db      	uxtb	r3, r3
 800148e:	b25b      	sxtb	r3, r3
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	b25b      	sxtb	r3, r3
 8001496:	e014      	b.n	80014c2 <prv_check_crc+0xf2>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800149e:	2b40      	cmp	r3, #64	; 0x40
 80014a0:	d90e      	bls.n	80014c0 <prv_check_crc+0xf0>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80014a8:	2b5a      	cmp	r3, #90	; 0x5a
 80014aa:	d809      	bhi.n	80014c0 <prv_check_crc+0xf0>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80014b2:	3b37      	subs	r3, #55	; 0x37
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	e000      	b.n	80014c2 <prv_check_crc+0xf2>
 80014c0:	2300      	movs	r3, #0
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	bf0c      	ite	eq
 80014d4:	2301      	moveq	r3, #1
 80014d6:	2300      	movne	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d136      	bne.n	8001566 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001564:	e061      	b.n	800162a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800156c:	2b02      	cmp	r3, #2
 800156e:	d121      	bne.n	80015b4 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f103 0041 	add.w	r0, r3, #65	; 0x41
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	33a1      	adds	r3, #161	; 0xa1
 80015aa:	220c      	movs	r2, #12
 80015ac:	4619      	mov	r1, r3
 80015ae:	f005 f9e9 	bl	8006984 <memcpy>
 80015b2:	e03a      	b.n	800162a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d106      	bne.n	80015cc <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80015ca:	e02e      	b.n	800162a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d129      	bne.n	800162a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001644:	e0ad      	b.n	80017a2 <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b24      	cmp	r3, #36	; 0x24
 800164c:	d128      	bne.n	80016a0 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3370      	adds	r3, #112	; 0x70
 8001652:	2240      	movs	r2, #64	; 0x40
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f005 f903 	bl	8006862 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001662:	2b0b      	cmp	r3, #11
 8001664:	f200 8097 	bhi.w	8001796 <lwgps_process+0x162>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800166e:	4619      	mov	r1, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	440b      	add	r3, r1
 8001678:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001682:	3301      	adds	r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001692:	461a      	mov	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800169e:	e07a      	b.n	8001796 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b2c      	cmp	r3, #44	; 0x2c
 80016a6:	d11d      	bne.n	80016e4 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7ff fbe5 	bl	8000e78 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4053      	eors	r3, r2
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80016d8:	3301      	adds	r3, #1
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80016e2:	e058      	b.n	8001796 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b2a      	cmp	r3, #42	; 0x2a
 80016ea:	d117      	bne.n	800171c <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7ff fbc3 	bl	8000e78 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001710:	3301      	adds	r3, #1
 8001712:	b2da      	uxtb	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800171a:	e03c      	b.n	8001796 <lwgps_process+0x162>
        } else if (*d == '\r') {
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b0d      	cmp	r3, #13
 8001722:	d109      	bne.n	8001738 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f7ff fe53 	bl	80013d0 <prv_check_crc>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d032      	beq.n	8001796 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7ff fed8 	bl	80014e6 <prv_copy_from_tmp_memory>
 8001736:	e02e      	b.n	8001796 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4053      	eors	r3, r2
 800174e:	b2da      	uxtb	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800175c:	2b0b      	cmp	r3, #11
 800175e:	d81a      	bhi.n	8001796 <lwgps_process+0x162>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001766:	4619      	mov	r1, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	440b      	add	r3, r1
 8001770:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800177a:	3301      	adds	r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f47f af4e 	bne.w	8001646 <lwgps_process+0x12>
        }
    }
    return 1;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_UART_RxCpltCallback+0x68>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d127      	bne.n	8001814 <HAL_UART_RxCpltCallback+0x60>
		if(rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_UART_RxCpltCallback+0x6c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b0a      	cmp	r3, #10
 80017ca:	d010      	beq.n	80017ee <HAL_UART_RxCpltCallback+0x3a>
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_UART_RxCpltCallback+0x70>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_UART_RxCpltCallback+0x70>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	b2d1      	uxtb	r1, r2
 80017de:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_UART_RxCpltCallback+0x70>)
 80017e0:	7011      	strb	r1, [r2, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_UART_RxCpltCallback+0x6c>)
 80017e6:	7819      	ldrb	r1, [r3, #0]
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HAL_UART_RxCpltCallback+0x74>)
 80017ea:	5499      	strb	r1, [r3, r2]
 80017ec:	e00d      	b.n	800180a <HAL_UART_RxCpltCallback+0x56>

		}
		else {
			lwgps_process(&gps, rx_buffer, rx_index+1);
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_UART_RxCpltCallback+0x70>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	461a      	mov	r2, r3
 80017f6:	490c      	ldr	r1, [pc, #48]	; (8001828 <HAL_UART_RxCpltCallback+0x74>)
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <HAL_UART_RxCpltCallback+0x78>)
 80017fa:	f7ff ff1b 	bl	8001634 <lwgps_process>
			rx_index = 0;
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_UART_RxCpltCallback+0x70>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_UART_RxCpltCallback+0x6c>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800180a:	2201      	movs	r2, #1
 800180c:	4904      	ldr	r1, [pc, #16]	; (8001820 <HAL_UART_RxCpltCallback+0x6c>)
 800180e:	4803      	ldr	r0, [pc, #12]	; (800181c <HAL_UART_RxCpltCallback+0x68>)
 8001810:	f002 fb48 	bl	8003ea4 <HAL_UART_Receive_IT>
	}
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200001f4 	.word	0x200001f4
 8001820:	20000439 	.word	0x20000439
 8001824:	20000438 	.word	0x20000438
 8001828:	200003b8 	.word	0x200003b8
 800182c:	20000308 	.word	0x20000308

08001830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001834:	f000 fba2 	bl	8001f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001838:	f000 f87e 	bl	8001938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183c:	f000 f936 	bl	8001aac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001840:	f000 f8d4 	bl	80019ec <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001844:	f000 f902 	bl	8001a4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001848:	2201      	movs	r2, #1
 800184a:	4937      	ldr	r1, [pc, #220]	; (8001928 <main+0xf8>)
 800184c:	4837      	ldr	r0, [pc, #220]	; (800192c <main+0xfc>)
 800184e:	f002 fb29 	bl	8003ea4 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(gps.sats_in_view>6 ) {
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <main+0x100>)
 8001854:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001858:	2b06      	cmp	r3, #6
 800185a:	d95e      	bls.n	800191a <main+0xea>

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,SET);
 800185c:	2201      	movs	r2, #1
 800185e:	2120      	movs	r1, #32
 8001860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001864:	f000 ff0e 	bl	8002684 <HAL_GPIO_WritePin>
		  		USART3->TDR = 'L';
 8001868:	4b32      	ldr	r3, [pc, #200]	; (8001934 <main+0x104>)
 800186a:	224c      	movs	r2, #76	; 0x4c
 800186c:	851a      	strh	r2, [r3, #40]	; 0x28
		  		while ((USART3->ISR & USART_ISR_TXE) == 0)
 800186e:	bf00      	nop
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <main+0x104>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f9      	beq.n	8001870 <main+0x40>
		  			;
		  		USART3->TDR = 'A';
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <main+0x104>)
 800187e:	2241      	movs	r2, #65	; 0x41
 8001880:	851a      	strh	r2, [r3, #40]	; 0x28
		  		while ((USART3->ISR & USART_ISR_TXE) == 0)
 8001882:	bf00      	nop
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <main+0x104>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f9      	beq.n	8001884 <main+0x54>
		  			;
		  		HKK_UART_Data_Transmitter(gps.latitude);
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <main+0x100>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff f9a5 	bl	8000be8 <__aeabi_d2f>
 800189e:	4603      	mov	r3, r0
 80018a0:	ee00 3a10 	vmov	s0, r3
 80018a4:	f000 f94a 	bl	8001b3c <HKK_UART_Data_Transmitter>
		  		USART3->TDR = '\n';
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <main+0x104>)
 80018aa:	220a      	movs	r2, #10
 80018ac:	851a      	strh	r2, [r3, #40]	; 0x28
		  		while ((USART3->ISR & USART_ISR_TXE) == 0)
 80018ae:	bf00      	nop
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <main+0x104>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f9      	beq.n	80018b0 <main+0x80>
		  		;
		  		USART3->TDR = 'L';
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <main+0x104>)
 80018be:	224c      	movs	r2, #76	; 0x4c
 80018c0:	851a      	strh	r2, [r3, #40]	; 0x28
		  		while ((USART3->ISR & USART_ISR_TXE) == 0)
 80018c2:	bf00      	nop
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <main+0x104>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f9      	beq.n	80018c4 <main+0x94>
		  			;
		  		USART3->TDR = 'O';
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <main+0x104>)
 80018d2:	224f      	movs	r2, #79	; 0x4f
 80018d4:	851a      	strh	r2, [r3, #40]	; 0x28
		  		while ((USART3->ISR & USART_ISR_TXE) == 0)
 80018d6:	bf00      	nop
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <main+0x104>)
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f9      	beq.n	80018d8 <main+0xa8>
		  			;
		  		HKK_UART_Data_Transmitter(gps.longitude);
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <main+0x100>)
 80018e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff f97b 	bl	8000be8 <__aeabi_d2f>
 80018f2:	4603      	mov	r3, r0
 80018f4:	ee00 3a10 	vmov	s0, r3
 80018f8:	f000 f920 	bl	8001b3c <HKK_UART_Data_Transmitter>
		  		USART3->TDR = '\n';
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <main+0x104>)
 80018fe:	220a      	movs	r2, #10
 8001900:	851a      	strh	r2, [r3, #40]	; 0x28
		  		while ((USART3->ISR & USART_ISR_TXE) == 0);
 8001902:	bf00      	nop
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <main+0x104>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f9      	beq.n	8001904 <main+0xd4>
		  		HAL_Delay(1000);
 8001910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001914:	f000 fb98 	bl	8002048 <HAL_Delay>
 8001918:	e79b      	b.n	8001852 <main+0x22>
	  	  }
	  	  else{
	  			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2120      	movs	r1, #32
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f000 feaf 	bl	8002684 <HAL_GPIO_WritePin>
	  if(gps.sats_in_view>6 ) {
 8001926:	e794      	b.n	8001852 <main+0x22>
 8001928:	20000439 	.word	0x20000439
 800192c:	200001f4 	.word	0x200001f4
 8001930:	20000308 	.word	0x20000308
 8001934:	40004800 	.word	0x40004800

08001938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b096      	sub	sp, #88	; 0x58
 800193c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001942:	2228      	movs	r2, #40	; 0x28
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f004 ff8b 	bl	8006862 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800195c:	463b      	mov	r3, r7
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]
 800196a:	615a      	str	r2, [r3, #20]
 800196c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800196e:	2302      	movs	r3, #2
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001972:	2301      	movs	r3, #1
 8001974:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001976:	2310      	movs	r3, #16
 8001978:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197a:	2302      	movs	r3, #2
 800197c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800197e:	2300      	movs	r3, #0
 8001980:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001982:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001986:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fe91 	bl	80026b4 <HAL_RCC_OscConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001998:	f000 f900 	bl	8001b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199c:	230f      	movs	r3, #15
 800199e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a0:	2302      	movs	r3, #2
 80019a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	2102      	movs	r1, #2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 feb9 	bl	8003730 <HAL_RCC_ClockConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80019c4:	f000 f8ea 	bl	8001b9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d0:	463b      	mov	r3, r7
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 f8e2 	bl	8003b9c <HAL_RCCEx_PeriphCLKConfig>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80019de:	f000 f8dd 	bl	8001b9c <Error_Handler>
  }
}
 80019e2:	bf00      	nop
 80019e4:	3758      	adds	r7, #88	; 0x58
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 80019f2:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <MX_USART1_UART_Init+0x5c>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 80019f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a30:	f002 f9ea 	bl	8003e08 <HAL_UART_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a3a:	f000 f8af 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200001f4 	.word	0x200001f4
 8001a48:	40013800 	.word	0x40013800

08001a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_USART3_UART_Init+0x58>)
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <MX_USART3_UART_Init+0x5c>)
 8001a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <MX_USART3_UART_Init+0x58>)
 8001a58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_USART3_UART_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_USART3_UART_Init+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_USART3_UART_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_USART3_UART_Init+0x58>)
 8001a72:	220c      	movs	r2, #12
 8001a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <MX_USART3_UART_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_USART3_UART_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MX_USART3_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_USART3_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_USART3_UART_Init+0x58>)
 8001a90:	f002 f9ba 	bl	8003e08 <HAL_UART_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a9a:	f000 f87f 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000027c 	.word	0x2000027c
 8001aa8:	40004800 	.word	0x40004800

08001aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <MX_GPIO_Init+0x88>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <MX_GPIO_Init+0x88>)
 8001ac8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001acc:	6153      	str	r3, [r2, #20]
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <MX_GPIO_Init+0x88>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <MX_GPIO_Init+0x88>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	4a15      	ldr	r2, [pc, #84]	; (8001b34 <MX_GPIO_Init+0x88>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae4:	6153      	str	r3, [r2, #20]
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_GPIO_Init+0x88>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <MX_GPIO_Init+0x88>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <MX_GPIO_Init+0x88>)
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	6153      	str	r3, [r2, #20]
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <MX_GPIO_Init+0x88>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]

    /**USART1 GPIO Configuration
        PC4     ------> USART1_TX
        PC5     ------> USART1_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b0a:	2330      	movs	r3, #48	; 0x30
 8001b0c:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	4619      	mov	r1, r3
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <MX_GPIO_Init+0x8c>)
 8001b26:	f000 fc3b 	bl	80023a0 <HAL_GPIO_Init>



/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b2a:	bf00      	nop
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	48000800 	.word	0x48000800

08001b3c <HKK_UART_Data_Transmitter>:

/* USER CODE BEGIN 4 */
void HKK_UART_Data_Transmitter(float Transmit_Data)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	ed87 0a01 	vstr	s0, [r7, #4]
	char Buffer[9];
	sprintf(Buffer, "%f", Transmit_Data);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe fcfe 	bl	8000548 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	f107 0008 	add.w	r0, r7, #8
 8001b54:	490f      	ldr	r1, [pc, #60]	; (8001b94 <HKK_UART_Data_Transmitter+0x58>)
 8001b56:	f004 fe21 	bl	800679c <siprintf>
	for (int i = 0; i < sizeof(Buffer); i++){
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e011      	b.n	8001b84 <HKK_UART_Data_Transmitter+0x48>
		USART3->TDR = Buffer[i];
 8001b60:	f107 0208 	add.w	r2, r7, #8
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	4413      	add	r3, r2
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HKK_UART_Data_Transmitter+0x5c>)
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	851a      	strh	r2, [r3, #40]	; 0x28
		while ((USART3->ISR & USART_ISR_TXE) == 0)
 8001b70:	bf00      	nop
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HKK_UART_Data_Transmitter+0x5c>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f9      	beq.n	8001b72 <HKK_UART_Data_Transmitter+0x36>
	for (int i = 0; i < sizeof(Buffer); i++){
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d9ea      	bls.n	8001b60 <HKK_UART_Data_Transmitter+0x24>
			;

	}

	}
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	080093f0 	.word	0x080093f0
 8001b98:	40004800 	.word	0x40004800

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <Error_Handler+0x8>
	...

08001ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_MspInit+0x44>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_MspInit+0x44>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6193      	str	r3, [r2, #24]
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_MspInit+0x44>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_MspInit+0x44>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4a08      	ldr	r2, [pc, #32]	; (8001bec <HAL_MspInit+0x44>)
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	61d3      	str	r3, [r2, #28]
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_MspInit+0x44>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bde:	2007      	movs	r0, #7
 8001be0:	f000 fb26 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a36      	ldr	r2, [pc, #216]	; (8001ce8 <HAL_UART_MspInit+0xf8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d130      	bne.n	8001c74 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c12:	4b36      	ldr	r3, [pc, #216]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	4a35      	ldr	r2, [pc, #212]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1c:	6193      	str	r3, [r2, #24]
 8001c1e:	4b33      	ldr	r3, [pc, #204]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	4a2f      	ldr	r2, [pc, #188]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c34:	6153      	str	r3, [r2, #20]
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c42:	2330      	movs	r3, #48	; 0x30
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c52:	2307      	movs	r3, #7
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4824      	ldr	r0, [pc, #144]	; (8001cf0 <HAL_UART_MspInit+0x100>)
 8001c5e:	f000 fb9f 	bl	80023a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	2025      	movs	r0, #37	; 0x25
 8001c68:	f000 faed 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c6c:	2025      	movs	r0, #37	; 0x25
 8001c6e:	f000 fb06 	bl	800227e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c72:	e035      	b.n	8001ce0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <HAL_UART_MspInit+0x104>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d130      	bne.n	8001ce0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	61d3      	str	r3, [r2, #28]
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca0:	6153      	str	r3, [r2, #20]
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <HAL_UART_MspInit+0x108>)
 8001ccc:	f000 fb68 	bl	80023a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2027      	movs	r0, #39	; 0x27
 8001cd6:	f000 fab6 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cda:	2027      	movs	r0, #39	; 0x27
 8001cdc:	f000 facf 	bl	800227e <HAL_NVIC_EnableIRQ>
}
 8001ce0:	bf00      	nop
 8001ce2:	3730      	adds	r7, #48	; 0x30
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40013800 	.word	0x40013800
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	48000800 	.word	0x48000800
 8001cf4:	40004800 	.word	0x40004800
 8001cf8:	48000400 	.word	0x48000400

08001cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <NMI_Handler+0x4>

08001d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <HardFault_Handler+0x4>

08001d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <MemManage_Handler+0x4>

08001d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <BusFault_Handler+0x4>

08001d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <UsageFault_Handler+0x4>

08001d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d48:	f000 f95e 	bl	8002008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <USART1_IRQHandler+0x10>)
 8001d56:	f002 f8e9 	bl	8003f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200001f4 	.word	0x200001f4

08001d64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXT line 28.
  */
void USART3_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <USART3_IRQHandler+0x10>)
 8001d6a:	f002 f8df 	bl	8003f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000027c 	.word	0x2000027c

08001d78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return 1;
 8001d7c:	2301      	movs	r3, #1
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_kill>:

int _kill(int pid, int sig)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d92:	f004 fdcb 	bl	800692c <__errno>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2216      	movs	r2, #22
 8001d9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_exit>:

void _exit (int status)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ffe7 	bl	8001d88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dba:	e7fe      	b.n	8001dba <_exit+0x12>

08001dbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	e00a      	b.n	8001de4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dce:	f3af 8000 	nop.w
 8001dd2:	4601      	mov	r1, r0
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	60ba      	str	r2, [r7, #8]
 8001dda:	b2ca      	uxtb	r2, r1
 8001ddc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dbf0      	blt.n	8001dce <_read+0x12>
  }

  return len;
 8001dec:	687b      	ldr	r3, [r7, #4]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e009      	b.n	8001e1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	60ba      	str	r2, [r7, #8]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	dbf1      	blt.n	8001e08 <_write+0x12>
  }
  return len;
 8001e24:	687b      	ldr	r3, [r7, #4]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <_close>:

int _close(int file)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e56:	605a      	str	r2, [r3, #4]
  return 0;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <_isatty>:

int _isatty(int file)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea0:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <_sbrk+0x5c>)
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <_sbrk+0x60>)
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eac:	4b13      	ldr	r3, [pc, #76]	; (8001efc <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d102      	bne.n	8001eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <_sbrk+0x64>)
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <_sbrk+0x68>)
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d207      	bcs.n	8001ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec8:	f004 fd30 	bl	800692c <__errno>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	220c      	movs	r2, #12
 8001ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	e009      	b.n	8001eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <_sbrk+0x64>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <_sbrk+0x64>)
 8001ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eea:	68fb      	ldr	r3, [r7, #12]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20003000 	.word	0x20003000
 8001ef8:	00000400 	.word	0x00000400
 8001efc:	2000043c 	.word	0x2000043c
 8001f00:	20000590 	.word	0x20000590

08001f04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <SystemInit+0x20>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <SystemInit+0x20>)
 8001f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f60 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f2c:	f7ff ffea 	bl	8001f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f30:	480c      	ldr	r0, [pc, #48]	; (8001f64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f32:	490d      	ldr	r1, [pc, #52]	; (8001f68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <LoopForever+0xe>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f38:	e002      	b.n	8001f40 <LoopCopyDataInit>

08001f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3e:	3304      	adds	r3, #4

08001f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f44:	d3f9      	bcc.n	8001f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f46:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f48:	4c0a      	ldr	r4, [pc, #40]	; (8001f74 <LoopForever+0x16>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f4c:	e001      	b.n	8001f52 <LoopFillZerobss>

08001f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f50:	3204      	adds	r2, #4

08001f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f54:	d3fb      	bcc.n	8001f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f56:	f004 fcef 	bl	8006938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f5a:	f7ff fc69 	bl	8001830 <main>

08001f5e <LoopForever>:

LoopForever:
    b LoopForever
 8001f5e:	e7fe      	b.n	8001f5e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f60:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f68:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f6c:	0800985c 	.word	0x0800985c
  ldr r2, =_sbss
 8001f70:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f74:	20000590 	.word	0x20000590

08001f78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f78:	e7fe      	b.n	8001f78 <ADC1_2_IRQHandler>
	...

08001f7c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <HAL_Init+0x28>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <HAL_Init+0x28>)
 8001f86:	f043 0310 	orr.w	r3, r3, #16
 8001f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f000 f94f 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 f808 	bl	8001fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f98:	f7ff fe06 	bl	8001ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40022000 	.word	0x40022000

08001fa8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_InitTick+0x54>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_InitTick+0x58>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f967 	bl	800229a <HAL_SYSTICK_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00e      	b.n	8001ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d80a      	bhi.n	8001ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f000 f92f 	bl	8002246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe8:	4a06      	ldr	r2, [pc, #24]	; (8002004 <HAL_InitTick+0x5c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000000 	.word	0x20000000
 8002000:	20000008 	.word	0x20000008
 8002004:	20000004 	.word	0x20000004

08002008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_IncTick+0x20>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_IncTick+0x24>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4413      	add	r3, r2
 8002018:	4a04      	ldr	r2, [pc, #16]	; (800202c <HAL_IncTick+0x24>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000008 	.word	0x20000008
 800202c:	20000440 	.word	0x20000440

08002030 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return uwTick;  
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <HAL_GetTick+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000440 	.word	0x20000440

08002048 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff ffee 	bl	8002030 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_Delay+0x44>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffde 	bl	8002030 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000008 	.word	0x20000008

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4907      	ldr	r1, [pc, #28]	; (800212c <__NVIC_EnableIRQ+0x38>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	; (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	; (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff29 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff3e 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff8e 	bl	8002184 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5d 	bl	8002130 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff31 	bl	80020f4 <__NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffa2 	bl	80021ec <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d008      	beq.n	80022d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2204      	movs	r2, #4
 80022c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e020      	b.n	8002318 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 020e 	bic.w	r2, r2, #14
 80022e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0201 	bic.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	2101      	movs	r1, #1
 8002300:	fa01 f202 	lsl.w	r2, r1, r2
 8002304:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002336:	2b02      	cmp	r3, #2
 8002338:	d005      	beq.n	8002346 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2204      	movs	r2, #4
 800233e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e027      	b.n	8002396 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 020e 	bic.w	r2, r2, #14
 8002354:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236e:	2101      	movs	r1, #1
 8002370:	fa01 f202 	lsl.w	r2, r1, r2
 8002374:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
    } 
  }
  return status;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ae:	e14e      	b.n	800264e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8140 	beq.w	8002648 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d005      	beq.n	80023e0 <HAL_GPIO_Init+0x40>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d130      	bne.n	8002442 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002416:	2201      	movs	r2, #1
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 0201 	and.w	r2, r3, #1
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b03      	cmp	r3, #3
 800244c:	d017      	beq.n	800247e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d123      	bne.n	80024d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	6939      	ldr	r1, [r7, #16]
 80024ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0203 	and.w	r2, r3, #3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 809a 	beq.w	8002648 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002514:	4b55      	ldr	r3, [pc, #340]	; (800266c <HAL_GPIO_Init+0x2cc>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a54      	ldr	r2, [pc, #336]	; (800266c <HAL_GPIO_Init+0x2cc>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b52      	ldr	r3, [pc, #328]	; (800266c <HAL_GPIO_Init+0x2cc>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800252c:	4a50      	ldr	r2, [pc, #320]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3302      	adds	r3, #2
 8002534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	220f      	movs	r2, #15
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002556:	d013      	beq.n	8002580 <HAL_GPIO_Init+0x1e0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a46      	ldr	r2, [pc, #280]	; (8002674 <HAL_GPIO_Init+0x2d4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00d      	beq.n	800257c <HAL_GPIO_Init+0x1dc>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a45      	ldr	r2, [pc, #276]	; (8002678 <HAL_GPIO_Init+0x2d8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d007      	beq.n	8002578 <HAL_GPIO_Init+0x1d8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a44      	ldr	r2, [pc, #272]	; (800267c <HAL_GPIO_Init+0x2dc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d101      	bne.n	8002574 <HAL_GPIO_Init+0x1d4>
 8002570:	2303      	movs	r3, #3
 8002572:	e006      	b.n	8002582 <HAL_GPIO_Init+0x1e2>
 8002574:	2305      	movs	r3, #5
 8002576:	e004      	b.n	8002582 <HAL_GPIO_Init+0x1e2>
 8002578:	2302      	movs	r3, #2
 800257a:	e002      	b.n	8002582 <HAL_GPIO_Init+0x1e2>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <HAL_GPIO_Init+0x1e2>
 8002580:	2300      	movs	r3, #0
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	f002 0203 	and.w	r2, r2, #3
 8002588:	0092      	lsls	r2, r2, #2
 800258a:	4093      	lsls	r3, r2
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002592:	4937      	ldr	r1, [pc, #220]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	3302      	adds	r3, #2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025a0:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_GPIO_Init+0x2e0>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025c4:	4a2e      	ldr	r2, [pc, #184]	; (8002680 <HAL_GPIO_Init+0x2e0>)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025ca:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_GPIO_Init+0x2e0>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025ee:	4a24      	ldr	r2, [pc, #144]	; (8002680 <HAL_GPIO_Init+0x2e0>)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_GPIO_Init+0x2e0>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002618:	4a19      	ldr	r2, [pc, #100]	; (8002680 <HAL_GPIO_Init+0x2e0>)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_GPIO_Init+0x2e0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002642:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <HAL_GPIO_Init+0x2e0>)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3301      	adds	r3, #1
 800264c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	f47f aea9 	bne.w	80023b0 <HAL_GPIO_Init+0x10>
  }
}
 800265e:	bf00      	nop
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40021000 	.word	0x40021000
 8002670:	40010000 	.word	0x40010000
 8002674:	48000400 	.word	0x48000400
 8002678:	48000800 	.word	0x48000800
 800267c:	48000c00 	.word	0x48000c00
 8002680:	40010400 	.word	0x40010400

08002684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
 8002690:	4613      	mov	r3, r2
 8002692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002694:	787b      	ldrb	r3, [r7, #1]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026a0:	e002      	b.n	80026a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f001 b823 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 817d 	beq.w	80029ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026f0:	4bbc      	ldr	r3, [pc, #752]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d00c      	beq.n	8002716 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026fc:	4bb9      	ldr	r3, [pc, #740]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d15c      	bne.n	80027c2 <HAL_RCC_OscConfig+0x10e>
 8002708:	4bb6      	ldr	r3, [pc, #728]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002714:	d155      	bne.n	80027c2 <HAL_RCC_OscConfig+0x10e>
 8002716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800271a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800272a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d102      	bne.n	8002748 <HAL_RCC_OscConfig+0x94>
 8002742:	4ba8      	ldr	r3, [pc, #672]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	e015      	b.n	8002774 <HAL_RCC_OscConfig+0xc0>
 8002748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800274c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800275c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002760:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002764:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002770:	4b9c      	ldr	r3, [pc, #624]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002778:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800277c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002780:	fa92 f2a2 	rbit	r2, r2
 8002784:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002788:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800278c:	fab2 f282 	clz	r2, r2
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f042 0220 	orr.w	r2, r2, #32
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f002 021f 	and.w	r2, r2, #31
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f202 	lsl.w	r2, r1, r2
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 811f 	beq.w	80029e8 <HAL_RCC_OscConfig+0x334>
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 8116 	bne.w	80029e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	f000 bfaf 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x12e>
 80027d4:	4b83      	ldr	r3, [pc, #524]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a82      	ldr	r2, [pc, #520]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 80027da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	e036      	b.n	8002850 <HAL_RCC_OscConfig+0x19c>
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x158>
 80027f2:	4b7c      	ldr	r3, [pc, #496]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a7b      	ldr	r2, [pc, #492]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 80027f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b79      	ldr	r3, [pc, #484]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a78      	ldr	r2, [pc, #480]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e021      	b.n	8002850 <HAL_RCC_OscConfig+0x19c>
 800280c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002810:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x184>
 800281e:	4b71      	ldr	r3, [pc, #452]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a70      	ldr	r2, [pc, #448]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b6e      	ldr	r3, [pc, #440]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a6d      	ldr	r2, [pc, #436]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0x19c>
 8002838:	4b6a      	ldr	r3, [pc, #424]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a69      	ldr	r2, [pc, #420]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 800283e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b67      	ldr	r3, [pc, #412]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a66      	ldr	r2, [pc, #408]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 800284a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002850:	4b64      	ldr	r3, [pc, #400]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	f023 020f 	bic.w	r2, r3, #15
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	495f      	ldr	r1, [pc, #380]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002866:	4313      	orrs	r3, r2
 8002868:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d059      	beq.n	800292e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7ff fbd9 	bl	8002030 <HAL_GetTick>
 800287e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	e00a      	b.n	800289a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002884:	f7ff fbd4 	bl	8002030 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	; 0x64
 8002892:	d902      	bls.n	800289a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	f000 bf43 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
 800289a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800289e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80028ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d102      	bne.n	80028cc <HAL_RCC_OscConfig+0x218>
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	e015      	b.n	80028f8 <HAL_RCC_OscConfig+0x244>
 80028cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028d0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80028e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028e4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80028e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80028f4:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028fc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002900:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002904:	fa92 f2a2 	rbit	r2, r2
 8002908:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800290c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002910:	fab2 f282 	clz	r2, r2
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	f042 0220 	orr.w	r2, r2, #32
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	f002 021f 	and.w	r2, r2, #31
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0ab      	beq.n	8002884 <HAL_RCC_OscConfig+0x1d0>
 800292c:	e05d      	b.n	80029ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7ff fb7f 	bl	8002030 <HAL_GetTick>
 8002932:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002938:	f7ff fb7a 	bl	8002030 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	; 0x64
 8002946:	d902      	bls.n	800294e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	f000 bee9 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
 800294e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002952:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002962:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_RCC_OscConfig+0x2cc>
 800297a:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	e015      	b.n	80029ac <HAL_RCC_OscConfig+0x2f8>
 8002980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002984:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002998:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800299c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_RCC_OscConfig+0x330>)
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029b0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80029b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80029b8:	fa92 f2a2 	rbit	r2, r2
 80029bc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80029c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80029c4:	fab2 f282 	clz	r2, r2
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f042 0220 	orr.w	r2, r2, #32
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	f002 021f 	and.w	r2, r2, #31
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f202 	lsl.w	r2, r1, r2
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1ab      	bne.n	8002938 <HAL_RCC_OscConfig+0x284>
 80029e0:	e003      	b.n	80029ea <HAL_RCC_OscConfig+0x336>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 817d 	beq.w	8002cfa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a00:	4ba6      	ldr	r3, [pc, #664]	; (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a0c:	4ba3      	ldr	r3, [pc, #652]	; (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d172      	bne.n	8002afe <HAL_RCC_OscConfig+0x44a>
 8002a18:	4ba0      	ldr	r3, [pc, #640]	; (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d16c      	bne.n	8002afe <HAL_RCC_OscConfig+0x44a>
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002a36:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_RCC_OscConfig+0x3a0>
 8002a4e:	4b93      	ldr	r3, [pc, #588]	; (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	e013      	b.n	8002a7c <HAL_RCC_OscConfig+0x3c8>
 8002a54:	2302      	movs	r3, #2
 8002a56:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a66:	2302      	movs	r3, #2
 8002a68:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002a6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a78:	4b88      	ldr	r3, [pc, #544]	; (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002a82:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a86:	fa92 f2a2 	rbit	r2, r2
 8002a8a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002a8e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002a92:	fab2 f282 	clz	r2, r2
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	f042 0220 	orr.w	r2, r2, #32
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	f002 021f 	and.w	r2, r2, #31
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x410>
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f000 be2e 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b75      	ldr	r3, [pc, #468]	; (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	21f8      	movs	r1, #248	; 0xf8
 8002ada:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ae2:	fa91 f1a1 	rbit	r1, r1
 8002ae6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002aea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002aee:	fab1 f181 	clz	r1, r1
 8002af2:	b2c9      	uxtb	r1, r1
 8002af4:	408b      	lsls	r3, r1
 8002af6:	4969      	ldr	r1, [pc, #420]	; (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afc:	e0fd      	b.n	8002cfa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8088 	beq.w	8002c20 <HAL_RCC_OscConfig+0x56c>
 8002b10:	2301      	movs	r3, #1
 8002b12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002b22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	461a      	mov	r2, r3
 8002b38:	2301      	movs	r3, #1
 8002b3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff fa78 	bl	8002030 <HAL_GetTick>
 8002b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b46:	f7ff fa73 	bl	8002030 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d902      	bls.n	8002b5c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	f000 bde2 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002b6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d102      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4d8>
 8002b86:	4b45      	ldr	r3, [pc, #276]	; (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	e013      	b.n	8002bb4 <HAL_RCC_OscConfig+0x500>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ba4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002bb0:	4b3a      	ldr	r3, [pc, #232]	; (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002bba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002bbe:	fa92 f2a2 	rbit	r2, r2
 8002bc2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002bc6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002bca:	fab2 f282 	clz	r2, r2
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f042 0220 	orr.w	r2, r2, #32
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f002 021f 	and.w	r2, r2, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0af      	beq.n	8002b46 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	21f8      	movs	r1, #248	; 0xf8
 8002bfc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c04:	fa91 f1a1 	rbit	r1, r1
 8002c08:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002c0c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002c10:	fab1 f181 	clz	r1, r1
 8002c14:	b2c9      	uxtb	r1, r1
 8002c16:	408b      	lsls	r3, r1
 8002c18:	4920      	ldr	r1, [pc, #128]	; (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
 8002c1e:	e06c      	b.n	8002cfa <HAL_RCC_OscConfig+0x646>
 8002c20:	2301      	movs	r3, #1
 8002c22:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002c32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	461a      	mov	r2, r3
 8002c48:	2300      	movs	r3, #0
 8002c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7ff f9f0 	bl	8002030 <HAL_GetTick>
 8002c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c56:	f7ff f9eb 	bl	8002030 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d902      	bls.n	8002c6c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	f000 bd5a 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d104      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5ec>
 8002c96:	4b01      	ldr	r3, [pc, #4]	; (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	e015      	b.n	8002cc8 <HAL_RCC_OscConfig+0x614>
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002cb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002cc4:	4bc8      	ldr	r3, [pc, #800]	; (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002cce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002cd2:	fa92 f2a2 	rbit	r2, r2
 8002cd6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002cda:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002cde:	fab2 f282 	clz	r2, r2
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	f042 0220 	orr.w	r2, r2, #32
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f002 021f 	and.w	r2, r2, #31
 8002cee:	2101      	movs	r1, #1
 8002cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ad      	bne.n	8002c56 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8110 	beq.w	8002f30 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d079      	beq.n	8002e14 <HAL_RCC_OscConfig+0x760>
 8002d20:	2301      	movs	r3, #1
 8002d22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4bab      	ldr	r3, [pc, #684]	; (8002fec <HAL_RCC_OscConfig+0x938>)
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	461a      	mov	r2, r3
 8002d46:	2301      	movs	r3, #1
 8002d48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4a:	f7ff f971 	bl	8002030 <HAL_GetTick>
 8002d4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d54:	f7ff f96c 	bl	8002030 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d902      	bls.n	8002d6a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	f000 bcdb 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d84:	2202      	movs	r2, #2
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	fa93 f2a3 	rbit	r2, r3
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002da8:	2202      	movs	r2, #2
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002dc2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc4:	4b88      	ldr	r3, [pc, #544]	; (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dcc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	6019      	str	r1, [r3, #0]
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	fa93 f1a3 	rbit	r1, r3
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002dea:	6019      	str	r1, [r3, #0]
  return result;
 8002dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0a0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x6a0>
 8002e12:	e08d      	b.n	8002f30 <HAL_RCC_OscConfig+0x87c>
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e36:	601a      	str	r2, [r3, #0]
  return result;
 8002e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e40:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b68      	ldr	r3, [pc, #416]	; (8002fec <HAL_RCC_OscConfig+0x938>)
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	461a      	mov	r2, r3
 8002e52:	2300      	movs	r3, #0
 8002e54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e56:	f7ff f8eb 	bl	8002030 <HAL_GetTick>
 8002e5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e60:	f7ff f8e6 	bl	8002030 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d902      	bls.n	8002e76 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	f000 bc55 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e7e:	2202      	movs	r2, #2
 8002e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	fa93 f2a3 	rbit	r2, r3
 8002e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eaa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	fa93 f2a3 	rbit	r2, r3
 8002eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ee0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee2:	4b41      	ldr	r3, [pc, #260]	; (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002eee:	2102      	movs	r1, #2
 8002ef0:	6019      	str	r1, [r3, #0]
 8002ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	fa93 f1a3 	rbit	r1, r3
 8002f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f04:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f08:	6019      	str	r1, [r3, #0]
  return result;
 8002f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d197      	bne.n	8002e60 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 81a1 	beq.w	8003288 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4c:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d116      	bne.n	8002f86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4a22      	ldr	r2, [pc, #136]	; (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f62:	61d3      	str	r3, [r2, #28]
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f7e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <HAL_RCC_OscConfig+0x93c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d11a      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <HAL_RCC_OscConfig+0x93c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_RCC_OscConfig+0x93c>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7ff f847 	bl	8002030 <HAL_GetTick>
 8002fa2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa6:	e009      	b.n	8002fbc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa8:	f7ff f842 	bl	8002030 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b64      	cmp	r3, #100	; 0x64
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e3b1      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_RCC_OscConfig+0x93c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ef      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x940>
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4a02      	ldr	r2, [pc, #8]	; (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6213      	str	r3, [r2, #32]
 8002fe4:	e03c      	b.n	8003060 <HAL_RCC_OscConfig+0x9ac>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	10908120 	.word	0x10908120
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10c      	bne.n	800301e <HAL_RCC_OscConfig+0x96a>
 8003004:	4bc1      	ldr	r3, [pc, #772]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4ac0      	ldr	r2, [pc, #768]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 800300a:	f023 0301 	bic.w	r3, r3, #1
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	4bbe      	ldr	r3, [pc, #760]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4abd      	ldr	r2, [pc, #756]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 8003016:	f023 0304 	bic.w	r3, r3, #4
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	e020      	b.n	8003060 <HAL_RCC_OscConfig+0x9ac>
 800301e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b05      	cmp	r3, #5
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x994>
 800302e:	4bb7      	ldr	r3, [pc, #732]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4ab6      	ldr	r2, [pc, #728]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6213      	str	r3, [r2, #32]
 800303a:	4bb4      	ldr	r3, [pc, #720]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4ab3      	ldr	r2, [pc, #716]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6213      	str	r3, [r2, #32]
 8003046:	e00b      	b.n	8003060 <HAL_RCC_OscConfig+0x9ac>
 8003048:	4bb0      	ldr	r3, [pc, #704]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4aaf      	ldr	r2, [pc, #700]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	6213      	str	r3, [r2, #32]
 8003054:	4bad      	ldr	r3, [pc, #692]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4aac      	ldr	r2, [pc, #688]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 800305a:	f023 0304 	bic.w	r3, r3, #4
 800305e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003064:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8081 	beq.w	8003174 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003072:	f7fe ffdd 	bl	8002030 <HAL_GetTick>
 8003076:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fe ffd8 	bl	8002030 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	; 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e345      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
 8003094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003098:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800309c:	2202      	movs	r2, #2
 800309e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	fa93 f2a3 	rbit	r2, r3
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030c0:	2202      	movs	r2, #2
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	fa93 f2a3 	rbit	r2, r3
 80030d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80030da:	601a      	str	r2, [r3, #0]
  return result;
 80030dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80030e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d102      	bne.n	8003100 <HAL_RCC_OscConfig+0xa4c>
 80030fa:	4b84      	ldr	r3, [pc, #528]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	e013      	b.n	8003128 <HAL_RCC_OscConfig+0xa74>
 8003100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003104:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003108:	2202      	movs	r2, #2
 800310a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003110:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	fa93 f2a3 	rbit	r2, r3
 800311a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	4b79      	ldr	r3, [pc, #484]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800312c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003130:	2102      	movs	r1, #2
 8003132:	6011      	str	r1, [r2, #0]
 8003134:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003138:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	fa92 f1a2 	rbit	r1, r2
 8003142:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003146:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800314a:	6011      	str	r1, [r2, #0]
  return result;
 800314c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003150:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	fab2 f282 	clz	r2, r2
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	f002 021f 	and.w	r2, r2, #31
 8003166:	2101      	movs	r1, #1
 8003168:	fa01 f202 	lsl.w	r2, r1, r2
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d084      	beq.n	800307c <HAL_RCC_OscConfig+0x9c8>
 8003172:	e07f      	b.n	8003274 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003174:	f7fe ff5c 	bl	8002030 <HAL_GetTick>
 8003178:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317c:	e00b      	b.n	8003196 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe ff57 	bl	8002030 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e2c4      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800319e:	2202      	movs	r2, #2
 80031a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f2a3 	rbit	r2, r3
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80031c2:	2202      	movs	r2, #2
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fa93 f2a3 	rbit	r2, r3
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80031dc:	601a      	str	r2, [r3, #0]
  return result;
 80031de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80031e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f043 0302 	orr.w	r3, r3, #2
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d102      	bne.n	8003202 <HAL_RCC_OscConfig+0xb4e>
 80031fc:	4b43      	ldr	r3, [pc, #268]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	e013      	b.n	800322a <HAL_RCC_OscConfig+0xb76>
 8003202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003206:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800320a:	2202      	movs	r2, #2
 800320c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003212:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fa93 f2a3 	rbit	r2, r3
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	4b39      	ldr	r3, [pc, #228]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800322e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003232:	2102      	movs	r1, #2
 8003234:	6011      	str	r1, [r2, #0]
 8003236:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800323a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	fa92 f1a2 	rbit	r1, r2
 8003244:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003248:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800324c:	6011      	str	r1, [r2, #0]
  return result;
 800324e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003252:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	fab2 f282 	clz	r2, r2
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	f002 021f 	and.w	r2, r2, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f202 	lsl.w	r2, r1, r2
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d184      	bne.n	800317e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003274:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003278:	2b01      	cmp	r3, #1
 800327a:	d105      	bne.n	8003288 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327c:	4b23      	ldr	r3, [pc, #140]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	4a22      	ldr	r2, [pc, #136]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 8003282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003286:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 8242 	beq.w	800371e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800329a:	4b1c      	ldr	r3, [pc, #112]	; (800330c <HAL_RCC_OscConfig+0xc58>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	f000 8213 	beq.w	80036ce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	f040 8162 	bne.w	800357e <HAL_RCC_OscConfig+0xeca>
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80032c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032cc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	fa93 f2a3 	rbit	r2, r3
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032de:	601a      	str	r2, [r3, #0]
  return result;
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	461a      	mov	r2, r3
 80032fc:	2300      	movs	r3, #0
 80032fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe fe96 	bl	8002030 <HAL_GetTick>
 8003304:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003308:	e00c      	b.n	8003324 <HAL_RCC_OscConfig+0xc70>
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe fe8e 	bl	8002030 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e1fd      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800332c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	fa93 f2a3 	rbit	r2, r3
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003348:	601a      	str	r2, [r3, #0]
  return result;
 800334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003352:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d102      	bne.n	800336e <HAL_RCC_OscConfig+0xcba>
 8003368:	4bb0      	ldr	r3, [pc, #704]	; (800362c <HAL_RCC_OscConfig+0xf78>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	e027      	b.n	80033be <HAL_RCC_OscConfig+0xd0a>
 800336e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003372:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003376:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003380:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	fa93 f2a3 	rbit	r2, r3
 800338a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003398:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800339c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	fa93 f2a3 	rbit	r2, r3
 80033b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	4b9c      	ldr	r3, [pc, #624]	; (800362c <HAL_RCC_OscConfig+0xf78>)
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033c2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80033c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033ca:	6011      	str	r1, [r2, #0]
 80033cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033d0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	fa92 f1a2 	rbit	r1, r2
 80033da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80033e2:	6011      	str	r1, [r2, #0]
  return result;
 80033e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033e8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	fab2 f282 	clz	r2, r2
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	f042 0220 	orr.w	r2, r2, #32
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f002 021f 	and.w	r2, r2, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f202 	lsl.w	r2, r1, r2
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d182      	bne.n	8003310 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800340a:	4b88      	ldr	r3, [pc, #544]	; (800362c <HAL_RCC_OscConfig+0xf78>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800341e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	430b      	orrs	r3, r1
 800342c:	497f      	ldr	r1, [pc, #508]	; (800362c <HAL_RCC_OscConfig+0xf78>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
 8003432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003436:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800343a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800343e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	fa93 f2a3 	rbit	r2, r3
 800344e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003452:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003456:	601a      	str	r2, [r3, #0]
  return result;
 8003458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003460:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800346c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	461a      	mov	r2, r3
 8003474:	2301      	movs	r3, #1
 8003476:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fe fdda 	bl	8002030 <HAL_GetTick>
 800347c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003480:	e009      	b.n	8003496 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003482:	f7fe fdd5 	bl	8002030 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e144      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
 8003496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800349e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	fa93 f2a3 	rbit	r2, r3
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80034ba:	601a      	str	r2, [r3, #0]
  return result;
 80034bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80034c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <HAL_RCC_OscConfig+0xe2c>
 80034da:	4b54      	ldr	r3, [pc, #336]	; (800362c <HAL_RCC_OscConfig+0xf78>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	e027      	b.n	8003530 <HAL_RCC_OscConfig+0xe7c>
 80034e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80034e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	fa93 f2a3 	rbit	r2, r3
 80034fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003500:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800350e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003518:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003526:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	4b3f      	ldr	r3, [pc, #252]	; (800362c <HAL_RCC_OscConfig+0xf78>)
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003534:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003538:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800353c:	6011      	str	r1, [r2, #0]
 800353e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003542:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	fa92 f1a2 	rbit	r1, r2
 800354c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003550:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003554:	6011      	str	r1, [r2, #0]
  return result;
 8003556:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800355a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	fab2 f282 	clz	r2, r2
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	f042 0220 	orr.w	r2, r2, #32
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	f002 021f 	and.w	r2, r2, #31
 8003570:	2101      	movs	r1, #1
 8003572:	fa01 f202 	lsl.w	r2, r1, r2
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d082      	beq.n	8003482 <HAL_RCC_OscConfig+0xdce>
 800357c:	e0cf      	b.n	800371e <HAL_RCC_OscConfig+0x106a>
 800357e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003582:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003586:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800358a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	fa93 f2a3 	rbit	r2, r3
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80035a2:	601a      	str	r2, [r3, #0]
  return result;
 80035a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80035ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	461a      	mov	r2, r3
 80035c0:	2300      	movs	r3, #0
 80035c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fe fd34 	bl	8002030 <HAL_GetTick>
 80035c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035cc:	e009      	b.n	80035e2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ce:	f7fe fd2f 	bl	8002030 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e09e      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
 80035e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80035ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	fa93 f2a3 	rbit	r2, r3
 80035fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003602:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003606:	601a      	str	r2, [r3, #0]
  return result;
 8003608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003610:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d104      	bne.n	8003630 <HAL_RCC_OscConfig+0xf7c>
 8003626:	4b01      	ldr	r3, [pc, #4]	; (800362c <HAL_RCC_OscConfig+0xf78>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	e029      	b.n	8003680 <HAL_RCC_OscConfig+0xfcc>
 800362c:	40021000 	.word	0x40021000
 8003630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003634:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003642:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	fa93 f2a3 	rbit	r2, r3
 800364c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003650:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800365e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003668:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	fa93 f2a3 	rbit	r2, r3
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	4b2b      	ldr	r3, [pc, #172]	; (800372c <HAL_RCC_OscConfig+0x1078>)
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003684:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003688:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800368c:	6011      	str	r1, [r2, #0]
 800368e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003692:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	fa92 f1a2 	rbit	r1, r2
 800369c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036a0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80036a4:	6011      	str	r1, [r2, #0]
  return result;
 80036a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036aa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	fab2 f282 	clz	r2, r2
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	f042 0220 	orr.w	r2, r2, #32
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	f002 021f 	and.w	r2, r2, #31
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f202 	lsl.w	r2, r1, r2
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d180      	bne.n	80035ce <HAL_RCC_OscConfig+0xf1a>
 80036cc:	e027      	b.n	800371e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e01e      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036e2:	4b12      	ldr	r3, [pc, #72]	; (800372c <HAL_RCC_OscConfig+0x1078>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d10b      	bne.n	800371a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003702:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003706:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800370a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003716:	429a      	cmp	r2, r3
 8003718:	d001      	beq.n	800371e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000

08003730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b09e      	sub	sp, #120	; 0x78
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e162      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003748:	4b90      	ldr	r3, [pc, #576]	; (800398c <HAL_RCC_ClockConfig+0x25c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d910      	bls.n	8003778 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b8d      	ldr	r3, [pc, #564]	; (800398c <HAL_RCC_ClockConfig+0x25c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 0207 	bic.w	r2, r3, #7
 800375e:	498b      	ldr	r1, [pc, #556]	; (800398c <HAL_RCC_ClockConfig+0x25c>)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b89      	ldr	r3, [pc, #548]	; (800398c <HAL_RCC_ClockConfig+0x25c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e14a      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003784:	4b82      	ldr	r3, [pc, #520]	; (8003990 <HAL_RCC_ClockConfig+0x260>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	497f      	ldr	r1, [pc, #508]	; (8003990 <HAL_RCC_ClockConfig+0x260>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80dc 	beq.w	800395c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d13c      	bne.n	8003826 <HAL_RCC_ClockConfig+0xf6>
 80037ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b4:	fa93 f3a3 	rbit	r3, r3
 80037b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d102      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xa6>
 80037d0:	4b6f      	ldr	r3, [pc, #444]	; (8003990 <HAL_RCC_ClockConfig+0x260>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	e00f      	b.n	80037f6 <HAL_RCC_ClockConfig+0xc6>
 80037d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	667b      	str	r3, [r7, #100]	; 0x64
 80037e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e8:	663b      	str	r3, [r7, #96]	; 0x60
 80037ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037f2:	4b67      	ldr	r3, [pc, #412]	; (8003990 <HAL_RCC_ClockConfig+0x260>)
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80037fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037fe:	fa92 f2a2 	rbit	r2, r2
 8003802:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003806:	fab2 f282 	clz	r2, r2
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	f042 0220 	orr.w	r2, r2, #32
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	f002 021f 	and.w	r2, r2, #31
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f202 	lsl.w	r2, r1, r2
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d17b      	bne.n	800391a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0f3      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d13c      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x178>
 800382e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003832:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800383c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d102      	bne.n	8003858 <HAL_RCC_ClockConfig+0x128>
 8003852:	4b4f      	ldr	r3, [pc, #316]	; (8003990 <HAL_RCC_ClockConfig+0x260>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	e00f      	b.n	8003878 <HAL_RCC_ClockConfig+0x148>
 8003858:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800385c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003860:	fa93 f3a3 	rbit	r3, r3
 8003864:	647b      	str	r3, [r7, #68]	; 0x44
 8003866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800386a:	643b      	str	r3, [r7, #64]	; 0x40
 800386c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003874:	4b46      	ldr	r3, [pc, #280]	; (8003990 <HAL_RCC_ClockConfig+0x260>)
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800387c:	63ba      	str	r2, [r7, #56]	; 0x38
 800387e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003880:	fa92 f2a2 	rbit	r2, r2
 8003884:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003888:	fab2 f282 	clz	r2, r2
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	f042 0220 	orr.w	r2, r2, #32
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	f002 021f 	and.w	r2, r2, #31
 8003898:	2101      	movs	r1, #1
 800389a:	fa01 f202 	lsl.w	r2, r1, r2
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d13a      	bne.n	800391a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0b2      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
 80038a8:	2302      	movs	r3, #2
 80038aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d102      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x1a0>
 80038ca:	4b31      	ldr	r3, [pc, #196]	; (8003990 <HAL_RCC_ClockConfig+0x260>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	e00d      	b.n	80038ec <HAL_RCC_ClockConfig+0x1bc>
 80038d0:	2302      	movs	r3, #2
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	2302      	movs	r3, #2
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	4b29      	ldr	r3, [pc, #164]	; (8003990 <HAL_RCC_ClockConfig+0x260>)
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	2202      	movs	r2, #2
 80038ee:	61ba      	str	r2, [r7, #24]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	fa92 f2a2 	rbit	r2, r2
 80038f6:	617a      	str	r2, [r7, #20]
  return result;
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	fab2 f282 	clz	r2, r2
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	f042 0220 	orr.w	r2, r2, #32
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	f002 021f 	and.w	r2, r2, #31
 800390a:	2101      	movs	r1, #1
 800390c:	fa01 f202 	lsl.w	r2, r1, r2
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e079      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800391a:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <HAL_RCC_ClockConfig+0x260>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f023 0203 	bic.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	491a      	ldr	r1, [pc, #104]	; (8003990 <HAL_RCC_ClockConfig+0x260>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800392c:	f7fe fb80 	bl	8002030 <HAL_GetTick>
 8003930:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	e00a      	b.n	800394a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003934:	f7fe fb7c 	bl	8002030 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e061      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	4b11      	ldr	r3, [pc, #68]	; (8003990 <HAL_RCC_ClockConfig+0x260>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 020c 	and.w	r2, r3, #12
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	429a      	cmp	r2, r3
 800395a:	d1eb      	bne.n	8003934 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_ClockConfig+0x25c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d214      	bcs.n	8003994 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_RCC_ClockConfig+0x25c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 0207 	bic.w	r2, r3, #7
 8003972:	4906      	ldr	r1, [pc, #24]	; (800398c <HAL_RCC_ClockConfig+0x25c>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b04      	ldr	r3, [pc, #16]	; (800398c <HAL_RCC_ClockConfig+0x25c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e040      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
 800398c:	40022000 	.word	0x40022000
 8003990:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a0:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <HAL_RCC_ClockConfig+0x2e8>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	491a      	ldr	r1, [pc, #104]	; (8003a18 <HAL_RCC_ClockConfig+0x2e8>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039be:	4b16      	ldr	r3, [pc, #88]	; (8003a18 <HAL_RCC_ClockConfig+0x2e8>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4912      	ldr	r1, [pc, #72]	; (8003a18 <HAL_RCC_ClockConfig+0x2e8>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039d2:	f000 f829 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039d6:	4601      	mov	r1, r0
 80039d8:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <HAL_RCC_ClockConfig+0x2e8>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e0:	22f0      	movs	r2, #240	; 0xf0
 80039e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	fa92 f2a2 	rbit	r2, r2
 80039ea:	60fa      	str	r2, [r7, #12]
  return result;
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	fab2 f282 	clz	r2, r2
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	40d3      	lsrs	r3, r2
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x2ec>)
 80039f8:	5cd3      	ldrb	r3, [r2, r3]
 80039fa:	fa21 f303 	lsr.w	r3, r1, r3
 80039fe:	4a08      	ldr	r2, [pc, #32]	; (8003a20 <HAL_RCC_ClockConfig+0x2f0>)
 8003a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <HAL_RCC_ClockConfig+0x2f4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe face 	bl	8001fa8 <HAL_InitTick>
  
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3778      	adds	r7, #120	; 0x78
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	080093f4 	.word	0x080093f4
 8003a20:	20000000 	.word	0x20000000
 8003a24:	20000004 	.word	0x20000004

08003a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b08b      	sub	sp, #44	; 0x2c
 8003a2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a42:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x30>
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x36>
 8003a56:	e03c      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a58:	4b24      	ldr	r3, [pc, #144]	; (8003aec <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a5a:	623b      	str	r3, [r7, #32]
      break;
 8003a5c:	e03c      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	fa92 f2a2 	rbit	r2, r2
 8003a70:	607a      	str	r2, [r7, #4]
  return result;
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	fab2 f282 	clz	r2, r2
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	40d3      	lsrs	r3, r2
 8003a7c:	4a1c      	ldr	r2, [pc, #112]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a7e:	5cd3      	ldrb	r3, [r2, r3]
 8003a80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	220f      	movs	r2, #15
 8003a8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	fa92 f2a2 	rbit	r2, r2
 8003a94:	60fa      	str	r2, [r7, #12]
  return result;
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	fab2 f282 	clz	r2, r2
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	40d3      	lsrs	r3, r2
 8003aa0:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003aa2:	5cd3      	ldrb	r3, [r2, r3]
 8003aa4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ab0:	4a0e      	ldr	r2, [pc, #56]	; (8003aec <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac0:	e004      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	4a0c      	ldr	r2, [pc, #48]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	623b      	str	r3, [r7, #32]
      break;
 8003ad0:	e002      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ad4:	623b      	str	r3, [r7, #32]
      break;
 8003ad6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	372c      	adds	r7, #44	; 0x2c
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	007a1200 	.word	0x007a1200
 8003af0:	0800940c 	.word	0x0800940c
 8003af4:	0800941c 	.word	0x0800941c
 8003af8:	003d0900 	.word	0x003d0900

08003afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000000 	.word	0x20000000

08003b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b1a:	f7ff ffef 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b1e:	4601      	mov	r1, r0
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	fa92 f2a2 	rbit	r2, r2
 8003b34:	603a      	str	r2, [r7, #0]
  return result;
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	fab2 f282 	clz	r2, r2
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	40d3      	lsrs	r3, r2
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b42:	5cd3      	ldrb	r3, [r2, r3]
 8003b44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40021000 	.word	0x40021000
 8003b54:	08009404 	.word	0x08009404

08003b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b5e:	f7ff ffcd 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b62:	4601      	mov	r1, r0
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	fa92 f2a2 	rbit	r2, r2
 8003b78:	603a      	str	r2, [r7, #0]
  return result;
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	fab2 f282 	clz	r2, r2
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	40d3      	lsrs	r3, r2
 8003b84:	4a04      	ldr	r2, [pc, #16]	; (8003b98 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b86:	5cd3      	ldrb	r3, [r2, r3]
 8003b88:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000
 8003b98:	08009404 	.word	0x08009404

08003b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b092      	sub	sp, #72	; 0x48
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 80cd 	beq.w	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc0:	4b8e      	ldr	r3, [pc, #568]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10e      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bcc:	4b8b      	ldr	r3, [pc, #556]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	4a8a      	ldr	r2, [pc, #552]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	61d3      	str	r3, [r2, #28]
 8003bd8:	4b88      	ldr	r3, [pc, #544]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be4:	2301      	movs	r3, #1
 8003be6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	4b85      	ldr	r3, [pc, #532]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d118      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf6:	4b82      	ldr	r3, [pc, #520]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a81      	ldr	r2, [pc, #516]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c02:	f7fe fa15 	bl	8002030 <HAL_GetTick>
 8003c06:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	e008      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0a:	f7fe fa11 	bl	8002030 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b64      	cmp	r3, #100	; 0x64
 8003c16:	d901      	bls.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e0ea      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	4b78      	ldr	r3, [pc, #480]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c28:	4b74      	ldr	r3, [pc, #464]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c30:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d07d      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d076      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c46:	4b6d      	ldr	r3, [pc, #436]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c54:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	fa93 f3a3 	rbit	r3, r3
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c60:	fab3 f383 	clz	r3, r3
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	4b66      	ldr	r3, [pc, #408]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	461a      	mov	r2, r3
 8003c70:	2301      	movs	r3, #1
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c84:	fab3 f383 	clz	r3, r3
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4b5d      	ldr	r3, [pc, #372]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	461a      	mov	r2, r3
 8003c94:	2300      	movs	r3, #0
 8003c96:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c98:	4a58      	ldr	r2, [pc, #352]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d045      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fe f9c2 	bl	8002030 <HAL_GetTick>
 8003cac:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f7fe f9be 	bl	8002030 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e095      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	fa93 f3a3 	rbit	r3, r3
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	fa93 f3a3 	rbit	r3, r3
 8003cdc:	61fb      	str	r3, [r7, #28]
  return result;
 8003cde:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	fab3 f383 	clz	r3, r3
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f043 0302 	orr.w	r3, r3, #2
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d102      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003cf4:	4b41      	ldr	r3, [pc, #260]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	e007      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	4b3d      	ldr	r3, [pc, #244]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	613a      	str	r2, [r7, #16]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	fa92 f2a2 	rbit	r2, r2
 8003d14:	60fa      	str	r2, [r7, #12]
  return result;
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	fab2 f282 	clz	r2, r2
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	f002 021f 	and.w	r2, r2, #31
 8003d28:	2101      	movs	r1, #1
 8003d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0bd      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d34:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	492e      	ldr	r1, [pc, #184]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d105      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4e:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	4a2a      	ldr	r2, [pc, #168]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d58:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d66:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	4922      	ldr	r1, [pc, #136]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	f023 0210 	bic.w	r2, r3, #16
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	491a      	ldr	r1, [pc, #104]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003da2:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	4913      	ldr	r1, [pc, #76]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003dc0:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	490b      	ldr	r1, [pc, #44]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	4904      	ldr	r1, [pc, #16]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3748      	adds	r7, #72	; 0x48
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40007000 	.word	0x40007000
 8003e04:	10908100 	.word	0x10908100

08003e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e040      	b.n	8003e9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fd fee0 	bl	8001bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2224      	movs	r2, #36	; 0x24
 8003e34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fb76 	bl	8004538 <UART_SetConfig>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e022      	b.n	8003e9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fca0 	bl	80047a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fd27 	bl	80048e8 <UART_CheckIdleState>
 8003e9a:	4603      	mov	r3, r0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	; 0x28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d132      	bne.n	8003f22 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_UART_Receive_IT+0x24>
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e02b      	b.n	8003f24 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d018      	beq.n	8003f12 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	613b      	str	r3, [r7, #16]
   return(result);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	623b      	str	r3, [r7, #32]
 8003f00:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	69f9      	ldr	r1, [r7, #28]
 8003f04:	6a3a      	ldr	r2, [r7, #32]
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e6      	bne.n	8003ee0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	461a      	mov	r2, r3
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fdf5 	bl	8004b08 <UART_Start_Receive_IT>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	e000      	b.n	8003f24 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
  }
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3728      	adds	r7, #40	; 0x28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b0ba      	sub	sp, #232	; 0xe8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003f56:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003f60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d115      	bne.n	8003f94 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00f      	beq.n	8003f94 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d009      	beq.n	8003f94 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 82ab 	beq.w	80044e0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	4798      	blx	r3
      }
      return;
 8003f92:	e2a5      	b.n	80044e0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8117 	beq.w	80041cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003faa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003fae:	4b85      	ldr	r3, [pc, #532]	; (80041c4 <HAL_UART_IRQHandler+0x298>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 810a 	beq.w	80041cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d011      	beq.n	8003fe8 <HAL_UART_IRQHandler+0xbc>
 8003fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00b      	beq.n	8003fe8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fde:	f043 0201 	orr.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d011      	beq.n	8004018 <HAL_UART_IRQHandler+0xec>
 8003ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00b      	beq.n	8004018 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2202      	movs	r2, #2
 8004006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400e:	f043 0204 	orr.w	r2, r3, #4
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d011      	beq.n	8004048 <HAL_UART_IRQHandler+0x11c>
 8004024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00b      	beq.n	8004048 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2204      	movs	r2, #4
 8004036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800403e:	f043 0202 	orr.w	r2, r3, #2
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d017      	beq.n	8004084 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004064:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00b      	beq.n	8004084 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2208      	movs	r2, #8
 8004072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800407a:	f043 0208 	orr.w	r2, r3, #8
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408c:	2b00      	cmp	r3, #0
 800408e:	d012      	beq.n	80040b6 <HAL_UART_IRQHandler+0x18a>
 8004090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004094:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00c      	beq.n	80040b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ac:	f043 0220 	orr.w	r2, r3, #32
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8211 	beq.w	80044e4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d005      	beq.n	800410e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004106:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800410a:	2b00      	cmp	r3, #0
 800410c:	d04f      	beq.n	80041ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fdc0 	bl	8004c94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	d141      	bne.n	80041a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3308      	adds	r3, #8
 8004128:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004138:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800413c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3308      	adds	r3, #8
 800414a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800414e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004152:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800415a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1d9      	bne.n	8004122 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004172:	2b00      	cmp	r3, #0
 8004174:	d013      	beq.n	800419e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417a:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <HAL_UART_IRQHandler+0x29c>)
 800417c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe f8ce 	bl	8002324 <HAL_DMA_Abort_IT>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d017      	beq.n	80041be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004198:	4610      	mov	r0, r2
 800419a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	e00f      	b.n	80041be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9b4 	bl	800450c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a4:	e00b      	b.n	80041be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f9b0 	bl	800450c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ac:	e007      	b.n	80041be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f9ac 	bl	800450c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80041bc:	e192      	b.n	80044e4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041be:	bf00      	nop
    return;
 80041c0:	e190      	b.n	80044e4 <HAL_UART_IRQHandler+0x5b8>
 80041c2:	bf00      	nop
 80041c4:	04000120 	.word	0x04000120
 80041c8:	08004d5d 	.word	0x08004d5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	f040 814b 	bne.w	800446c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8144 	beq.w	800446c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 813d 	beq.w	800446c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2210      	movs	r2, #16
 80041f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b40      	cmp	r3, #64	; 0x40
 8004206:	f040 80b5 	bne.w	8004374 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004216:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8164 	beq.w	80044e8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004226:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800422a:	429a      	cmp	r2, r3
 800422c:	f080 815c 	bcs.w	80044e8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004236:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b20      	cmp	r3, #32
 8004242:	f000 8086 	beq.w	8004352 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800425a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800425e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004262:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004270:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004274:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800427c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004288:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1da      	bne.n	8004246 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3308      	adds	r3, #8
 80042b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e1      	bne.n	8004290 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3308      	adds	r3, #8
 80042d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3308      	adds	r3, #8
 80042ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e3      	bne.n	80042cc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004322:	f023 0310 	bic.w	r3, r3, #16
 8004326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004334:	65bb      	str	r3, [r7, #88]	; 0x58
 8004336:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800433a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e4      	bne.n	8004312 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434c:	4618      	mov	r0, r3
 800434e:	f7fd ffb0 	bl	80022b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004364:	b29b      	uxth	r3, r3
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	b29b      	uxth	r3, r3
 800436a:	4619      	mov	r1, r3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f8d7 	bl	8004520 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004372:	e0b9      	b.n	80044e8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004380:	b29b      	uxth	r3, r3
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80ab 	beq.w	80044ec <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004396:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80a6 	beq.w	80044ec <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043c2:	647b      	str	r3, [r7, #68]	; 0x44
 80043c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e4      	bne.n	80043a0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3308      	adds	r3, #8
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	623b      	str	r3, [r7, #32]
   return(result);
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3308      	adds	r3, #8
 80043f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043fa:	633a      	str	r2, [r7, #48]	; 0x30
 80043fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e3      	bne.n	80043d6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0310 	bic.w	r3, r3, #16
 8004436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	69b9      	ldr	r1, [r7, #24]
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	617b      	str	r3, [r7, #20]
   return(result);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e4      	bne.n	8004422 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800445e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f85b 	bl	8004520 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800446a:	e03f      	b.n	80044ec <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800446c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00e      	beq.n	8004496 <HAL_UART_IRQHandler+0x56a>
 8004478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800447c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800448c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fe4c 	bl	800512c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004494:	e02d      	b.n	80044f2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00e      	beq.n	80044c0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80044a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01c      	beq.n	80044f0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	4798      	blx	r3
    }
    return;
 80044be:	e017      	b.n	80044f0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d012      	beq.n	80044f2 <HAL_UART_IRQHandler+0x5c6>
 80044cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00c      	beq.n	80044f2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fc55 	bl	8004d88 <UART_EndTransmit_IT>
    return;
 80044de:	e008      	b.n	80044f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80044e0:	bf00      	nop
 80044e2:	e006      	b.n	80044f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80044e4:	bf00      	nop
 80044e6:	e004      	b.n	80044f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80044e8:	bf00      	nop
 80044ea:	e002      	b.n	80044f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80044f0:	bf00      	nop
  }

}
 80044f2:	37e8      	adds	r7, #232	; 0xe8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b8a      	ldr	r3, [pc, #552]	; (800478c <UART_SetConfig+0x254>)
 8004564:	4013      	ands	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	6979      	ldr	r1, [r7, #20]
 800456c:	430b      	orrs	r3, r1
 800456e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a78      	ldr	r2, [pc, #480]	; (8004790 <UART_SetConfig+0x258>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d120      	bne.n	80045f6 <UART_SetConfig+0xbe>
 80045b4:	4b77      	ldr	r3, [pc, #476]	; (8004794 <UART_SetConfig+0x25c>)
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d817      	bhi.n	80045f0 <UART_SetConfig+0xb8>
 80045c0:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <UART_SetConfig+0x90>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045e5 	.word	0x080045e5
 80045d0:	080045eb 	.word	0x080045eb
 80045d4:	080045df 	.word	0x080045df
 80045d8:	2300      	movs	r3, #0
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e01d      	b.n	800461a <UART_SetConfig+0xe2>
 80045de:	2302      	movs	r3, #2
 80045e0:	77fb      	strb	r3, [r7, #31]
 80045e2:	e01a      	b.n	800461a <UART_SetConfig+0xe2>
 80045e4:	2304      	movs	r3, #4
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e017      	b.n	800461a <UART_SetConfig+0xe2>
 80045ea:	2308      	movs	r3, #8
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e014      	b.n	800461a <UART_SetConfig+0xe2>
 80045f0:	2310      	movs	r3, #16
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e011      	b.n	800461a <UART_SetConfig+0xe2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a67      	ldr	r2, [pc, #412]	; (8004798 <UART_SetConfig+0x260>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d102      	bne.n	8004606 <UART_SetConfig+0xce>
 8004600:	2300      	movs	r3, #0
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e009      	b.n	800461a <UART_SetConfig+0xe2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a64      	ldr	r2, [pc, #400]	; (800479c <UART_SetConfig+0x264>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d102      	bne.n	8004616 <UART_SetConfig+0xde>
 8004610:	2300      	movs	r3, #0
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e001      	b.n	800461a <UART_SetConfig+0xe2>
 8004616:	2310      	movs	r3, #16
 8004618:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004622:	d15a      	bne.n	80046da <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004624:	7ffb      	ldrb	r3, [r7, #31]
 8004626:	2b08      	cmp	r3, #8
 8004628:	d827      	bhi.n	800467a <UART_SetConfig+0x142>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <UART_SetConfig+0xf8>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	08004655 	.word	0x08004655
 8004634:	0800465d 	.word	0x0800465d
 8004638:	08004665 	.word	0x08004665
 800463c:	0800467b 	.word	0x0800467b
 8004640:	0800466b 	.word	0x0800466b
 8004644:	0800467b 	.word	0x0800467b
 8004648:	0800467b 	.word	0x0800467b
 800464c:	0800467b 	.word	0x0800467b
 8004650:	08004673 	.word	0x08004673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004654:	f7ff fa5e 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8004658:	61b8      	str	r0, [r7, #24]
        break;
 800465a:	e013      	b.n	8004684 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800465c:	f7ff fa7c 	bl	8003b58 <HAL_RCC_GetPCLK2Freq>
 8004660:	61b8      	str	r0, [r7, #24]
        break;
 8004662:	e00f      	b.n	8004684 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004664:	4b4e      	ldr	r3, [pc, #312]	; (80047a0 <UART_SetConfig+0x268>)
 8004666:	61bb      	str	r3, [r7, #24]
        break;
 8004668:	e00c      	b.n	8004684 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800466a:	f7ff f9dd 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 800466e:	61b8      	str	r0, [r7, #24]
        break;
 8004670:	e008      	b.n	8004684 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004676:	61bb      	str	r3, [r7, #24]
        break;
 8004678:	e004      	b.n	8004684 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	77bb      	strb	r3, [r7, #30]
        break;
 8004682:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d074      	beq.n	8004774 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	005a      	lsls	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	441a      	add	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	fbb2 f3f3 	udiv	r3, r2, r3
 800469e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b0f      	cmp	r3, #15
 80046a4:	d916      	bls.n	80046d4 <UART_SetConfig+0x19c>
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ac:	d212      	bcs.n	80046d4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	f023 030f 	bic.w	r3, r3, #15
 80046b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	085b      	lsrs	r3, r3, #1
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	89fb      	ldrh	r3, [r7, #14]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	89fa      	ldrh	r2, [r7, #14]
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	e04f      	b.n	8004774 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	77bb      	strb	r3, [r7, #30]
 80046d8:	e04c      	b.n	8004774 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046da:	7ffb      	ldrb	r3, [r7, #31]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d828      	bhi.n	8004732 <UART_SetConfig+0x1fa>
 80046e0:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <UART_SetConfig+0x1b0>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	0800470d 	.word	0x0800470d
 80046ec:	08004715 	.word	0x08004715
 80046f0:	0800471d 	.word	0x0800471d
 80046f4:	08004733 	.word	0x08004733
 80046f8:	08004723 	.word	0x08004723
 80046fc:	08004733 	.word	0x08004733
 8004700:	08004733 	.word	0x08004733
 8004704:	08004733 	.word	0x08004733
 8004708:	0800472b 	.word	0x0800472b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800470c:	f7ff fa02 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8004710:	61b8      	str	r0, [r7, #24]
        break;
 8004712:	e013      	b.n	800473c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004714:	f7ff fa20 	bl	8003b58 <HAL_RCC_GetPCLK2Freq>
 8004718:	61b8      	str	r0, [r7, #24]
        break;
 800471a:	e00f      	b.n	800473c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800471c:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <UART_SetConfig+0x268>)
 800471e:	61bb      	str	r3, [r7, #24]
        break;
 8004720:	e00c      	b.n	800473c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004722:	f7ff f981 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 8004726:	61b8      	str	r0, [r7, #24]
        break;
 8004728:	e008      	b.n	800473c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472e:	61bb      	str	r3, [r7, #24]
        break;
 8004730:	e004      	b.n	800473c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	77bb      	strb	r3, [r7, #30]
        break;
 800473a:	bf00      	nop
    }

    if (pclk != 0U)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d018      	beq.n	8004774 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	085a      	lsrs	r2, r3, #1
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	441a      	add	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b0f      	cmp	r3, #15
 800475a:	d909      	bls.n	8004770 <UART_SetConfig+0x238>
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004762:	d205      	bcs.n	8004770 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	e001      	b.n	8004774 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004780:	7fbb      	ldrb	r3, [r7, #30]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	efff69f3 	.word	0xefff69f3
 8004790:	40013800 	.word	0x40013800
 8004794:	40021000 	.word	0x40021000
 8004798:	40004400 	.word	0x40004400
 800479c:	40004800 	.word	0x40004800
 80047a0:	007a1200 	.word	0x007a1200

080047a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01a      	beq.n	80048ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a2:	d10a      	bne.n	80048ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	605a      	str	r2, [r3, #4]
  }
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b098      	sub	sp, #96	; 0x60
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048f8:	f7fd fb9a 	bl	8002030 <HAL_GetTick>
 80048fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b08      	cmp	r3, #8
 800490a:	d12e      	bne.n	800496a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800490c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004914:	2200      	movs	r2, #0
 8004916:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f88c 	bl	8004a38 <UART_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d021      	beq.n	800496a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800493a:	653b      	str	r3, [r7, #80]	; 0x50
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004944:	647b      	str	r3, [r7, #68]	; 0x44
 8004946:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800494a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e6      	bne.n	8004926 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e062      	b.n	8004a30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b04      	cmp	r3, #4
 8004976:	d149      	bne.n	8004a0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004980:	2200      	movs	r2, #0
 8004982:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f856 	bl	8004a38 <UART_WaitOnFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d03c      	beq.n	8004a0c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	623b      	str	r3, [r7, #32]
   return(result);
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b0:	633b      	str	r3, [r7, #48]	; 0x30
 80049b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e6      	bne.n	8004992 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3308      	adds	r3, #8
 80049ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	64bb      	str	r3, [r7, #72]	; 0x48
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3308      	adds	r3, #8
 80049e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049e4:	61fa      	str	r2, [r7, #28]
 80049e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	69b9      	ldr	r1, [r7, #24]
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	617b      	str	r3, [r7, #20]
   return(result);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e5      	bne.n	80049c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e011      	b.n	8004a30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3758      	adds	r7, #88	; 0x58
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a48:	e049      	b.n	8004ade <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d045      	beq.n	8004ade <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a52:	f7fd faed 	bl	8002030 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d302      	bcc.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e048      	b.n	8004afe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d031      	beq.n	8004ade <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d110      	bne.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2208      	movs	r2, #8
 8004a8e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f8ff 	bl	8004c94 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2208      	movs	r2, #8
 8004a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e029      	b.n	8004afe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab8:	d111      	bne.n	8004ade <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f8e5 	bl	8004c94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e00f      	b.n	8004afe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d0a6      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b097      	sub	sp, #92	; 0x5c
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	4613      	mov	r3, r2
 8004b14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3a:	d10e      	bne.n	8004b5a <UART_Start_Receive_IT+0x52>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <UART_Start_Receive_IT+0x48>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b4e:	e02d      	b.n	8004bac <UART_Start_Receive_IT+0xa4>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	22ff      	movs	r2, #255	; 0xff
 8004b54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b58:	e028      	b.n	8004bac <UART_Start_Receive_IT+0xa4>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10d      	bne.n	8004b7e <UART_Start_Receive_IT+0x76>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d104      	bne.n	8004b74 <UART_Start_Receive_IT+0x6c>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	22ff      	movs	r2, #255	; 0xff
 8004b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b72:	e01b      	b.n	8004bac <UART_Start_Receive_IT+0xa4>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	227f      	movs	r2, #127	; 0x7f
 8004b78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b7c:	e016      	b.n	8004bac <UART_Start_Receive_IT+0xa4>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b86:	d10d      	bne.n	8004ba4 <UART_Start_Receive_IT+0x9c>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d104      	bne.n	8004b9a <UART_Start_Receive_IT+0x92>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	227f      	movs	r2, #127	; 0x7f
 8004b94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b98:	e008      	b.n	8004bac <UART_Start_Receive_IT+0xa4>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	223f      	movs	r2, #63	; 0x3f
 8004b9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ba2:	e003      	b.n	8004bac <UART_Start_Receive_IT+0xa4>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2222      	movs	r2, #34	; 0x22
 8004bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3308      	adds	r3, #8
 8004bda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bdc:	64ba      	str	r2, [r7, #72]	; 0x48
 8004bde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e5      	bne.n	8004bbc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf8:	d107      	bne.n	8004c0a <UART_Start_Receive_IT+0x102>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4a21      	ldr	r2, [pc, #132]	; (8004c8c <UART_Start_Receive_IT+0x184>)
 8004c06:	669a      	str	r2, [r3, #104]	; 0x68
 8004c08:	e002      	b.n	8004c10 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4a20      	ldr	r2, [pc, #128]	; (8004c90 <UART_Start_Receive_IT+0x188>)
 8004c0e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d019      	beq.n	8004c4c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
 8004c38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e6      	bne.n	8004c18 <UART_Start_Receive_IT+0x110>
 8004c4a:	e018      	b.n	8004c7e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f043 0320 	orr.w	r3, r3, #32
 8004c60:	653b      	str	r3, [r7, #80]	; 0x50
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6a:	623b      	str	r3, [r7, #32]
 8004c6c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	69f9      	ldr	r1, [r7, #28]
 8004c70:	6a3a      	ldr	r2, [r7, #32]
 8004c72:	e841 2300 	strex	r3, r2, [r1]
 8004c76:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1e6      	bne.n	8004c4c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	375c      	adds	r7, #92	; 0x5c
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	08004f85 	.word	0x08004f85
 8004c90:	08004ddd 	.word	0x08004ddd

08004c94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b095      	sub	sp, #84	; 0x54
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cba:	643b      	str	r3, [r7, #64]	; 0x40
 8004cbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e6      	bne.n	8004c9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3308      	adds	r3, #8
 8004cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e5      	bne.n	8004cce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d118      	bne.n	8004d3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f023 0310 	bic.w	r3, r3, #16
 8004d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	6979      	ldr	r1, [r7, #20]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	613b      	str	r3, [r7, #16]
   return(result);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e6      	bne.n	8004d0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d50:	bf00      	nop
 8004d52:	3754      	adds	r7, #84	; 0x54
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff fbc6 	bl	800450c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d80:	bf00      	nop
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	e853 3f00 	ldrex	r3, [r3]
 8004d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db2:	6979      	ldr	r1, [r7, #20]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	e841 2300 	strex	r3, r2, [r1]
 8004dba:	613b      	str	r3, [r7, #16]
   return(result);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1e6      	bne.n	8004d90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fb92 	bl	80044f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dd4:	bf00      	nop
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b09c      	sub	sp, #112	; 0x70
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df4:	2b22      	cmp	r3, #34	; 0x22
 8004df6:	f040 80b9 	bne.w	8004f6c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e08:	b2d9      	uxtb	r1, r3
 8004e0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	400a      	ands	r2, r1
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f040 809c 	bne.w	8004f7c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e58:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e62:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e6      	bne.n	8004e44 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3308      	adds	r3, #8
 8004e94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e96:	647a      	str	r2, [r7, #68]	; 0x44
 8004e98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e5      	bne.n	8004e76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d018      	beq.n	8004efe <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ee0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eea:	633b      	str	r3, [r7, #48]	; 0x30
 8004eec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e6      	bne.n	8004ecc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d12e      	bne.n	8004f64 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f023 0310 	bic.w	r3, r3, #16
 8004f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	69b9      	ldr	r1, [r7, #24]
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	617b      	str	r3, [r7, #20]
   return(result);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e6      	bne.n	8004f0c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d103      	bne.n	8004f54 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2210      	movs	r2, #16
 8004f52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff fadf 	bl	8004520 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f62:	e00b      	b.n	8004f7c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fc fc25 	bl	80017b4 <HAL_UART_RxCpltCallback>
}
 8004f6a:	e007      	b.n	8004f7c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0208 	orr.w	r2, r2, #8
 8004f7a:	619a      	str	r2, [r3, #24]
}
 8004f7c:	bf00      	nop
 8004f7e:	3770      	adds	r7, #112	; 0x70
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b09c      	sub	sp, #112	; 0x70
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f92:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9c:	2b22      	cmp	r3, #34	; 0x22
 8004f9e:	f040 80b9 	bne.w	8005114 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004fa8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004fb2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004fb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004fba:	4013      	ands	r3, r2
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc6:	1c9a      	adds	r2, r3, #2
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f040 809c 	bne.w	8005124 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005000:	667b      	str	r3, [r7, #100]	; 0x64
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800500a:	657b      	str	r3, [r7, #84]	; 0x54
 800500c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e6      	bne.n	8004fec <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3308      	adds	r3, #8
 8005024:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	663b      	str	r3, [r7, #96]	; 0x60
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3308      	adds	r3, #8
 800503c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800503e:	643a      	str	r2, [r7, #64]	; 0x40
 8005040:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e5      	bne.n	800501e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d018      	beq.n	80050a6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	61fb      	str	r3, [r7, #28]
   return(result);
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005094:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e6      	bne.n	8005074 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d12e      	bne.n	800510c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f023 0310 	bic.w	r3, r3, #16
 80050c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050d2:	61bb      	str	r3, [r7, #24]
 80050d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6979      	ldr	r1, [r7, #20]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	613b      	str	r3, [r7, #16]
   return(result);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e6      	bne.n	80050b4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d103      	bne.n	80050fc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2210      	movs	r2, #16
 80050fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff fa0b 	bl	8004520 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800510a:	e00b      	b.n	8005124 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7fc fb51 	bl	80017b4 <HAL_UART_RxCpltCallback>
}
 8005112:	e007      	b.n	8005124 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699a      	ldr	r2, [r3, #24]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0208 	orr.w	r2, r2, #8
 8005122:	619a      	str	r2, [r3, #24]
}
 8005124:	bf00      	nop
 8005126:	3770      	adds	r7, #112	; 0x70
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <sulp>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	4604      	mov	r4, r0
 8005144:	460d      	mov	r5, r1
 8005146:	ec45 4b10 	vmov	d0, r4, r5
 800514a:	4616      	mov	r6, r2
 800514c:	f003 fa80 	bl	8008650 <__ulp>
 8005150:	ec51 0b10 	vmov	r0, r1, d0
 8005154:	b17e      	cbz	r6, 8005176 <sulp+0x36>
 8005156:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800515a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800515e:	2b00      	cmp	r3, #0
 8005160:	dd09      	ble.n	8005176 <sulp+0x36>
 8005162:	051b      	lsls	r3, r3, #20
 8005164:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005168:	2400      	movs	r4, #0
 800516a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800516e:	4622      	mov	r2, r4
 8005170:	462b      	mov	r3, r5
 8005172:	f7fb fa41 	bl	80005f8 <__aeabi_dmul>
 8005176:	bd70      	pop	{r4, r5, r6, pc}

08005178 <_strtod_l>:
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	ed2d 8b02 	vpush	{d8}
 8005180:	b09b      	sub	sp, #108	; 0x6c
 8005182:	4604      	mov	r4, r0
 8005184:	9213      	str	r2, [sp, #76]	; 0x4c
 8005186:	2200      	movs	r2, #0
 8005188:	9216      	str	r2, [sp, #88]	; 0x58
 800518a:	460d      	mov	r5, r1
 800518c:	f04f 0800 	mov.w	r8, #0
 8005190:	f04f 0900 	mov.w	r9, #0
 8005194:	460a      	mov	r2, r1
 8005196:	9215      	str	r2, [sp, #84]	; 0x54
 8005198:	7811      	ldrb	r1, [r2, #0]
 800519a:	292b      	cmp	r1, #43	; 0x2b
 800519c:	d04c      	beq.n	8005238 <_strtod_l+0xc0>
 800519e:	d83a      	bhi.n	8005216 <_strtod_l+0x9e>
 80051a0:	290d      	cmp	r1, #13
 80051a2:	d834      	bhi.n	800520e <_strtod_l+0x96>
 80051a4:	2908      	cmp	r1, #8
 80051a6:	d834      	bhi.n	8005212 <_strtod_l+0x9a>
 80051a8:	2900      	cmp	r1, #0
 80051aa:	d03d      	beq.n	8005228 <_strtod_l+0xb0>
 80051ac:	2200      	movs	r2, #0
 80051ae:	920a      	str	r2, [sp, #40]	; 0x28
 80051b0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80051b2:	7832      	ldrb	r2, [r6, #0]
 80051b4:	2a30      	cmp	r2, #48	; 0x30
 80051b6:	f040 80b4 	bne.w	8005322 <_strtod_l+0x1aa>
 80051ba:	7872      	ldrb	r2, [r6, #1]
 80051bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80051c0:	2a58      	cmp	r2, #88	; 0x58
 80051c2:	d170      	bne.n	80052a6 <_strtod_l+0x12e>
 80051c4:	9302      	str	r3, [sp, #8]
 80051c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	ab16      	add	r3, sp, #88	; 0x58
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	4a8e      	ldr	r2, [pc, #568]	; (8005408 <_strtod_l+0x290>)
 80051d0:	ab17      	add	r3, sp, #92	; 0x5c
 80051d2:	a915      	add	r1, sp, #84	; 0x54
 80051d4:	4620      	mov	r0, r4
 80051d6:	f002 fb19 	bl	800780c <__gethex>
 80051da:	f010 070f 	ands.w	r7, r0, #15
 80051de:	4605      	mov	r5, r0
 80051e0:	d005      	beq.n	80051ee <_strtod_l+0x76>
 80051e2:	2f06      	cmp	r7, #6
 80051e4:	d12a      	bne.n	800523c <_strtod_l+0xc4>
 80051e6:	3601      	adds	r6, #1
 80051e8:	2300      	movs	r3, #0
 80051ea:	9615      	str	r6, [sp, #84]	; 0x54
 80051ec:	930a      	str	r3, [sp, #40]	; 0x28
 80051ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f040 857f 	bne.w	8005cf4 <_strtod_l+0xb7c>
 80051f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051f8:	b1db      	cbz	r3, 8005232 <_strtod_l+0xba>
 80051fa:	4642      	mov	r2, r8
 80051fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005200:	ec43 2b10 	vmov	d0, r2, r3
 8005204:	b01b      	add	sp, #108	; 0x6c
 8005206:	ecbd 8b02 	vpop	{d8}
 800520a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520e:	2920      	cmp	r1, #32
 8005210:	d1cc      	bne.n	80051ac <_strtod_l+0x34>
 8005212:	3201      	adds	r2, #1
 8005214:	e7bf      	b.n	8005196 <_strtod_l+0x1e>
 8005216:	292d      	cmp	r1, #45	; 0x2d
 8005218:	d1c8      	bne.n	80051ac <_strtod_l+0x34>
 800521a:	2101      	movs	r1, #1
 800521c:	910a      	str	r1, [sp, #40]	; 0x28
 800521e:	1c51      	adds	r1, r2, #1
 8005220:	9115      	str	r1, [sp, #84]	; 0x54
 8005222:	7852      	ldrb	r2, [r2, #1]
 8005224:	2a00      	cmp	r2, #0
 8005226:	d1c3      	bne.n	80051b0 <_strtod_l+0x38>
 8005228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800522a:	9515      	str	r5, [sp, #84]	; 0x54
 800522c:	2b00      	cmp	r3, #0
 800522e:	f040 855f 	bne.w	8005cf0 <_strtod_l+0xb78>
 8005232:	4642      	mov	r2, r8
 8005234:	464b      	mov	r3, r9
 8005236:	e7e3      	b.n	8005200 <_strtod_l+0x88>
 8005238:	2100      	movs	r1, #0
 800523a:	e7ef      	b.n	800521c <_strtod_l+0xa4>
 800523c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800523e:	b13a      	cbz	r2, 8005250 <_strtod_l+0xd8>
 8005240:	2135      	movs	r1, #53	; 0x35
 8005242:	a818      	add	r0, sp, #96	; 0x60
 8005244:	f003 fb01 	bl	800884a <__copybits>
 8005248:	9916      	ldr	r1, [sp, #88]	; 0x58
 800524a:	4620      	mov	r0, r4
 800524c:	f002 fed4 	bl	8007ff8 <_Bfree>
 8005250:	3f01      	subs	r7, #1
 8005252:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005254:	2f04      	cmp	r7, #4
 8005256:	d806      	bhi.n	8005266 <_strtod_l+0xee>
 8005258:	e8df f007 	tbb	[pc, r7]
 800525c:	201d0314 	.word	0x201d0314
 8005260:	14          	.byte	0x14
 8005261:	00          	.byte	0x00
 8005262:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8005266:	05e9      	lsls	r1, r5, #23
 8005268:	bf48      	it	mi
 800526a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800526e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005272:	0d1b      	lsrs	r3, r3, #20
 8005274:	051b      	lsls	r3, r3, #20
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1b9      	bne.n	80051ee <_strtod_l+0x76>
 800527a:	f001 fb57 	bl	800692c <__errno>
 800527e:	2322      	movs	r3, #34	; 0x22
 8005280:	6003      	str	r3, [r0, #0]
 8005282:	e7b4      	b.n	80051ee <_strtod_l+0x76>
 8005284:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8005288:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800528c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005290:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005294:	e7e7      	b.n	8005266 <_strtod_l+0xee>
 8005296:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005410 <_strtod_l+0x298>
 800529a:	e7e4      	b.n	8005266 <_strtod_l+0xee>
 800529c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80052a0:	f04f 38ff 	mov.w	r8, #4294967295
 80052a4:	e7df      	b.n	8005266 <_strtod_l+0xee>
 80052a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	9215      	str	r2, [sp, #84]	; 0x54
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	2b30      	cmp	r3, #48	; 0x30
 80052b0:	d0f9      	beq.n	80052a6 <_strtod_l+0x12e>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d09b      	beq.n	80051ee <_strtod_l+0x76>
 80052b6:	2301      	movs	r3, #1
 80052b8:	f04f 0a00 	mov.w	sl, #0
 80052bc:	9304      	str	r3, [sp, #16]
 80052be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80052c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80052c6:	46d3      	mov	fp, sl
 80052c8:	220a      	movs	r2, #10
 80052ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 80052cc:	7806      	ldrb	r6, [r0, #0]
 80052ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80052d2:	b2d9      	uxtb	r1, r3
 80052d4:	2909      	cmp	r1, #9
 80052d6:	d926      	bls.n	8005326 <_strtod_l+0x1ae>
 80052d8:	494c      	ldr	r1, [pc, #304]	; (800540c <_strtod_l+0x294>)
 80052da:	2201      	movs	r2, #1
 80052dc:	f001 fac9 	bl	8006872 <strncmp>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d030      	beq.n	8005346 <_strtod_l+0x1ce>
 80052e4:	2000      	movs	r0, #0
 80052e6:	4632      	mov	r2, r6
 80052e8:	9005      	str	r0, [sp, #20]
 80052ea:	465e      	mov	r6, fp
 80052ec:	4603      	mov	r3, r0
 80052ee:	2a65      	cmp	r2, #101	; 0x65
 80052f0:	d001      	beq.n	80052f6 <_strtod_l+0x17e>
 80052f2:	2a45      	cmp	r2, #69	; 0x45
 80052f4:	d113      	bne.n	800531e <_strtod_l+0x1a6>
 80052f6:	b91e      	cbnz	r6, 8005300 <_strtod_l+0x188>
 80052f8:	9a04      	ldr	r2, [sp, #16]
 80052fa:	4302      	orrs	r2, r0
 80052fc:	d094      	beq.n	8005228 <_strtod_l+0xb0>
 80052fe:	2600      	movs	r6, #0
 8005300:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005302:	1c6a      	adds	r2, r5, #1
 8005304:	9215      	str	r2, [sp, #84]	; 0x54
 8005306:	786a      	ldrb	r2, [r5, #1]
 8005308:	2a2b      	cmp	r2, #43	; 0x2b
 800530a:	d074      	beq.n	80053f6 <_strtod_l+0x27e>
 800530c:	2a2d      	cmp	r2, #45	; 0x2d
 800530e:	d078      	beq.n	8005402 <_strtod_l+0x28a>
 8005310:	f04f 0c00 	mov.w	ip, #0
 8005314:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005318:	2909      	cmp	r1, #9
 800531a:	d97f      	bls.n	800541c <_strtod_l+0x2a4>
 800531c:	9515      	str	r5, [sp, #84]	; 0x54
 800531e:	2700      	movs	r7, #0
 8005320:	e09e      	b.n	8005460 <_strtod_l+0x2e8>
 8005322:	2300      	movs	r3, #0
 8005324:	e7c8      	b.n	80052b8 <_strtod_l+0x140>
 8005326:	f1bb 0f08 	cmp.w	fp, #8
 800532a:	bfd8      	it	le
 800532c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800532e:	f100 0001 	add.w	r0, r0, #1
 8005332:	bfda      	itte	le
 8005334:	fb02 3301 	mlale	r3, r2, r1, r3
 8005338:	9309      	strle	r3, [sp, #36]	; 0x24
 800533a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800533e:	f10b 0b01 	add.w	fp, fp, #1
 8005342:	9015      	str	r0, [sp, #84]	; 0x54
 8005344:	e7c1      	b.n	80052ca <_strtod_l+0x152>
 8005346:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	9215      	str	r2, [sp, #84]	; 0x54
 800534c:	785a      	ldrb	r2, [r3, #1]
 800534e:	f1bb 0f00 	cmp.w	fp, #0
 8005352:	d037      	beq.n	80053c4 <_strtod_l+0x24c>
 8005354:	9005      	str	r0, [sp, #20]
 8005356:	465e      	mov	r6, fp
 8005358:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800535c:	2b09      	cmp	r3, #9
 800535e:	d912      	bls.n	8005386 <_strtod_l+0x20e>
 8005360:	2301      	movs	r3, #1
 8005362:	e7c4      	b.n	80052ee <_strtod_l+0x176>
 8005364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	9215      	str	r2, [sp, #84]	; 0x54
 800536a:	785a      	ldrb	r2, [r3, #1]
 800536c:	3001      	adds	r0, #1
 800536e:	2a30      	cmp	r2, #48	; 0x30
 8005370:	d0f8      	beq.n	8005364 <_strtod_l+0x1ec>
 8005372:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005376:	2b08      	cmp	r3, #8
 8005378:	f200 84c1 	bhi.w	8005cfe <_strtod_l+0xb86>
 800537c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800537e:	9005      	str	r0, [sp, #20]
 8005380:	2000      	movs	r0, #0
 8005382:	930b      	str	r3, [sp, #44]	; 0x2c
 8005384:	4606      	mov	r6, r0
 8005386:	3a30      	subs	r2, #48	; 0x30
 8005388:	f100 0301 	add.w	r3, r0, #1
 800538c:	d014      	beq.n	80053b8 <_strtod_l+0x240>
 800538e:	9905      	ldr	r1, [sp, #20]
 8005390:	4419      	add	r1, r3
 8005392:	9105      	str	r1, [sp, #20]
 8005394:	4633      	mov	r3, r6
 8005396:	eb00 0c06 	add.w	ip, r0, r6
 800539a:	210a      	movs	r1, #10
 800539c:	4563      	cmp	r3, ip
 800539e:	d113      	bne.n	80053c8 <_strtod_l+0x250>
 80053a0:	1833      	adds	r3, r6, r0
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	f106 0601 	add.w	r6, r6, #1
 80053a8:	4406      	add	r6, r0
 80053aa:	dc1a      	bgt.n	80053e2 <_strtod_l+0x26a>
 80053ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053ae:	230a      	movs	r3, #10
 80053b0:	fb03 2301 	mla	r3, r3, r1, r2
 80053b4:	9309      	str	r3, [sp, #36]	; 0x24
 80053b6:	2300      	movs	r3, #0
 80053b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80053ba:	1c51      	adds	r1, r2, #1
 80053bc:	9115      	str	r1, [sp, #84]	; 0x54
 80053be:	7852      	ldrb	r2, [r2, #1]
 80053c0:	4618      	mov	r0, r3
 80053c2:	e7c9      	b.n	8005358 <_strtod_l+0x1e0>
 80053c4:	4658      	mov	r0, fp
 80053c6:	e7d2      	b.n	800536e <_strtod_l+0x1f6>
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	f103 0301 	add.w	r3, r3, #1
 80053ce:	dc03      	bgt.n	80053d8 <_strtod_l+0x260>
 80053d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80053d2:	434f      	muls	r7, r1
 80053d4:	9709      	str	r7, [sp, #36]	; 0x24
 80053d6:	e7e1      	b.n	800539c <_strtod_l+0x224>
 80053d8:	2b10      	cmp	r3, #16
 80053da:	bfd8      	it	le
 80053dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80053e0:	e7dc      	b.n	800539c <_strtod_l+0x224>
 80053e2:	2e10      	cmp	r6, #16
 80053e4:	bfdc      	itt	le
 80053e6:	230a      	movle	r3, #10
 80053e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80053ec:	e7e3      	b.n	80053b6 <_strtod_l+0x23e>
 80053ee:	2300      	movs	r3, #0
 80053f0:	9305      	str	r3, [sp, #20]
 80053f2:	2301      	movs	r3, #1
 80053f4:	e780      	b.n	80052f8 <_strtod_l+0x180>
 80053f6:	f04f 0c00 	mov.w	ip, #0
 80053fa:	1caa      	adds	r2, r5, #2
 80053fc:	9215      	str	r2, [sp, #84]	; 0x54
 80053fe:	78aa      	ldrb	r2, [r5, #2]
 8005400:	e788      	b.n	8005314 <_strtod_l+0x19c>
 8005402:	f04f 0c01 	mov.w	ip, #1
 8005406:	e7f8      	b.n	80053fa <_strtod_l+0x282>
 8005408:	08009430 	.word	0x08009430
 800540c:	0800942c 	.word	0x0800942c
 8005410:	7ff00000 	.word	0x7ff00000
 8005414:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005416:	1c51      	adds	r1, r2, #1
 8005418:	9115      	str	r1, [sp, #84]	; 0x54
 800541a:	7852      	ldrb	r2, [r2, #1]
 800541c:	2a30      	cmp	r2, #48	; 0x30
 800541e:	d0f9      	beq.n	8005414 <_strtod_l+0x29c>
 8005420:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005424:	2908      	cmp	r1, #8
 8005426:	f63f af7a 	bhi.w	800531e <_strtod_l+0x1a6>
 800542a:	3a30      	subs	r2, #48	; 0x30
 800542c:	9208      	str	r2, [sp, #32]
 800542e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005430:	920c      	str	r2, [sp, #48]	; 0x30
 8005432:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005434:	1c57      	adds	r7, r2, #1
 8005436:	9715      	str	r7, [sp, #84]	; 0x54
 8005438:	7852      	ldrb	r2, [r2, #1]
 800543a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800543e:	f1be 0f09 	cmp.w	lr, #9
 8005442:	d938      	bls.n	80054b6 <_strtod_l+0x33e>
 8005444:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005446:	1a7f      	subs	r7, r7, r1
 8005448:	2f08      	cmp	r7, #8
 800544a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800544e:	dc03      	bgt.n	8005458 <_strtod_l+0x2e0>
 8005450:	9908      	ldr	r1, [sp, #32]
 8005452:	428f      	cmp	r7, r1
 8005454:	bfa8      	it	ge
 8005456:	460f      	movge	r7, r1
 8005458:	f1bc 0f00 	cmp.w	ip, #0
 800545c:	d000      	beq.n	8005460 <_strtod_l+0x2e8>
 800545e:	427f      	negs	r7, r7
 8005460:	2e00      	cmp	r6, #0
 8005462:	d14f      	bne.n	8005504 <_strtod_l+0x38c>
 8005464:	9904      	ldr	r1, [sp, #16]
 8005466:	4301      	orrs	r1, r0
 8005468:	f47f aec1 	bne.w	80051ee <_strtod_l+0x76>
 800546c:	2b00      	cmp	r3, #0
 800546e:	f47f aedb 	bne.w	8005228 <_strtod_l+0xb0>
 8005472:	2a69      	cmp	r2, #105	; 0x69
 8005474:	d029      	beq.n	80054ca <_strtod_l+0x352>
 8005476:	dc26      	bgt.n	80054c6 <_strtod_l+0x34e>
 8005478:	2a49      	cmp	r2, #73	; 0x49
 800547a:	d026      	beq.n	80054ca <_strtod_l+0x352>
 800547c:	2a4e      	cmp	r2, #78	; 0x4e
 800547e:	f47f aed3 	bne.w	8005228 <_strtod_l+0xb0>
 8005482:	499b      	ldr	r1, [pc, #620]	; (80056f0 <_strtod_l+0x578>)
 8005484:	a815      	add	r0, sp, #84	; 0x54
 8005486:	f002 fc01 	bl	8007c8c <__match>
 800548a:	2800      	cmp	r0, #0
 800548c:	f43f aecc 	beq.w	8005228 <_strtod_l+0xb0>
 8005490:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b28      	cmp	r3, #40	; 0x28
 8005496:	d12f      	bne.n	80054f8 <_strtod_l+0x380>
 8005498:	4996      	ldr	r1, [pc, #600]	; (80056f4 <_strtod_l+0x57c>)
 800549a:	aa18      	add	r2, sp, #96	; 0x60
 800549c:	a815      	add	r0, sp, #84	; 0x54
 800549e:	f002 fc09 	bl	8007cb4 <__hexnan>
 80054a2:	2805      	cmp	r0, #5
 80054a4:	d128      	bne.n	80054f8 <_strtod_l+0x380>
 80054a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80054ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80054b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80054b4:	e69b      	b.n	80051ee <_strtod_l+0x76>
 80054b6:	9f08      	ldr	r7, [sp, #32]
 80054b8:	210a      	movs	r1, #10
 80054ba:	fb01 2107 	mla	r1, r1, r7, r2
 80054be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80054c2:	9208      	str	r2, [sp, #32]
 80054c4:	e7b5      	b.n	8005432 <_strtod_l+0x2ba>
 80054c6:	2a6e      	cmp	r2, #110	; 0x6e
 80054c8:	e7d9      	b.n	800547e <_strtod_l+0x306>
 80054ca:	498b      	ldr	r1, [pc, #556]	; (80056f8 <_strtod_l+0x580>)
 80054cc:	a815      	add	r0, sp, #84	; 0x54
 80054ce:	f002 fbdd 	bl	8007c8c <__match>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	f43f aea8 	beq.w	8005228 <_strtod_l+0xb0>
 80054d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80054da:	4988      	ldr	r1, [pc, #544]	; (80056fc <_strtod_l+0x584>)
 80054dc:	3b01      	subs	r3, #1
 80054de:	a815      	add	r0, sp, #84	; 0x54
 80054e0:	9315      	str	r3, [sp, #84]	; 0x54
 80054e2:	f002 fbd3 	bl	8007c8c <__match>
 80054e6:	b910      	cbnz	r0, 80054ee <_strtod_l+0x376>
 80054e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80054ea:	3301      	adds	r3, #1
 80054ec:	9315      	str	r3, [sp, #84]	; 0x54
 80054ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800570c <_strtod_l+0x594>
 80054f2:	f04f 0800 	mov.w	r8, #0
 80054f6:	e67a      	b.n	80051ee <_strtod_l+0x76>
 80054f8:	4881      	ldr	r0, [pc, #516]	; (8005700 <_strtod_l+0x588>)
 80054fa:	f001 fa51 	bl	80069a0 <nan>
 80054fe:	ec59 8b10 	vmov	r8, r9, d0
 8005502:	e674      	b.n	80051ee <_strtod_l+0x76>
 8005504:	9b05      	ldr	r3, [sp, #20]
 8005506:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005508:	1afb      	subs	r3, r7, r3
 800550a:	f1bb 0f00 	cmp.w	fp, #0
 800550e:	bf08      	it	eq
 8005510:	46b3      	moveq	fp, r6
 8005512:	2e10      	cmp	r6, #16
 8005514:	9308      	str	r3, [sp, #32]
 8005516:	4635      	mov	r5, r6
 8005518:	bfa8      	it	ge
 800551a:	2510      	movge	r5, #16
 800551c:	f7fa fff2 	bl	8000504 <__aeabi_ui2d>
 8005520:	2e09      	cmp	r6, #9
 8005522:	4680      	mov	r8, r0
 8005524:	4689      	mov	r9, r1
 8005526:	dd13      	ble.n	8005550 <_strtod_l+0x3d8>
 8005528:	4b76      	ldr	r3, [pc, #472]	; (8005704 <_strtod_l+0x58c>)
 800552a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800552e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005532:	f7fb f861 	bl	80005f8 <__aeabi_dmul>
 8005536:	4680      	mov	r8, r0
 8005538:	4650      	mov	r0, sl
 800553a:	4689      	mov	r9, r1
 800553c:	f7fa ffe2 	bl	8000504 <__aeabi_ui2d>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4640      	mov	r0, r8
 8005546:	4649      	mov	r1, r9
 8005548:	f7fa fea0 	bl	800028c <__adddf3>
 800554c:	4680      	mov	r8, r0
 800554e:	4689      	mov	r9, r1
 8005550:	2e0f      	cmp	r6, #15
 8005552:	dc38      	bgt.n	80055c6 <_strtod_l+0x44e>
 8005554:	9b08      	ldr	r3, [sp, #32]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f43f ae49 	beq.w	80051ee <_strtod_l+0x76>
 800555c:	dd24      	ble.n	80055a8 <_strtod_l+0x430>
 800555e:	2b16      	cmp	r3, #22
 8005560:	dc0b      	bgt.n	800557a <_strtod_l+0x402>
 8005562:	4968      	ldr	r1, [pc, #416]	; (8005704 <_strtod_l+0x58c>)
 8005564:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800556c:	4642      	mov	r2, r8
 800556e:	464b      	mov	r3, r9
 8005570:	f7fb f842 	bl	80005f8 <__aeabi_dmul>
 8005574:	4680      	mov	r8, r0
 8005576:	4689      	mov	r9, r1
 8005578:	e639      	b.n	80051ee <_strtod_l+0x76>
 800557a:	9a08      	ldr	r2, [sp, #32]
 800557c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005580:	4293      	cmp	r3, r2
 8005582:	db20      	blt.n	80055c6 <_strtod_l+0x44e>
 8005584:	4c5f      	ldr	r4, [pc, #380]	; (8005704 <_strtod_l+0x58c>)
 8005586:	f1c6 060f 	rsb	r6, r6, #15
 800558a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800558e:	4642      	mov	r2, r8
 8005590:	464b      	mov	r3, r9
 8005592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005596:	f7fb f82f 	bl	80005f8 <__aeabi_dmul>
 800559a:	9b08      	ldr	r3, [sp, #32]
 800559c:	1b9e      	subs	r6, r3, r6
 800559e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80055a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80055a6:	e7e3      	b.n	8005570 <_strtod_l+0x3f8>
 80055a8:	9b08      	ldr	r3, [sp, #32]
 80055aa:	3316      	adds	r3, #22
 80055ac:	db0b      	blt.n	80055c6 <_strtod_l+0x44e>
 80055ae:	9b05      	ldr	r3, [sp, #20]
 80055b0:	1bdf      	subs	r7, r3, r7
 80055b2:	4b54      	ldr	r3, [pc, #336]	; (8005704 <_strtod_l+0x58c>)
 80055b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80055b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055bc:	4640      	mov	r0, r8
 80055be:	4649      	mov	r1, r9
 80055c0:	f7fb f944 	bl	800084c <__aeabi_ddiv>
 80055c4:	e7d6      	b.n	8005574 <_strtod_l+0x3fc>
 80055c6:	9b08      	ldr	r3, [sp, #32]
 80055c8:	1b75      	subs	r5, r6, r5
 80055ca:	441d      	add	r5, r3
 80055cc:	2d00      	cmp	r5, #0
 80055ce:	dd70      	ble.n	80056b2 <_strtod_l+0x53a>
 80055d0:	f015 030f 	ands.w	r3, r5, #15
 80055d4:	d00a      	beq.n	80055ec <_strtod_l+0x474>
 80055d6:	494b      	ldr	r1, [pc, #300]	; (8005704 <_strtod_l+0x58c>)
 80055d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80055dc:	4642      	mov	r2, r8
 80055de:	464b      	mov	r3, r9
 80055e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055e4:	f7fb f808 	bl	80005f8 <__aeabi_dmul>
 80055e8:	4680      	mov	r8, r0
 80055ea:	4689      	mov	r9, r1
 80055ec:	f035 050f 	bics.w	r5, r5, #15
 80055f0:	d04d      	beq.n	800568e <_strtod_l+0x516>
 80055f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80055f6:	dd22      	ble.n	800563e <_strtod_l+0x4c6>
 80055f8:	2500      	movs	r5, #0
 80055fa:	46ab      	mov	fp, r5
 80055fc:	9509      	str	r5, [sp, #36]	; 0x24
 80055fe:	9505      	str	r5, [sp, #20]
 8005600:	2322      	movs	r3, #34	; 0x22
 8005602:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800570c <_strtod_l+0x594>
 8005606:	6023      	str	r3, [r4, #0]
 8005608:	f04f 0800 	mov.w	r8, #0
 800560c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800560e:	2b00      	cmp	r3, #0
 8005610:	f43f aded 	beq.w	80051ee <_strtod_l+0x76>
 8005614:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005616:	4620      	mov	r0, r4
 8005618:	f002 fcee 	bl	8007ff8 <_Bfree>
 800561c:	9905      	ldr	r1, [sp, #20]
 800561e:	4620      	mov	r0, r4
 8005620:	f002 fcea 	bl	8007ff8 <_Bfree>
 8005624:	4659      	mov	r1, fp
 8005626:	4620      	mov	r0, r4
 8005628:	f002 fce6 	bl	8007ff8 <_Bfree>
 800562c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800562e:	4620      	mov	r0, r4
 8005630:	f002 fce2 	bl	8007ff8 <_Bfree>
 8005634:	4629      	mov	r1, r5
 8005636:	4620      	mov	r0, r4
 8005638:	f002 fcde 	bl	8007ff8 <_Bfree>
 800563c:	e5d7      	b.n	80051ee <_strtod_l+0x76>
 800563e:	4b32      	ldr	r3, [pc, #200]	; (8005708 <_strtod_l+0x590>)
 8005640:	9304      	str	r3, [sp, #16]
 8005642:	2300      	movs	r3, #0
 8005644:	112d      	asrs	r5, r5, #4
 8005646:	4640      	mov	r0, r8
 8005648:	4649      	mov	r1, r9
 800564a:	469a      	mov	sl, r3
 800564c:	2d01      	cmp	r5, #1
 800564e:	dc21      	bgt.n	8005694 <_strtod_l+0x51c>
 8005650:	b10b      	cbz	r3, 8005656 <_strtod_l+0x4de>
 8005652:	4680      	mov	r8, r0
 8005654:	4689      	mov	r9, r1
 8005656:	492c      	ldr	r1, [pc, #176]	; (8005708 <_strtod_l+0x590>)
 8005658:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800565c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005660:	4642      	mov	r2, r8
 8005662:	464b      	mov	r3, r9
 8005664:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005668:	f7fa ffc6 	bl	80005f8 <__aeabi_dmul>
 800566c:	4b27      	ldr	r3, [pc, #156]	; (800570c <_strtod_l+0x594>)
 800566e:	460a      	mov	r2, r1
 8005670:	400b      	ands	r3, r1
 8005672:	4927      	ldr	r1, [pc, #156]	; (8005710 <_strtod_l+0x598>)
 8005674:	428b      	cmp	r3, r1
 8005676:	4680      	mov	r8, r0
 8005678:	d8be      	bhi.n	80055f8 <_strtod_l+0x480>
 800567a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800567e:	428b      	cmp	r3, r1
 8005680:	bf86      	itte	hi
 8005682:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8005714 <_strtod_l+0x59c>
 8005686:	f04f 38ff 	movhi.w	r8, #4294967295
 800568a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800568e:	2300      	movs	r3, #0
 8005690:	9304      	str	r3, [sp, #16]
 8005692:	e07b      	b.n	800578c <_strtod_l+0x614>
 8005694:	07ea      	lsls	r2, r5, #31
 8005696:	d505      	bpl.n	80056a4 <_strtod_l+0x52c>
 8005698:	9b04      	ldr	r3, [sp, #16]
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f7fa ffab 	bl	80005f8 <__aeabi_dmul>
 80056a2:	2301      	movs	r3, #1
 80056a4:	9a04      	ldr	r2, [sp, #16]
 80056a6:	3208      	adds	r2, #8
 80056a8:	f10a 0a01 	add.w	sl, sl, #1
 80056ac:	106d      	asrs	r5, r5, #1
 80056ae:	9204      	str	r2, [sp, #16]
 80056b0:	e7cc      	b.n	800564c <_strtod_l+0x4d4>
 80056b2:	d0ec      	beq.n	800568e <_strtod_l+0x516>
 80056b4:	426d      	negs	r5, r5
 80056b6:	f015 020f 	ands.w	r2, r5, #15
 80056ba:	d00a      	beq.n	80056d2 <_strtod_l+0x55a>
 80056bc:	4b11      	ldr	r3, [pc, #68]	; (8005704 <_strtod_l+0x58c>)
 80056be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056c2:	4640      	mov	r0, r8
 80056c4:	4649      	mov	r1, r9
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	f7fb f8bf 	bl	800084c <__aeabi_ddiv>
 80056ce:	4680      	mov	r8, r0
 80056d0:	4689      	mov	r9, r1
 80056d2:	112d      	asrs	r5, r5, #4
 80056d4:	d0db      	beq.n	800568e <_strtod_l+0x516>
 80056d6:	2d1f      	cmp	r5, #31
 80056d8:	dd1e      	ble.n	8005718 <_strtod_l+0x5a0>
 80056da:	2500      	movs	r5, #0
 80056dc:	46ab      	mov	fp, r5
 80056de:	9509      	str	r5, [sp, #36]	; 0x24
 80056e0:	9505      	str	r5, [sp, #20]
 80056e2:	2322      	movs	r3, #34	; 0x22
 80056e4:	f04f 0800 	mov.w	r8, #0
 80056e8:	f04f 0900 	mov.w	r9, #0
 80056ec:	6023      	str	r3, [r4, #0]
 80056ee:	e78d      	b.n	800560c <_strtod_l+0x494>
 80056f0:	0800948d 	.word	0x0800948d
 80056f4:	08009444 	.word	0x08009444
 80056f8:	08009485 	.word	0x08009485
 80056fc:	080094bf 	.word	0x080094bf
 8005700:	08009851 	.word	0x08009851
 8005704:	08009630 	.word	0x08009630
 8005708:	08009608 	.word	0x08009608
 800570c:	7ff00000 	.word	0x7ff00000
 8005710:	7ca00000 	.word	0x7ca00000
 8005714:	7fefffff 	.word	0x7fefffff
 8005718:	f015 0310 	ands.w	r3, r5, #16
 800571c:	bf18      	it	ne
 800571e:	236a      	movne	r3, #106	; 0x6a
 8005720:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8005ac4 <_strtod_l+0x94c>
 8005724:	9304      	str	r3, [sp, #16]
 8005726:	4640      	mov	r0, r8
 8005728:	4649      	mov	r1, r9
 800572a:	2300      	movs	r3, #0
 800572c:	07ea      	lsls	r2, r5, #31
 800572e:	d504      	bpl.n	800573a <_strtod_l+0x5c2>
 8005730:	e9da 2300 	ldrd	r2, r3, [sl]
 8005734:	f7fa ff60 	bl	80005f8 <__aeabi_dmul>
 8005738:	2301      	movs	r3, #1
 800573a:	106d      	asrs	r5, r5, #1
 800573c:	f10a 0a08 	add.w	sl, sl, #8
 8005740:	d1f4      	bne.n	800572c <_strtod_l+0x5b4>
 8005742:	b10b      	cbz	r3, 8005748 <_strtod_l+0x5d0>
 8005744:	4680      	mov	r8, r0
 8005746:	4689      	mov	r9, r1
 8005748:	9b04      	ldr	r3, [sp, #16]
 800574a:	b1bb      	cbz	r3, 800577c <_strtod_l+0x604>
 800574c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005750:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005754:	2b00      	cmp	r3, #0
 8005756:	4649      	mov	r1, r9
 8005758:	dd10      	ble.n	800577c <_strtod_l+0x604>
 800575a:	2b1f      	cmp	r3, #31
 800575c:	f340 811e 	ble.w	800599c <_strtod_l+0x824>
 8005760:	2b34      	cmp	r3, #52	; 0x34
 8005762:	bfde      	ittt	le
 8005764:	f04f 33ff 	movle.w	r3, #4294967295
 8005768:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800576c:	4093      	lslle	r3, r2
 800576e:	f04f 0800 	mov.w	r8, #0
 8005772:	bfcc      	ite	gt
 8005774:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005778:	ea03 0901 	andle.w	r9, r3, r1
 800577c:	2200      	movs	r2, #0
 800577e:	2300      	movs	r3, #0
 8005780:	4640      	mov	r0, r8
 8005782:	4649      	mov	r1, r9
 8005784:	f7fb f9a0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005788:	2800      	cmp	r0, #0
 800578a:	d1a6      	bne.n	80056da <_strtod_l+0x562>
 800578c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005792:	4633      	mov	r3, r6
 8005794:	465a      	mov	r2, fp
 8005796:	4620      	mov	r0, r4
 8005798:	f002 fc96 	bl	80080c8 <__s2b>
 800579c:	9009      	str	r0, [sp, #36]	; 0x24
 800579e:	2800      	cmp	r0, #0
 80057a0:	f43f af2a 	beq.w	80055f8 <_strtod_l+0x480>
 80057a4:	9a08      	ldr	r2, [sp, #32]
 80057a6:	9b05      	ldr	r3, [sp, #20]
 80057a8:	2a00      	cmp	r2, #0
 80057aa:	eba3 0307 	sub.w	r3, r3, r7
 80057ae:	bfa8      	it	ge
 80057b0:	2300      	movge	r3, #0
 80057b2:	930c      	str	r3, [sp, #48]	; 0x30
 80057b4:	2500      	movs	r5, #0
 80057b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80057ba:	9312      	str	r3, [sp, #72]	; 0x48
 80057bc:	46ab      	mov	fp, r5
 80057be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c0:	4620      	mov	r0, r4
 80057c2:	6859      	ldr	r1, [r3, #4]
 80057c4:	f002 fbd8 	bl	8007f78 <_Balloc>
 80057c8:	9005      	str	r0, [sp, #20]
 80057ca:	2800      	cmp	r0, #0
 80057cc:	f43f af18 	beq.w	8005600 <_strtod_l+0x488>
 80057d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	3202      	adds	r2, #2
 80057d6:	f103 010c 	add.w	r1, r3, #12
 80057da:	0092      	lsls	r2, r2, #2
 80057dc:	300c      	adds	r0, #12
 80057de:	f001 f8d1 	bl	8006984 <memcpy>
 80057e2:	ec49 8b10 	vmov	d0, r8, r9
 80057e6:	aa18      	add	r2, sp, #96	; 0x60
 80057e8:	a917      	add	r1, sp, #92	; 0x5c
 80057ea:	4620      	mov	r0, r4
 80057ec:	f002 ffa0 	bl	8008730 <__d2b>
 80057f0:	ec49 8b18 	vmov	d8, r8, r9
 80057f4:	9016      	str	r0, [sp, #88]	; 0x58
 80057f6:	2800      	cmp	r0, #0
 80057f8:	f43f af02 	beq.w	8005600 <_strtod_l+0x488>
 80057fc:	2101      	movs	r1, #1
 80057fe:	4620      	mov	r0, r4
 8005800:	f002 fcfa 	bl	80081f8 <__i2b>
 8005804:	4683      	mov	fp, r0
 8005806:	2800      	cmp	r0, #0
 8005808:	f43f aefa 	beq.w	8005600 <_strtod_l+0x488>
 800580c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800580e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005810:	2e00      	cmp	r6, #0
 8005812:	bfab      	itete	ge
 8005814:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8005816:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8005818:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800581a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800581e:	bfac      	ite	ge
 8005820:	eb06 0a03 	addge.w	sl, r6, r3
 8005824:	1b9f      	sublt	r7, r3, r6
 8005826:	9b04      	ldr	r3, [sp, #16]
 8005828:	1af6      	subs	r6, r6, r3
 800582a:	4416      	add	r6, r2
 800582c:	4ba0      	ldr	r3, [pc, #640]	; (8005ab0 <_strtod_l+0x938>)
 800582e:	3e01      	subs	r6, #1
 8005830:	429e      	cmp	r6, r3
 8005832:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005836:	f280 80c4 	bge.w	80059c2 <_strtod_l+0x84a>
 800583a:	1b9b      	subs	r3, r3, r6
 800583c:	2b1f      	cmp	r3, #31
 800583e:	eba2 0203 	sub.w	r2, r2, r3
 8005842:	f04f 0101 	mov.w	r1, #1
 8005846:	f300 80b0 	bgt.w	80059aa <_strtod_l+0x832>
 800584a:	fa01 f303 	lsl.w	r3, r1, r3
 800584e:	930e      	str	r3, [sp, #56]	; 0x38
 8005850:	2300      	movs	r3, #0
 8005852:	930d      	str	r3, [sp, #52]	; 0x34
 8005854:	eb0a 0602 	add.w	r6, sl, r2
 8005858:	9b04      	ldr	r3, [sp, #16]
 800585a:	45b2      	cmp	sl, r6
 800585c:	4417      	add	r7, r2
 800585e:	441f      	add	r7, r3
 8005860:	4653      	mov	r3, sl
 8005862:	bfa8      	it	ge
 8005864:	4633      	movge	r3, r6
 8005866:	42bb      	cmp	r3, r7
 8005868:	bfa8      	it	ge
 800586a:	463b      	movge	r3, r7
 800586c:	2b00      	cmp	r3, #0
 800586e:	bfc2      	ittt	gt
 8005870:	1af6      	subgt	r6, r6, r3
 8005872:	1aff      	subgt	r7, r7, r3
 8005874:	ebaa 0a03 	subgt.w	sl, sl, r3
 8005878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800587a:	2b00      	cmp	r3, #0
 800587c:	dd17      	ble.n	80058ae <_strtod_l+0x736>
 800587e:	4659      	mov	r1, fp
 8005880:	461a      	mov	r2, r3
 8005882:	4620      	mov	r0, r4
 8005884:	f002 fd78 	bl	8008378 <__pow5mult>
 8005888:	4683      	mov	fp, r0
 800588a:	2800      	cmp	r0, #0
 800588c:	f43f aeb8 	beq.w	8005600 <_strtod_l+0x488>
 8005890:	4601      	mov	r1, r0
 8005892:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005894:	4620      	mov	r0, r4
 8005896:	f002 fcc5 	bl	8008224 <__multiply>
 800589a:	900b      	str	r0, [sp, #44]	; 0x2c
 800589c:	2800      	cmp	r0, #0
 800589e:	f43f aeaf 	beq.w	8005600 <_strtod_l+0x488>
 80058a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80058a4:	4620      	mov	r0, r4
 80058a6:	f002 fba7 	bl	8007ff8 <_Bfree>
 80058aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ac:	9316      	str	r3, [sp, #88]	; 0x58
 80058ae:	2e00      	cmp	r6, #0
 80058b0:	f300 808c 	bgt.w	80059cc <_strtod_l+0x854>
 80058b4:	9b08      	ldr	r3, [sp, #32]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	dd08      	ble.n	80058cc <_strtod_l+0x754>
 80058ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058bc:	9905      	ldr	r1, [sp, #20]
 80058be:	4620      	mov	r0, r4
 80058c0:	f002 fd5a 	bl	8008378 <__pow5mult>
 80058c4:	9005      	str	r0, [sp, #20]
 80058c6:	2800      	cmp	r0, #0
 80058c8:	f43f ae9a 	beq.w	8005600 <_strtod_l+0x488>
 80058cc:	2f00      	cmp	r7, #0
 80058ce:	dd08      	ble.n	80058e2 <_strtod_l+0x76a>
 80058d0:	9905      	ldr	r1, [sp, #20]
 80058d2:	463a      	mov	r2, r7
 80058d4:	4620      	mov	r0, r4
 80058d6:	f002 fda9 	bl	800842c <__lshift>
 80058da:	9005      	str	r0, [sp, #20]
 80058dc:	2800      	cmp	r0, #0
 80058de:	f43f ae8f 	beq.w	8005600 <_strtod_l+0x488>
 80058e2:	f1ba 0f00 	cmp.w	sl, #0
 80058e6:	dd08      	ble.n	80058fa <_strtod_l+0x782>
 80058e8:	4659      	mov	r1, fp
 80058ea:	4652      	mov	r2, sl
 80058ec:	4620      	mov	r0, r4
 80058ee:	f002 fd9d 	bl	800842c <__lshift>
 80058f2:	4683      	mov	fp, r0
 80058f4:	2800      	cmp	r0, #0
 80058f6:	f43f ae83 	beq.w	8005600 <_strtod_l+0x488>
 80058fa:	9a05      	ldr	r2, [sp, #20]
 80058fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80058fe:	4620      	mov	r0, r4
 8005900:	f002 fe1c 	bl	800853c <__mdiff>
 8005904:	4605      	mov	r5, r0
 8005906:	2800      	cmp	r0, #0
 8005908:	f43f ae7a 	beq.w	8005600 <_strtod_l+0x488>
 800590c:	68c3      	ldr	r3, [r0, #12]
 800590e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005910:	2300      	movs	r3, #0
 8005912:	60c3      	str	r3, [r0, #12]
 8005914:	4659      	mov	r1, fp
 8005916:	f002 fdf5 	bl	8008504 <__mcmp>
 800591a:	2800      	cmp	r0, #0
 800591c:	da60      	bge.n	80059e0 <_strtod_l+0x868>
 800591e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005920:	ea53 0308 	orrs.w	r3, r3, r8
 8005924:	f040 8084 	bne.w	8005a30 <_strtod_l+0x8b8>
 8005928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800592c:	2b00      	cmp	r3, #0
 800592e:	d17f      	bne.n	8005a30 <_strtod_l+0x8b8>
 8005930:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005934:	0d1b      	lsrs	r3, r3, #20
 8005936:	051b      	lsls	r3, r3, #20
 8005938:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800593c:	d978      	bls.n	8005a30 <_strtod_l+0x8b8>
 800593e:	696b      	ldr	r3, [r5, #20]
 8005940:	b913      	cbnz	r3, 8005948 <_strtod_l+0x7d0>
 8005942:	692b      	ldr	r3, [r5, #16]
 8005944:	2b01      	cmp	r3, #1
 8005946:	dd73      	ble.n	8005a30 <_strtod_l+0x8b8>
 8005948:	4629      	mov	r1, r5
 800594a:	2201      	movs	r2, #1
 800594c:	4620      	mov	r0, r4
 800594e:	f002 fd6d 	bl	800842c <__lshift>
 8005952:	4659      	mov	r1, fp
 8005954:	4605      	mov	r5, r0
 8005956:	f002 fdd5 	bl	8008504 <__mcmp>
 800595a:	2800      	cmp	r0, #0
 800595c:	dd68      	ble.n	8005a30 <_strtod_l+0x8b8>
 800595e:	9904      	ldr	r1, [sp, #16]
 8005960:	4a54      	ldr	r2, [pc, #336]	; (8005ab4 <_strtod_l+0x93c>)
 8005962:	464b      	mov	r3, r9
 8005964:	2900      	cmp	r1, #0
 8005966:	f000 8084 	beq.w	8005a72 <_strtod_l+0x8fa>
 800596a:	ea02 0109 	and.w	r1, r2, r9
 800596e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005972:	dc7e      	bgt.n	8005a72 <_strtod_l+0x8fa>
 8005974:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005978:	f77f aeb3 	ble.w	80056e2 <_strtod_l+0x56a>
 800597c:	4b4e      	ldr	r3, [pc, #312]	; (8005ab8 <_strtod_l+0x940>)
 800597e:	4640      	mov	r0, r8
 8005980:	4649      	mov	r1, r9
 8005982:	2200      	movs	r2, #0
 8005984:	f7fa fe38 	bl	80005f8 <__aeabi_dmul>
 8005988:	4b4a      	ldr	r3, [pc, #296]	; (8005ab4 <_strtod_l+0x93c>)
 800598a:	400b      	ands	r3, r1
 800598c:	4680      	mov	r8, r0
 800598e:	4689      	mov	r9, r1
 8005990:	2b00      	cmp	r3, #0
 8005992:	f47f ae3f 	bne.w	8005614 <_strtod_l+0x49c>
 8005996:	2322      	movs	r3, #34	; 0x22
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	e63b      	b.n	8005614 <_strtod_l+0x49c>
 800599c:	f04f 32ff 	mov.w	r2, #4294967295
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	ea03 0808 	and.w	r8, r3, r8
 80059a8:	e6e8      	b.n	800577c <_strtod_l+0x604>
 80059aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80059ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80059b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80059b6:	36e2      	adds	r6, #226	; 0xe2
 80059b8:	fa01 f306 	lsl.w	r3, r1, r6
 80059bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80059c0:	e748      	b.n	8005854 <_strtod_l+0x6dc>
 80059c2:	2100      	movs	r1, #0
 80059c4:	2301      	movs	r3, #1
 80059c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80059ca:	e743      	b.n	8005854 <_strtod_l+0x6dc>
 80059cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80059ce:	4632      	mov	r2, r6
 80059d0:	4620      	mov	r0, r4
 80059d2:	f002 fd2b 	bl	800842c <__lshift>
 80059d6:	9016      	str	r0, [sp, #88]	; 0x58
 80059d8:	2800      	cmp	r0, #0
 80059da:	f47f af6b 	bne.w	80058b4 <_strtod_l+0x73c>
 80059de:	e60f      	b.n	8005600 <_strtod_l+0x488>
 80059e0:	46ca      	mov	sl, r9
 80059e2:	d171      	bne.n	8005ac8 <_strtod_l+0x950>
 80059e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059ea:	b352      	cbz	r2, 8005a42 <_strtod_l+0x8ca>
 80059ec:	4a33      	ldr	r2, [pc, #204]	; (8005abc <_strtod_l+0x944>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d12a      	bne.n	8005a48 <_strtod_l+0x8d0>
 80059f2:	9b04      	ldr	r3, [sp, #16]
 80059f4:	4641      	mov	r1, r8
 80059f6:	b1fb      	cbz	r3, 8005a38 <_strtod_l+0x8c0>
 80059f8:	4b2e      	ldr	r3, [pc, #184]	; (8005ab4 <_strtod_l+0x93c>)
 80059fa:	ea09 0303 	and.w	r3, r9, r3
 80059fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005a02:	f04f 32ff 	mov.w	r2, #4294967295
 8005a06:	d81a      	bhi.n	8005a3e <_strtod_l+0x8c6>
 8005a08:	0d1b      	lsrs	r3, r3, #20
 8005a0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	4299      	cmp	r1, r3
 8005a14:	d118      	bne.n	8005a48 <_strtod_l+0x8d0>
 8005a16:	4b2a      	ldr	r3, [pc, #168]	; (8005ac0 <_strtod_l+0x948>)
 8005a18:	459a      	cmp	sl, r3
 8005a1a:	d102      	bne.n	8005a22 <_strtod_l+0x8aa>
 8005a1c:	3101      	adds	r1, #1
 8005a1e:	f43f adef 	beq.w	8005600 <_strtod_l+0x488>
 8005a22:	4b24      	ldr	r3, [pc, #144]	; (8005ab4 <_strtod_l+0x93c>)
 8005a24:	ea0a 0303 	and.w	r3, sl, r3
 8005a28:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8005a2c:	f04f 0800 	mov.w	r8, #0
 8005a30:	9b04      	ldr	r3, [sp, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1a2      	bne.n	800597c <_strtod_l+0x804>
 8005a36:	e5ed      	b.n	8005614 <_strtod_l+0x49c>
 8005a38:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3c:	e7e9      	b.n	8005a12 <_strtod_l+0x89a>
 8005a3e:	4613      	mov	r3, r2
 8005a40:	e7e7      	b.n	8005a12 <_strtod_l+0x89a>
 8005a42:	ea53 0308 	orrs.w	r3, r3, r8
 8005a46:	d08a      	beq.n	800595e <_strtod_l+0x7e6>
 8005a48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a4a:	b1e3      	cbz	r3, 8005a86 <_strtod_l+0x90e>
 8005a4c:	ea13 0f0a 	tst.w	r3, sl
 8005a50:	d0ee      	beq.n	8005a30 <_strtod_l+0x8b8>
 8005a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a54:	9a04      	ldr	r2, [sp, #16]
 8005a56:	4640      	mov	r0, r8
 8005a58:	4649      	mov	r1, r9
 8005a5a:	b1c3      	cbz	r3, 8005a8e <_strtod_l+0x916>
 8005a5c:	f7ff fb70 	bl	8005140 <sulp>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	ec51 0b18 	vmov	r0, r1, d8
 8005a68:	f7fa fc10 	bl	800028c <__adddf3>
 8005a6c:	4680      	mov	r8, r0
 8005a6e:	4689      	mov	r9, r1
 8005a70:	e7de      	b.n	8005a30 <_strtod_l+0x8b8>
 8005a72:	4013      	ands	r3, r2
 8005a74:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a78:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005a7c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005a80:	f04f 38ff 	mov.w	r8, #4294967295
 8005a84:	e7d4      	b.n	8005a30 <_strtod_l+0x8b8>
 8005a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a88:	ea13 0f08 	tst.w	r3, r8
 8005a8c:	e7e0      	b.n	8005a50 <_strtod_l+0x8d8>
 8005a8e:	f7ff fb57 	bl	8005140 <sulp>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	ec51 0b18 	vmov	r0, r1, d8
 8005a9a:	f7fa fbf5 	bl	8000288 <__aeabi_dsub>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	4680      	mov	r8, r0
 8005aa4:	4689      	mov	r9, r1
 8005aa6:	f7fb f80f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d0c0      	beq.n	8005a30 <_strtod_l+0x8b8>
 8005aae:	e618      	b.n	80056e2 <_strtod_l+0x56a>
 8005ab0:	fffffc02 	.word	0xfffffc02
 8005ab4:	7ff00000 	.word	0x7ff00000
 8005ab8:	39500000 	.word	0x39500000
 8005abc:	000fffff 	.word	0x000fffff
 8005ac0:	7fefffff 	.word	0x7fefffff
 8005ac4:	08009458 	.word	0x08009458
 8005ac8:	4659      	mov	r1, fp
 8005aca:	4628      	mov	r0, r5
 8005acc:	f002 fe8a 	bl	80087e4 <__ratio>
 8005ad0:	ec57 6b10 	vmov	r6, r7, d0
 8005ad4:	ee10 0a10 	vmov	r0, s0
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ade:	4639      	mov	r1, r7
 8005ae0:	f7fb f806 	bl	8000af0 <__aeabi_dcmple>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d071      	beq.n	8005bcc <_strtod_l+0xa54>
 8005ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d17c      	bne.n	8005be8 <_strtod_l+0xa70>
 8005aee:	f1b8 0f00 	cmp.w	r8, #0
 8005af2:	d15a      	bne.n	8005baa <_strtod_l+0xa32>
 8005af4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d15d      	bne.n	8005bb8 <_strtod_l+0xa40>
 8005afc:	4b90      	ldr	r3, [pc, #576]	; (8005d40 <_strtod_l+0xbc8>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	4630      	mov	r0, r6
 8005b02:	4639      	mov	r1, r7
 8005b04:	f7fa ffea 	bl	8000adc <__aeabi_dcmplt>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d15c      	bne.n	8005bc6 <_strtod_l+0xa4e>
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	4639      	mov	r1, r7
 8005b10:	4b8c      	ldr	r3, [pc, #560]	; (8005d44 <_strtod_l+0xbcc>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	f7fa fd70 	bl	80005f8 <__aeabi_dmul>
 8005b18:	4606      	mov	r6, r0
 8005b1a:	460f      	mov	r7, r1
 8005b1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005b20:	9606      	str	r6, [sp, #24]
 8005b22:	9307      	str	r3, [sp, #28]
 8005b24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005b2c:	4b86      	ldr	r3, [pc, #536]	; (8005d48 <_strtod_l+0xbd0>)
 8005b2e:	ea0a 0303 	and.w	r3, sl, r3
 8005b32:	930d      	str	r3, [sp, #52]	; 0x34
 8005b34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b36:	4b85      	ldr	r3, [pc, #532]	; (8005d4c <_strtod_l+0xbd4>)
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	f040 8090 	bne.w	8005c5e <_strtod_l+0xae6>
 8005b3e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8005b42:	ec49 8b10 	vmov	d0, r8, r9
 8005b46:	f002 fd83 	bl	8008650 <__ulp>
 8005b4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b4e:	ec51 0b10 	vmov	r0, r1, d0
 8005b52:	f7fa fd51 	bl	80005f8 <__aeabi_dmul>
 8005b56:	4642      	mov	r2, r8
 8005b58:	464b      	mov	r3, r9
 8005b5a:	f7fa fb97 	bl	800028c <__adddf3>
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4979      	ldr	r1, [pc, #484]	; (8005d48 <_strtod_l+0xbd0>)
 8005b62:	4a7b      	ldr	r2, [pc, #492]	; (8005d50 <_strtod_l+0xbd8>)
 8005b64:	4019      	ands	r1, r3
 8005b66:	4291      	cmp	r1, r2
 8005b68:	4680      	mov	r8, r0
 8005b6a:	d944      	bls.n	8005bf6 <_strtod_l+0xa7e>
 8005b6c:	ee18 2a90 	vmov	r2, s17
 8005b70:	4b78      	ldr	r3, [pc, #480]	; (8005d54 <_strtod_l+0xbdc>)
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d104      	bne.n	8005b80 <_strtod_l+0xa08>
 8005b76:	ee18 3a10 	vmov	r3, s16
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	f43f ad40 	beq.w	8005600 <_strtod_l+0x488>
 8005b80:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8005d54 <_strtod_l+0xbdc>
 8005b84:	f04f 38ff 	mov.w	r8, #4294967295
 8005b88:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f002 fa34 	bl	8007ff8 <_Bfree>
 8005b90:	9905      	ldr	r1, [sp, #20]
 8005b92:	4620      	mov	r0, r4
 8005b94:	f002 fa30 	bl	8007ff8 <_Bfree>
 8005b98:	4659      	mov	r1, fp
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f002 fa2c 	bl	8007ff8 <_Bfree>
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f002 fa28 	bl	8007ff8 <_Bfree>
 8005ba8:	e609      	b.n	80057be <_strtod_l+0x646>
 8005baa:	f1b8 0f01 	cmp.w	r8, #1
 8005bae:	d103      	bne.n	8005bb8 <_strtod_l+0xa40>
 8005bb0:	f1b9 0f00 	cmp.w	r9, #0
 8005bb4:	f43f ad95 	beq.w	80056e2 <_strtod_l+0x56a>
 8005bb8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8005d10 <_strtod_l+0xb98>
 8005bbc:	4f60      	ldr	r7, [pc, #384]	; (8005d40 <_strtod_l+0xbc8>)
 8005bbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005bc2:	2600      	movs	r6, #0
 8005bc4:	e7ae      	b.n	8005b24 <_strtod_l+0x9ac>
 8005bc6:	4f5f      	ldr	r7, [pc, #380]	; (8005d44 <_strtod_l+0xbcc>)
 8005bc8:	2600      	movs	r6, #0
 8005bca:	e7a7      	b.n	8005b1c <_strtod_l+0x9a4>
 8005bcc:	4b5d      	ldr	r3, [pc, #372]	; (8005d44 <_strtod_l+0xbcc>)
 8005bce:	4630      	mov	r0, r6
 8005bd0:	4639      	mov	r1, r7
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f7fa fd10 	bl	80005f8 <__aeabi_dmul>
 8005bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460f      	mov	r7, r1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d09c      	beq.n	8005b1c <_strtod_l+0x9a4>
 8005be2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005be6:	e79d      	b.n	8005b24 <_strtod_l+0x9ac>
 8005be8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8005d18 <_strtod_l+0xba0>
 8005bec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005bf0:	ec57 6b17 	vmov	r6, r7, d7
 8005bf4:	e796      	b.n	8005b24 <_strtod_l+0x9ac>
 8005bf6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005bfa:	9b04      	ldr	r3, [sp, #16]
 8005bfc:	46ca      	mov	sl, r9
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1c2      	bne.n	8005b88 <_strtod_l+0xa10>
 8005c02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c08:	0d1b      	lsrs	r3, r3, #20
 8005c0a:	051b      	lsls	r3, r3, #20
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d1bb      	bne.n	8005b88 <_strtod_l+0xa10>
 8005c10:	4630      	mov	r0, r6
 8005c12:	4639      	mov	r1, r7
 8005c14:	f7fb f838 	bl	8000c88 <__aeabi_d2lz>
 8005c18:	f7fa fcc0 	bl	800059c <__aeabi_l2d>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4630      	mov	r0, r6
 8005c22:	4639      	mov	r1, r7
 8005c24:	f7fa fb30 	bl	8000288 <__aeabi_dsub>
 8005c28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c2e:	ea43 0308 	orr.w	r3, r3, r8
 8005c32:	4313      	orrs	r3, r2
 8005c34:	4606      	mov	r6, r0
 8005c36:	460f      	mov	r7, r1
 8005c38:	d054      	beq.n	8005ce4 <_strtod_l+0xb6c>
 8005c3a:	a339      	add	r3, pc, #228	; (adr r3, 8005d20 <_strtod_l+0xba8>)
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f7fa ff4c 	bl	8000adc <__aeabi_dcmplt>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	f47f ace5 	bne.w	8005614 <_strtod_l+0x49c>
 8005c4a:	a337      	add	r3, pc, #220	; (adr r3, 8005d28 <_strtod_l+0xbb0>)
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	4630      	mov	r0, r6
 8005c52:	4639      	mov	r1, r7
 8005c54:	f7fa ff60 	bl	8000b18 <__aeabi_dcmpgt>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d095      	beq.n	8005b88 <_strtod_l+0xa10>
 8005c5c:	e4da      	b.n	8005614 <_strtod_l+0x49c>
 8005c5e:	9b04      	ldr	r3, [sp, #16]
 8005c60:	b333      	cbz	r3, 8005cb0 <_strtod_l+0xb38>
 8005c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c68:	d822      	bhi.n	8005cb0 <_strtod_l+0xb38>
 8005c6a:	a331      	add	r3, pc, #196	; (adr r3, 8005d30 <_strtod_l+0xbb8>)
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	4630      	mov	r0, r6
 8005c72:	4639      	mov	r1, r7
 8005c74:	f7fa ff3c 	bl	8000af0 <__aeabi_dcmple>
 8005c78:	b1a0      	cbz	r0, 8005ca4 <_strtod_l+0xb2c>
 8005c7a:	4639      	mov	r1, r7
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f7fa ff93 	bl	8000ba8 <__aeabi_d2uiz>
 8005c82:	2801      	cmp	r0, #1
 8005c84:	bf38      	it	cc
 8005c86:	2001      	movcc	r0, #1
 8005c88:	f7fa fc3c 	bl	8000504 <__aeabi_ui2d>
 8005c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c8e:	4606      	mov	r6, r0
 8005c90:	460f      	mov	r7, r1
 8005c92:	bb23      	cbnz	r3, 8005cde <_strtod_l+0xb66>
 8005c94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c98:	9010      	str	r0, [sp, #64]	; 0x40
 8005c9a:	9311      	str	r3, [sp, #68]	; 0x44
 8005c9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ca0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005ca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ca6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ca8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005cac:	1a9b      	subs	r3, r3, r2
 8005cae:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cb0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005cb4:	eeb0 0a48 	vmov.f32	s0, s16
 8005cb8:	eef0 0a68 	vmov.f32	s1, s17
 8005cbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005cc0:	f002 fcc6 	bl	8008650 <__ulp>
 8005cc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005cc8:	ec53 2b10 	vmov	r2, r3, d0
 8005ccc:	f7fa fc94 	bl	80005f8 <__aeabi_dmul>
 8005cd0:	ec53 2b18 	vmov	r2, r3, d8
 8005cd4:	f7fa fada 	bl	800028c <__adddf3>
 8005cd8:	4680      	mov	r8, r0
 8005cda:	4689      	mov	r9, r1
 8005cdc:	e78d      	b.n	8005bfa <_strtod_l+0xa82>
 8005cde:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005ce2:	e7db      	b.n	8005c9c <_strtod_l+0xb24>
 8005ce4:	a314      	add	r3, pc, #80	; (adr r3, 8005d38 <_strtod_l+0xbc0>)
 8005ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cea:	f7fa fef7 	bl	8000adc <__aeabi_dcmplt>
 8005cee:	e7b3      	b.n	8005c58 <_strtod_l+0xae0>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8005cf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005cf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	f7ff ba7c 	b.w	80051f6 <_strtod_l+0x7e>
 8005cfe:	2a65      	cmp	r2, #101	; 0x65
 8005d00:	f43f ab75 	beq.w	80053ee <_strtod_l+0x276>
 8005d04:	2a45      	cmp	r2, #69	; 0x45
 8005d06:	f43f ab72 	beq.w	80053ee <_strtod_l+0x276>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	f7ff bbaa 	b.w	8005464 <_strtod_l+0x2ec>
 8005d10:	00000000 	.word	0x00000000
 8005d14:	bff00000 	.word	0xbff00000
 8005d18:	00000000 	.word	0x00000000
 8005d1c:	3ff00000 	.word	0x3ff00000
 8005d20:	94a03595 	.word	0x94a03595
 8005d24:	3fdfffff 	.word	0x3fdfffff
 8005d28:	35afe535 	.word	0x35afe535
 8005d2c:	3fe00000 	.word	0x3fe00000
 8005d30:	ffc00000 	.word	0xffc00000
 8005d34:	41dfffff 	.word	0x41dfffff
 8005d38:	94a03595 	.word	0x94a03595
 8005d3c:	3fcfffff 	.word	0x3fcfffff
 8005d40:	3ff00000 	.word	0x3ff00000
 8005d44:	3fe00000 	.word	0x3fe00000
 8005d48:	7ff00000 	.word	0x7ff00000
 8005d4c:	7fe00000 	.word	0x7fe00000
 8005d50:	7c9fffff 	.word	0x7c9fffff
 8005d54:	7fefffff 	.word	0x7fefffff

08005d58 <strtod>:
 8005d58:	460a      	mov	r2, r1
 8005d5a:	4601      	mov	r1, r0
 8005d5c:	4802      	ldr	r0, [pc, #8]	; (8005d68 <strtod+0x10>)
 8005d5e:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <strtod+0x14>)
 8005d60:	6800      	ldr	r0, [r0, #0]
 8005d62:	f7ff ba09 	b.w	8005178 <_strtod_l>
 8005d66:	bf00      	nop
 8005d68:	200001d0 	.word	0x200001d0
 8005d6c:	20000018 	.word	0x20000018

08005d70 <__cvt>:
 8005d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d74:	ec55 4b10 	vmov	r4, r5, d0
 8005d78:	2d00      	cmp	r5, #0
 8005d7a:	460e      	mov	r6, r1
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	462b      	mov	r3, r5
 8005d80:	bfbb      	ittet	lt
 8005d82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d86:	461d      	movlt	r5, r3
 8005d88:	2300      	movge	r3, #0
 8005d8a:	232d      	movlt	r3, #45	; 0x2d
 8005d8c:	700b      	strb	r3, [r1, #0]
 8005d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d94:	4691      	mov	r9, r2
 8005d96:	f023 0820 	bic.w	r8, r3, #32
 8005d9a:	bfbc      	itt	lt
 8005d9c:	4622      	movlt	r2, r4
 8005d9e:	4614      	movlt	r4, r2
 8005da0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005da4:	d005      	beq.n	8005db2 <__cvt+0x42>
 8005da6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005daa:	d100      	bne.n	8005dae <__cvt+0x3e>
 8005dac:	3601      	adds	r6, #1
 8005dae:	2102      	movs	r1, #2
 8005db0:	e000      	b.n	8005db4 <__cvt+0x44>
 8005db2:	2103      	movs	r1, #3
 8005db4:	ab03      	add	r3, sp, #12
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	ab02      	add	r3, sp, #8
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	ec45 4b10 	vmov	d0, r4, r5
 8005dc0:	4653      	mov	r3, sl
 8005dc2:	4632      	mov	r2, r6
 8005dc4:	f000 fe7c 	bl	8006ac0 <_dtoa_r>
 8005dc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005dcc:	4607      	mov	r7, r0
 8005dce:	d102      	bne.n	8005dd6 <__cvt+0x66>
 8005dd0:	f019 0f01 	tst.w	r9, #1
 8005dd4:	d022      	beq.n	8005e1c <__cvt+0xac>
 8005dd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005dda:	eb07 0906 	add.w	r9, r7, r6
 8005dde:	d110      	bne.n	8005e02 <__cvt+0x92>
 8005de0:	783b      	ldrb	r3, [r7, #0]
 8005de2:	2b30      	cmp	r3, #48	; 0x30
 8005de4:	d10a      	bne.n	8005dfc <__cvt+0x8c>
 8005de6:	2200      	movs	r2, #0
 8005de8:	2300      	movs	r3, #0
 8005dea:	4620      	mov	r0, r4
 8005dec:	4629      	mov	r1, r5
 8005dee:	f7fa fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005df2:	b918      	cbnz	r0, 8005dfc <__cvt+0x8c>
 8005df4:	f1c6 0601 	rsb	r6, r6, #1
 8005df8:	f8ca 6000 	str.w	r6, [sl]
 8005dfc:	f8da 3000 	ldr.w	r3, [sl]
 8005e00:	4499      	add	r9, r3
 8005e02:	2200      	movs	r2, #0
 8005e04:	2300      	movs	r3, #0
 8005e06:	4620      	mov	r0, r4
 8005e08:	4629      	mov	r1, r5
 8005e0a:	f7fa fe5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e0e:	b108      	cbz	r0, 8005e14 <__cvt+0xa4>
 8005e10:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e14:	2230      	movs	r2, #48	; 0x30
 8005e16:	9b03      	ldr	r3, [sp, #12]
 8005e18:	454b      	cmp	r3, r9
 8005e1a:	d307      	bcc.n	8005e2c <__cvt+0xbc>
 8005e1c:	9b03      	ldr	r3, [sp, #12]
 8005e1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e20:	1bdb      	subs	r3, r3, r7
 8005e22:	4638      	mov	r0, r7
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	b004      	add	sp, #16
 8005e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2c:	1c59      	adds	r1, r3, #1
 8005e2e:	9103      	str	r1, [sp, #12]
 8005e30:	701a      	strb	r2, [r3, #0]
 8005e32:	e7f0      	b.n	8005e16 <__cvt+0xa6>

08005e34 <__exponent>:
 8005e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e36:	4603      	mov	r3, r0
 8005e38:	2900      	cmp	r1, #0
 8005e3a:	bfb8      	it	lt
 8005e3c:	4249      	neglt	r1, r1
 8005e3e:	f803 2b02 	strb.w	r2, [r3], #2
 8005e42:	bfb4      	ite	lt
 8005e44:	222d      	movlt	r2, #45	; 0x2d
 8005e46:	222b      	movge	r2, #43	; 0x2b
 8005e48:	2909      	cmp	r1, #9
 8005e4a:	7042      	strb	r2, [r0, #1]
 8005e4c:	dd2a      	ble.n	8005ea4 <__exponent+0x70>
 8005e4e:	f10d 0207 	add.w	r2, sp, #7
 8005e52:	4617      	mov	r7, r2
 8005e54:	260a      	movs	r6, #10
 8005e56:	4694      	mov	ip, r2
 8005e58:	fb91 f5f6 	sdiv	r5, r1, r6
 8005e5c:	fb06 1415 	mls	r4, r6, r5, r1
 8005e60:	3430      	adds	r4, #48	; 0x30
 8005e62:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005e66:	460c      	mov	r4, r1
 8005e68:	2c63      	cmp	r4, #99	; 0x63
 8005e6a:	f102 32ff 	add.w	r2, r2, #4294967295
 8005e6e:	4629      	mov	r1, r5
 8005e70:	dcf1      	bgt.n	8005e56 <__exponent+0x22>
 8005e72:	3130      	adds	r1, #48	; 0x30
 8005e74:	f1ac 0402 	sub.w	r4, ip, #2
 8005e78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005e7c:	1c41      	adds	r1, r0, #1
 8005e7e:	4622      	mov	r2, r4
 8005e80:	42ba      	cmp	r2, r7
 8005e82:	d30a      	bcc.n	8005e9a <__exponent+0x66>
 8005e84:	f10d 0209 	add.w	r2, sp, #9
 8005e88:	eba2 020c 	sub.w	r2, r2, ip
 8005e8c:	42bc      	cmp	r4, r7
 8005e8e:	bf88      	it	hi
 8005e90:	2200      	movhi	r2, #0
 8005e92:	4413      	add	r3, r2
 8005e94:	1a18      	subs	r0, r3, r0
 8005e96:	b003      	add	sp, #12
 8005e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e9a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005e9e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005ea2:	e7ed      	b.n	8005e80 <__exponent+0x4c>
 8005ea4:	2330      	movs	r3, #48	; 0x30
 8005ea6:	3130      	adds	r1, #48	; 0x30
 8005ea8:	7083      	strb	r3, [r0, #2]
 8005eaa:	70c1      	strb	r1, [r0, #3]
 8005eac:	1d03      	adds	r3, r0, #4
 8005eae:	e7f1      	b.n	8005e94 <__exponent+0x60>

08005eb0 <_printf_float>:
 8005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	ed2d 8b02 	vpush	{d8}
 8005eb8:	b08d      	sub	sp, #52	; 0x34
 8005eba:	460c      	mov	r4, r1
 8005ebc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ec0:	4616      	mov	r6, r2
 8005ec2:	461f      	mov	r7, r3
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	f000 fce7 	bl	8006898 <_localeconv_r>
 8005eca:	f8d0 a000 	ldr.w	sl, [r0]
 8005ece:	4650      	mov	r0, sl
 8005ed0:	f7fa f9ce 	bl	8000270 <strlen>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	9305      	str	r3, [sp, #20]
 8005edc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ee0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ee4:	3307      	adds	r3, #7
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	f103 0208 	add.w	r2, r3, #8
 8005eee:	f8c8 2000 	str.w	r2, [r8]
 8005ef2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ef6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005efa:	9307      	str	r3, [sp, #28]
 8005efc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f00:	ee08 0a10 	vmov	s16, r0
 8005f04:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f0c:	4b9e      	ldr	r3, [pc, #632]	; (8006188 <_printf_float+0x2d8>)
 8005f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f12:	f7fa fe0b 	bl	8000b2c <__aeabi_dcmpun>
 8005f16:	bb88      	cbnz	r0, 8005f7c <_printf_float+0xcc>
 8005f18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f1c:	4b9a      	ldr	r3, [pc, #616]	; (8006188 <_printf_float+0x2d8>)
 8005f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f22:	f7fa fde5 	bl	8000af0 <__aeabi_dcmple>
 8005f26:	bb48      	cbnz	r0, 8005f7c <_printf_float+0xcc>
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	4640      	mov	r0, r8
 8005f2e:	4649      	mov	r1, r9
 8005f30:	f7fa fdd4 	bl	8000adc <__aeabi_dcmplt>
 8005f34:	b110      	cbz	r0, 8005f3c <_printf_float+0x8c>
 8005f36:	232d      	movs	r3, #45	; 0x2d
 8005f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f3c:	4a93      	ldr	r2, [pc, #588]	; (800618c <_printf_float+0x2dc>)
 8005f3e:	4b94      	ldr	r3, [pc, #592]	; (8006190 <_printf_float+0x2e0>)
 8005f40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f44:	bf94      	ite	ls
 8005f46:	4690      	movls	r8, r2
 8005f48:	4698      	movhi	r8, r3
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	6123      	str	r3, [r4, #16]
 8005f4e:	9b05      	ldr	r3, [sp, #20]
 8005f50:	f023 0304 	bic.w	r3, r3, #4
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	f04f 0900 	mov.w	r9, #0
 8005f5a:	9700      	str	r7, [sp, #0]
 8005f5c:	4633      	mov	r3, r6
 8005f5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f60:	4621      	mov	r1, r4
 8005f62:	4628      	mov	r0, r5
 8005f64:	f000 f9da 	bl	800631c <_printf_common>
 8005f68:	3001      	adds	r0, #1
 8005f6a:	f040 8090 	bne.w	800608e <_printf_float+0x1de>
 8005f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f72:	b00d      	add	sp, #52	; 0x34
 8005f74:	ecbd 8b02 	vpop	{d8}
 8005f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7c:	4642      	mov	r2, r8
 8005f7e:	464b      	mov	r3, r9
 8005f80:	4640      	mov	r0, r8
 8005f82:	4649      	mov	r1, r9
 8005f84:	f7fa fdd2 	bl	8000b2c <__aeabi_dcmpun>
 8005f88:	b140      	cbz	r0, 8005f9c <_printf_float+0xec>
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bfbc      	itt	lt
 8005f90:	232d      	movlt	r3, #45	; 0x2d
 8005f92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f96:	4a7f      	ldr	r2, [pc, #508]	; (8006194 <_printf_float+0x2e4>)
 8005f98:	4b7f      	ldr	r3, [pc, #508]	; (8006198 <_printf_float+0x2e8>)
 8005f9a:	e7d1      	b.n	8005f40 <_printf_float+0x90>
 8005f9c:	6863      	ldr	r3, [r4, #4]
 8005f9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005fa2:	9206      	str	r2, [sp, #24]
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	d13f      	bne.n	8006028 <_printf_float+0x178>
 8005fa8:	2306      	movs	r3, #6
 8005faa:	6063      	str	r3, [r4, #4]
 8005fac:	9b05      	ldr	r3, [sp, #20]
 8005fae:	6861      	ldr	r1, [r4, #4]
 8005fb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9303      	str	r3, [sp, #12]
 8005fb8:	ab0a      	add	r3, sp, #40	; 0x28
 8005fba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005fbe:	ab09      	add	r3, sp, #36	; 0x24
 8005fc0:	ec49 8b10 	vmov	d0, r8, r9
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	6022      	str	r2, [r4, #0]
 8005fc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005fcc:	4628      	mov	r0, r5
 8005fce:	f7ff fecf 	bl	8005d70 <__cvt>
 8005fd2:	9b06      	ldr	r3, [sp, #24]
 8005fd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fd6:	2b47      	cmp	r3, #71	; 0x47
 8005fd8:	4680      	mov	r8, r0
 8005fda:	d108      	bne.n	8005fee <_printf_float+0x13e>
 8005fdc:	1cc8      	adds	r0, r1, #3
 8005fde:	db02      	blt.n	8005fe6 <_printf_float+0x136>
 8005fe0:	6863      	ldr	r3, [r4, #4]
 8005fe2:	4299      	cmp	r1, r3
 8005fe4:	dd41      	ble.n	800606a <_printf_float+0x1ba>
 8005fe6:	f1ab 0302 	sub.w	r3, fp, #2
 8005fea:	fa5f fb83 	uxtb.w	fp, r3
 8005fee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ff2:	d820      	bhi.n	8006036 <_printf_float+0x186>
 8005ff4:	3901      	subs	r1, #1
 8005ff6:	465a      	mov	r2, fp
 8005ff8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ffc:	9109      	str	r1, [sp, #36]	; 0x24
 8005ffe:	f7ff ff19 	bl	8005e34 <__exponent>
 8006002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006004:	1813      	adds	r3, r2, r0
 8006006:	2a01      	cmp	r2, #1
 8006008:	4681      	mov	r9, r0
 800600a:	6123      	str	r3, [r4, #16]
 800600c:	dc02      	bgt.n	8006014 <_printf_float+0x164>
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	07d2      	lsls	r2, r2, #31
 8006012:	d501      	bpl.n	8006018 <_printf_float+0x168>
 8006014:	3301      	adds	r3, #1
 8006016:	6123      	str	r3, [r4, #16]
 8006018:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800601c:	2b00      	cmp	r3, #0
 800601e:	d09c      	beq.n	8005f5a <_printf_float+0xaa>
 8006020:	232d      	movs	r3, #45	; 0x2d
 8006022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006026:	e798      	b.n	8005f5a <_printf_float+0xaa>
 8006028:	9a06      	ldr	r2, [sp, #24]
 800602a:	2a47      	cmp	r2, #71	; 0x47
 800602c:	d1be      	bne.n	8005fac <_printf_float+0xfc>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1bc      	bne.n	8005fac <_printf_float+0xfc>
 8006032:	2301      	movs	r3, #1
 8006034:	e7b9      	b.n	8005faa <_printf_float+0xfa>
 8006036:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800603a:	d118      	bne.n	800606e <_printf_float+0x1be>
 800603c:	2900      	cmp	r1, #0
 800603e:	6863      	ldr	r3, [r4, #4]
 8006040:	dd0b      	ble.n	800605a <_printf_float+0x1aa>
 8006042:	6121      	str	r1, [r4, #16]
 8006044:	b913      	cbnz	r3, 800604c <_printf_float+0x19c>
 8006046:	6822      	ldr	r2, [r4, #0]
 8006048:	07d0      	lsls	r0, r2, #31
 800604a:	d502      	bpl.n	8006052 <_printf_float+0x1a2>
 800604c:	3301      	adds	r3, #1
 800604e:	440b      	add	r3, r1
 8006050:	6123      	str	r3, [r4, #16]
 8006052:	65a1      	str	r1, [r4, #88]	; 0x58
 8006054:	f04f 0900 	mov.w	r9, #0
 8006058:	e7de      	b.n	8006018 <_printf_float+0x168>
 800605a:	b913      	cbnz	r3, 8006062 <_printf_float+0x1b2>
 800605c:	6822      	ldr	r2, [r4, #0]
 800605e:	07d2      	lsls	r2, r2, #31
 8006060:	d501      	bpl.n	8006066 <_printf_float+0x1b6>
 8006062:	3302      	adds	r3, #2
 8006064:	e7f4      	b.n	8006050 <_printf_float+0x1a0>
 8006066:	2301      	movs	r3, #1
 8006068:	e7f2      	b.n	8006050 <_printf_float+0x1a0>
 800606a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800606e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006070:	4299      	cmp	r1, r3
 8006072:	db05      	blt.n	8006080 <_printf_float+0x1d0>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	6121      	str	r1, [r4, #16]
 8006078:	07d8      	lsls	r0, r3, #31
 800607a:	d5ea      	bpl.n	8006052 <_printf_float+0x1a2>
 800607c:	1c4b      	adds	r3, r1, #1
 800607e:	e7e7      	b.n	8006050 <_printf_float+0x1a0>
 8006080:	2900      	cmp	r1, #0
 8006082:	bfd4      	ite	le
 8006084:	f1c1 0202 	rsble	r2, r1, #2
 8006088:	2201      	movgt	r2, #1
 800608a:	4413      	add	r3, r2
 800608c:	e7e0      	b.n	8006050 <_printf_float+0x1a0>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	055a      	lsls	r2, r3, #21
 8006092:	d407      	bmi.n	80060a4 <_printf_float+0x1f4>
 8006094:	6923      	ldr	r3, [r4, #16]
 8006096:	4642      	mov	r2, r8
 8006098:	4631      	mov	r1, r6
 800609a:	4628      	mov	r0, r5
 800609c:	47b8      	blx	r7
 800609e:	3001      	adds	r0, #1
 80060a0:	d12c      	bne.n	80060fc <_printf_float+0x24c>
 80060a2:	e764      	b.n	8005f6e <_printf_float+0xbe>
 80060a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060a8:	f240 80e0 	bls.w	800626c <_printf_float+0x3bc>
 80060ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060b0:	2200      	movs	r2, #0
 80060b2:	2300      	movs	r3, #0
 80060b4:	f7fa fd08 	bl	8000ac8 <__aeabi_dcmpeq>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d034      	beq.n	8006126 <_printf_float+0x276>
 80060bc:	4a37      	ldr	r2, [pc, #220]	; (800619c <_printf_float+0x2ec>)
 80060be:	2301      	movs	r3, #1
 80060c0:	4631      	mov	r1, r6
 80060c2:	4628      	mov	r0, r5
 80060c4:	47b8      	blx	r7
 80060c6:	3001      	adds	r0, #1
 80060c8:	f43f af51 	beq.w	8005f6e <_printf_float+0xbe>
 80060cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060d0:	429a      	cmp	r2, r3
 80060d2:	db02      	blt.n	80060da <_printf_float+0x22a>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	07d8      	lsls	r0, r3, #31
 80060d8:	d510      	bpl.n	80060fc <_printf_float+0x24c>
 80060da:	ee18 3a10 	vmov	r3, s16
 80060de:	4652      	mov	r2, sl
 80060e0:	4631      	mov	r1, r6
 80060e2:	4628      	mov	r0, r5
 80060e4:	47b8      	blx	r7
 80060e6:	3001      	adds	r0, #1
 80060e8:	f43f af41 	beq.w	8005f6e <_printf_float+0xbe>
 80060ec:	f04f 0800 	mov.w	r8, #0
 80060f0:	f104 091a 	add.w	r9, r4, #26
 80060f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f6:	3b01      	subs	r3, #1
 80060f8:	4543      	cmp	r3, r8
 80060fa:	dc09      	bgt.n	8006110 <_printf_float+0x260>
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	079b      	lsls	r3, r3, #30
 8006100:	f100 8107 	bmi.w	8006312 <_printf_float+0x462>
 8006104:	68e0      	ldr	r0, [r4, #12]
 8006106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006108:	4298      	cmp	r0, r3
 800610a:	bfb8      	it	lt
 800610c:	4618      	movlt	r0, r3
 800610e:	e730      	b.n	8005f72 <_printf_float+0xc2>
 8006110:	2301      	movs	r3, #1
 8006112:	464a      	mov	r2, r9
 8006114:	4631      	mov	r1, r6
 8006116:	4628      	mov	r0, r5
 8006118:	47b8      	blx	r7
 800611a:	3001      	adds	r0, #1
 800611c:	f43f af27 	beq.w	8005f6e <_printf_float+0xbe>
 8006120:	f108 0801 	add.w	r8, r8, #1
 8006124:	e7e6      	b.n	80060f4 <_printf_float+0x244>
 8006126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006128:	2b00      	cmp	r3, #0
 800612a:	dc39      	bgt.n	80061a0 <_printf_float+0x2f0>
 800612c:	4a1b      	ldr	r2, [pc, #108]	; (800619c <_printf_float+0x2ec>)
 800612e:	2301      	movs	r3, #1
 8006130:	4631      	mov	r1, r6
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	f43f af19 	beq.w	8005f6e <_printf_float+0xbe>
 800613c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006140:	4313      	orrs	r3, r2
 8006142:	d102      	bne.n	800614a <_printf_float+0x29a>
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	07d9      	lsls	r1, r3, #31
 8006148:	d5d8      	bpl.n	80060fc <_printf_float+0x24c>
 800614a:	ee18 3a10 	vmov	r3, s16
 800614e:	4652      	mov	r2, sl
 8006150:	4631      	mov	r1, r6
 8006152:	4628      	mov	r0, r5
 8006154:	47b8      	blx	r7
 8006156:	3001      	adds	r0, #1
 8006158:	f43f af09 	beq.w	8005f6e <_printf_float+0xbe>
 800615c:	f04f 0900 	mov.w	r9, #0
 8006160:	f104 0a1a 	add.w	sl, r4, #26
 8006164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006166:	425b      	negs	r3, r3
 8006168:	454b      	cmp	r3, r9
 800616a:	dc01      	bgt.n	8006170 <_printf_float+0x2c0>
 800616c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800616e:	e792      	b.n	8006096 <_printf_float+0x1e6>
 8006170:	2301      	movs	r3, #1
 8006172:	4652      	mov	r2, sl
 8006174:	4631      	mov	r1, r6
 8006176:	4628      	mov	r0, r5
 8006178:	47b8      	blx	r7
 800617a:	3001      	adds	r0, #1
 800617c:	f43f aef7 	beq.w	8005f6e <_printf_float+0xbe>
 8006180:	f109 0901 	add.w	r9, r9, #1
 8006184:	e7ee      	b.n	8006164 <_printf_float+0x2b4>
 8006186:	bf00      	nop
 8006188:	7fefffff 	.word	0x7fefffff
 800618c:	08009480 	.word	0x08009480
 8006190:	08009484 	.word	0x08009484
 8006194:	08009488 	.word	0x08009488
 8006198:	0800948c 	.word	0x0800948c
 800619c:	08009490 	.word	0x08009490
 80061a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061a4:	429a      	cmp	r2, r3
 80061a6:	bfa8      	it	ge
 80061a8:	461a      	movge	r2, r3
 80061aa:	2a00      	cmp	r2, #0
 80061ac:	4691      	mov	r9, r2
 80061ae:	dc37      	bgt.n	8006220 <_printf_float+0x370>
 80061b0:	f04f 0b00 	mov.w	fp, #0
 80061b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061b8:	f104 021a 	add.w	r2, r4, #26
 80061bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061be:	9305      	str	r3, [sp, #20]
 80061c0:	eba3 0309 	sub.w	r3, r3, r9
 80061c4:	455b      	cmp	r3, fp
 80061c6:	dc33      	bgt.n	8006230 <_printf_float+0x380>
 80061c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061cc:	429a      	cmp	r2, r3
 80061ce:	db3b      	blt.n	8006248 <_printf_float+0x398>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	07da      	lsls	r2, r3, #31
 80061d4:	d438      	bmi.n	8006248 <_printf_float+0x398>
 80061d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80061da:	eba2 0903 	sub.w	r9, r2, r3
 80061de:	9b05      	ldr	r3, [sp, #20]
 80061e0:	1ad2      	subs	r2, r2, r3
 80061e2:	4591      	cmp	r9, r2
 80061e4:	bfa8      	it	ge
 80061e6:	4691      	movge	r9, r2
 80061e8:	f1b9 0f00 	cmp.w	r9, #0
 80061ec:	dc35      	bgt.n	800625a <_printf_float+0x3aa>
 80061ee:	f04f 0800 	mov.w	r8, #0
 80061f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061f6:	f104 0a1a 	add.w	sl, r4, #26
 80061fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	eba3 0309 	sub.w	r3, r3, r9
 8006204:	4543      	cmp	r3, r8
 8006206:	f77f af79 	ble.w	80060fc <_printf_float+0x24c>
 800620a:	2301      	movs	r3, #1
 800620c:	4652      	mov	r2, sl
 800620e:	4631      	mov	r1, r6
 8006210:	4628      	mov	r0, r5
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	f43f aeaa 	beq.w	8005f6e <_printf_float+0xbe>
 800621a:	f108 0801 	add.w	r8, r8, #1
 800621e:	e7ec      	b.n	80061fa <_printf_float+0x34a>
 8006220:	4613      	mov	r3, r2
 8006222:	4631      	mov	r1, r6
 8006224:	4642      	mov	r2, r8
 8006226:	4628      	mov	r0, r5
 8006228:	47b8      	blx	r7
 800622a:	3001      	adds	r0, #1
 800622c:	d1c0      	bne.n	80061b0 <_printf_float+0x300>
 800622e:	e69e      	b.n	8005f6e <_printf_float+0xbe>
 8006230:	2301      	movs	r3, #1
 8006232:	4631      	mov	r1, r6
 8006234:	4628      	mov	r0, r5
 8006236:	9205      	str	r2, [sp, #20]
 8006238:	47b8      	blx	r7
 800623a:	3001      	adds	r0, #1
 800623c:	f43f ae97 	beq.w	8005f6e <_printf_float+0xbe>
 8006240:	9a05      	ldr	r2, [sp, #20]
 8006242:	f10b 0b01 	add.w	fp, fp, #1
 8006246:	e7b9      	b.n	80061bc <_printf_float+0x30c>
 8006248:	ee18 3a10 	vmov	r3, s16
 800624c:	4652      	mov	r2, sl
 800624e:	4631      	mov	r1, r6
 8006250:	4628      	mov	r0, r5
 8006252:	47b8      	blx	r7
 8006254:	3001      	adds	r0, #1
 8006256:	d1be      	bne.n	80061d6 <_printf_float+0x326>
 8006258:	e689      	b.n	8005f6e <_printf_float+0xbe>
 800625a:	9a05      	ldr	r2, [sp, #20]
 800625c:	464b      	mov	r3, r9
 800625e:	4442      	add	r2, r8
 8006260:	4631      	mov	r1, r6
 8006262:	4628      	mov	r0, r5
 8006264:	47b8      	blx	r7
 8006266:	3001      	adds	r0, #1
 8006268:	d1c1      	bne.n	80061ee <_printf_float+0x33e>
 800626a:	e680      	b.n	8005f6e <_printf_float+0xbe>
 800626c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800626e:	2a01      	cmp	r2, #1
 8006270:	dc01      	bgt.n	8006276 <_printf_float+0x3c6>
 8006272:	07db      	lsls	r3, r3, #31
 8006274:	d53a      	bpl.n	80062ec <_printf_float+0x43c>
 8006276:	2301      	movs	r3, #1
 8006278:	4642      	mov	r2, r8
 800627a:	4631      	mov	r1, r6
 800627c:	4628      	mov	r0, r5
 800627e:	47b8      	blx	r7
 8006280:	3001      	adds	r0, #1
 8006282:	f43f ae74 	beq.w	8005f6e <_printf_float+0xbe>
 8006286:	ee18 3a10 	vmov	r3, s16
 800628a:	4652      	mov	r2, sl
 800628c:	4631      	mov	r1, r6
 800628e:	4628      	mov	r0, r5
 8006290:	47b8      	blx	r7
 8006292:	3001      	adds	r0, #1
 8006294:	f43f ae6b 	beq.w	8005f6e <_printf_float+0xbe>
 8006298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800629c:	2200      	movs	r2, #0
 800629e:	2300      	movs	r3, #0
 80062a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80062a4:	f7fa fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 80062a8:	b9d8      	cbnz	r0, 80062e2 <_printf_float+0x432>
 80062aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80062ae:	f108 0201 	add.w	r2, r8, #1
 80062b2:	4631      	mov	r1, r6
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b8      	blx	r7
 80062b8:	3001      	adds	r0, #1
 80062ba:	d10e      	bne.n	80062da <_printf_float+0x42a>
 80062bc:	e657      	b.n	8005f6e <_printf_float+0xbe>
 80062be:	2301      	movs	r3, #1
 80062c0:	4652      	mov	r2, sl
 80062c2:	4631      	mov	r1, r6
 80062c4:	4628      	mov	r0, r5
 80062c6:	47b8      	blx	r7
 80062c8:	3001      	adds	r0, #1
 80062ca:	f43f ae50 	beq.w	8005f6e <_printf_float+0xbe>
 80062ce:	f108 0801 	add.w	r8, r8, #1
 80062d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062d4:	3b01      	subs	r3, #1
 80062d6:	4543      	cmp	r3, r8
 80062d8:	dcf1      	bgt.n	80062be <_printf_float+0x40e>
 80062da:	464b      	mov	r3, r9
 80062dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062e0:	e6da      	b.n	8006098 <_printf_float+0x1e8>
 80062e2:	f04f 0800 	mov.w	r8, #0
 80062e6:	f104 0a1a 	add.w	sl, r4, #26
 80062ea:	e7f2      	b.n	80062d2 <_printf_float+0x422>
 80062ec:	2301      	movs	r3, #1
 80062ee:	4642      	mov	r2, r8
 80062f0:	e7df      	b.n	80062b2 <_printf_float+0x402>
 80062f2:	2301      	movs	r3, #1
 80062f4:	464a      	mov	r2, r9
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b8      	blx	r7
 80062fc:	3001      	adds	r0, #1
 80062fe:	f43f ae36 	beq.w	8005f6e <_printf_float+0xbe>
 8006302:	f108 0801 	add.w	r8, r8, #1
 8006306:	68e3      	ldr	r3, [r4, #12]
 8006308:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800630a:	1a5b      	subs	r3, r3, r1
 800630c:	4543      	cmp	r3, r8
 800630e:	dcf0      	bgt.n	80062f2 <_printf_float+0x442>
 8006310:	e6f8      	b.n	8006104 <_printf_float+0x254>
 8006312:	f04f 0800 	mov.w	r8, #0
 8006316:	f104 0919 	add.w	r9, r4, #25
 800631a:	e7f4      	b.n	8006306 <_printf_float+0x456>

0800631c <_printf_common>:
 800631c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006320:	4616      	mov	r6, r2
 8006322:	4699      	mov	r9, r3
 8006324:	688a      	ldr	r2, [r1, #8]
 8006326:	690b      	ldr	r3, [r1, #16]
 8006328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800632c:	4293      	cmp	r3, r2
 800632e:	bfb8      	it	lt
 8006330:	4613      	movlt	r3, r2
 8006332:	6033      	str	r3, [r6, #0]
 8006334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006338:	4607      	mov	r7, r0
 800633a:	460c      	mov	r4, r1
 800633c:	b10a      	cbz	r2, 8006342 <_printf_common+0x26>
 800633e:	3301      	adds	r3, #1
 8006340:	6033      	str	r3, [r6, #0]
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	0699      	lsls	r1, r3, #26
 8006346:	bf42      	ittt	mi
 8006348:	6833      	ldrmi	r3, [r6, #0]
 800634a:	3302      	addmi	r3, #2
 800634c:	6033      	strmi	r3, [r6, #0]
 800634e:	6825      	ldr	r5, [r4, #0]
 8006350:	f015 0506 	ands.w	r5, r5, #6
 8006354:	d106      	bne.n	8006364 <_printf_common+0x48>
 8006356:	f104 0a19 	add.w	sl, r4, #25
 800635a:	68e3      	ldr	r3, [r4, #12]
 800635c:	6832      	ldr	r2, [r6, #0]
 800635e:	1a9b      	subs	r3, r3, r2
 8006360:	42ab      	cmp	r3, r5
 8006362:	dc26      	bgt.n	80063b2 <_printf_common+0x96>
 8006364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006368:	1e13      	subs	r3, r2, #0
 800636a:	6822      	ldr	r2, [r4, #0]
 800636c:	bf18      	it	ne
 800636e:	2301      	movne	r3, #1
 8006370:	0692      	lsls	r2, r2, #26
 8006372:	d42b      	bmi.n	80063cc <_printf_common+0xb0>
 8006374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006378:	4649      	mov	r1, r9
 800637a:	4638      	mov	r0, r7
 800637c:	47c0      	blx	r8
 800637e:	3001      	adds	r0, #1
 8006380:	d01e      	beq.n	80063c0 <_printf_common+0xa4>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	6922      	ldr	r2, [r4, #16]
 8006386:	f003 0306 	and.w	r3, r3, #6
 800638a:	2b04      	cmp	r3, #4
 800638c:	bf02      	ittt	eq
 800638e:	68e5      	ldreq	r5, [r4, #12]
 8006390:	6833      	ldreq	r3, [r6, #0]
 8006392:	1aed      	subeq	r5, r5, r3
 8006394:	68a3      	ldr	r3, [r4, #8]
 8006396:	bf0c      	ite	eq
 8006398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800639c:	2500      	movne	r5, #0
 800639e:	4293      	cmp	r3, r2
 80063a0:	bfc4      	itt	gt
 80063a2:	1a9b      	subgt	r3, r3, r2
 80063a4:	18ed      	addgt	r5, r5, r3
 80063a6:	2600      	movs	r6, #0
 80063a8:	341a      	adds	r4, #26
 80063aa:	42b5      	cmp	r5, r6
 80063ac:	d11a      	bne.n	80063e4 <_printf_common+0xc8>
 80063ae:	2000      	movs	r0, #0
 80063b0:	e008      	b.n	80063c4 <_printf_common+0xa8>
 80063b2:	2301      	movs	r3, #1
 80063b4:	4652      	mov	r2, sl
 80063b6:	4649      	mov	r1, r9
 80063b8:	4638      	mov	r0, r7
 80063ba:	47c0      	blx	r8
 80063bc:	3001      	adds	r0, #1
 80063be:	d103      	bne.n	80063c8 <_printf_common+0xac>
 80063c0:	f04f 30ff 	mov.w	r0, #4294967295
 80063c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c8:	3501      	adds	r5, #1
 80063ca:	e7c6      	b.n	800635a <_printf_common+0x3e>
 80063cc:	18e1      	adds	r1, r4, r3
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	2030      	movs	r0, #48	; 0x30
 80063d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063d6:	4422      	add	r2, r4
 80063d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063e0:	3302      	adds	r3, #2
 80063e2:	e7c7      	b.n	8006374 <_printf_common+0x58>
 80063e4:	2301      	movs	r3, #1
 80063e6:	4622      	mov	r2, r4
 80063e8:	4649      	mov	r1, r9
 80063ea:	4638      	mov	r0, r7
 80063ec:	47c0      	blx	r8
 80063ee:	3001      	adds	r0, #1
 80063f0:	d0e6      	beq.n	80063c0 <_printf_common+0xa4>
 80063f2:	3601      	adds	r6, #1
 80063f4:	e7d9      	b.n	80063aa <_printf_common+0x8e>
	...

080063f8 <_printf_i>:
 80063f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063fc:	7e0f      	ldrb	r7, [r1, #24]
 80063fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006400:	2f78      	cmp	r7, #120	; 0x78
 8006402:	4691      	mov	r9, r2
 8006404:	4680      	mov	r8, r0
 8006406:	460c      	mov	r4, r1
 8006408:	469a      	mov	sl, r3
 800640a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800640e:	d807      	bhi.n	8006420 <_printf_i+0x28>
 8006410:	2f62      	cmp	r7, #98	; 0x62
 8006412:	d80a      	bhi.n	800642a <_printf_i+0x32>
 8006414:	2f00      	cmp	r7, #0
 8006416:	f000 80d4 	beq.w	80065c2 <_printf_i+0x1ca>
 800641a:	2f58      	cmp	r7, #88	; 0x58
 800641c:	f000 80c0 	beq.w	80065a0 <_printf_i+0x1a8>
 8006420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006428:	e03a      	b.n	80064a0 <_printf_i+0xa8>
 800642a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800642e:	2b15      	cmp	r3, #21
 8006430:	d8f6      	bhi.n	8006420 <_printf_i+0x28>
 8006432:	a101      	add	r1, pc, #4	; (adr r1, 8006438 <_printf_i+0x40>)
 8006434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006438:	08006491 	.word	0x08006491
 800643c:	080064a5 	.word	0x080064a5
 8006440:	08006421 	.word	0x08006421
 8006444:	08006421 	.word	0x08006421
 8006448:	08006421 	.word	0x08006421
 800644c:	08006421 	.word	0x08006421
 8006450:	080064a5 	.word	0x080064a5
 8006454:	08006421 	.word	0x08006421
 8006458:	08006421 	.word	0x08006421
 800645c:	08006421 	.word	0x08006421
 8006460:	08006421 	.word	0x08006421
 8006464:	080065a9 	.word	0x080065a9
 8006468:	080064d1 	.word	0x080064d1
 800646c:	08006563 	.word	0x08006563
 8006470:	08006421 	.word	0x08006421
 8006474:	08006421 	.word	0x08006421
 8006478:	080065cb 	.word	0x080065cb
 800647c:	08006421 	.word	0x08006421
 8006480:	080064d1 	.word	0x080064d1
 8006484:	08006421 	.word	0x08006421
 8006488:	08006421 	.word	0x08006421
 800648c:	0800656b 	.word	0x0800656b
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	1d1a      	adds	r2, r3, #4
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	602a      	str	r2, [r5, #0]
 8006498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800649c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064a0:	2301      	movs	r3, #1
 80064a2:	e09f      	b.n	80065e4 <_printf_i+0x1ec>
 80064a4:	6820      	ldr	r0, [r4, #0]
 80064a6:	682b      	ldr	r3, [r5, #0]
 80064a8:	0607      	lsls	r7, r0, #24
 80064aa:	f103 0104 	add.w	r1, r3, #4
 80064ae:	6029      	str	r1, [r5, #0]
 80064b0:	d501      	bpl.n	80064b6 <_printf_i+0xbe>
 80064b2:	681e      	ldr	r6, [r3, #0]
 80064b4:	e003      	b.n	80064be <_printf_i+0xc6>
 80064b6:	0646      	lsls	r6, r0, #25
 80064b8:	d5fb      	bpl.n	80064b2 <_printf_i+0xba>
 80064ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80064be:	2e00      	cmp	r6, #0
 80064c0:	da03      	bge.n	80064ca <_printf_i+0xd2>
 80064c2:	232d      	movs	r3, #45	; 0x2d
 80064c4:	4276      	negs	r6, r6
 80064c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ca:	485a      	ldr	r0, [pc, #360]	; (8006634 <_printf_i+0x23c>)
 80064cc:	230a      	movs	r3, #10
 80064ce:	e012      	b.n	80064f6 <_printf_i+0xfe>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	6820      	ldr	r0, [r4, #0]
 80064d4:	1d19      	adds	r1, r3, #4
 80064d6:	6029      	str	r1, [r5, #0]
 80064d8:	0605      	lsls	r5, r0, #24
 80064da:	d501      	bpl.n	80064e0 <_printf_i+0xe8>
 80064dc:	681e      	ldr	r6, [r3, #0]
 80064de:	e002      	b.n	80064e6 <_printf_i+0xee>
 80064e0:	0641      	lsls	r1, r0, #25
 80064e2:	d5fb      	bpl.n	80064dc <_printf_i+0xe4>
 80064e4:	881e      	ldrh	r6, [r3, #0]
 80064e6:	4853      	ldr	r0, [pc, #332]	; (8006634 <_printf_i+0x23c>)
 80064e8:	2f6f      	cmp	r7, #111	; 0x6f
 80064ea:	bf0c      	ite	eq
 80064ec:	2308      	moveq	r3, #8
 80064ee:	230a      	movne	r3, #10
 80064f0:	2100      	movs	r1, #0
 80064f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064f6:	6865      	ldr	r5, [r4, #4]
 80064f8:	60a5      	str	r5, [r4, #8]
 80064fa:	2d00      	cmp	r5, #0
 80064fc:	bfa2      	ittt	ge
 80064fe:	6821      	ldrge	r1, [r4, #0]
 8006500:	f021 0104 	bicge.w	r1, r1, #4
 8006504:	6021      	strge	r1, [r4, #0]
 8006506:	b90e      	cbnz	r6, 800650c <_printf_i+0x114>
 8006508:	2d00      	cmp	r5, #0
 800650a:	d04b      	beq.n	80065a4 <_printf_i+0x1ac>
 800650c:	4615      	mov	r5, r2
 800650e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006512:	fb03 6711 	mls	r7, r3, r1, r6
 8006516:	5dc7      	ldrb	r7, [r0, r7]
 8006518:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800651c:	4637      	mov	r7, r6
 800651e:	42bb      	cmp	r3, r7
 8006520:	460e      	mov	r6, r1
 8006522:	d9f4      	bls.n	800650e <_printf_i+0x116>
 8006524:	2b08      	cmp	r3, #8
 8006526:	d10b      	bne.n	8006540 <_printf_i+0x148>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	07de      	lsls	r6, r3, #31
 800652c:	d508      	bpl.n	8006540 <_printf_i+0x148>
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	6861      	ldr	r1, [r4, #4]
 8006532:	4299      	cmp	r1, r3
 8006534:	bfde      	ittt	le
 8006536:	2330      	movle	r3, #48	; 0x30
 8006538:	f805 3c01 	strble.w	r3, [r5, #-1]
 800653c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006540:	1b52      	subs	r2, r2, r5
 8006542:	6122      	str	r2, [r4, #16]
 8006544:	f8cd a000 	str.w	sl, [sp]
 8006548:	464b      	mov	r3, r9
 800654a:	aa03      	add	r2, sp, #12
 800654c:	4621      	mov	r1, r4
 800654e:	4640      	mov	r0, r8
 8006550:	f7ff fee4 	bl	800631c <_printf_common>
 8006554:	3001      	adds	r0, #1
 8006556:	d14a      	bne.n	80065ee <_printf_i+0x1f6>
 8006558:	f04f 30ff 	mov.w	r0, #4294967295
 800655c:	b004      	add	sp, #16
 800655e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	f043 0320 	orr.w	r3, r3, #32
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	4833      	ldr	r0, [pc, #204]	; (8006638 <_printf_i+0x240>)
 800656c:	2778      	movs	r7, #120	; 0x78
 800656e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	6829      	ldr	r1, [r5, #0]
 8006576:	061f      	lsls	r7, r3, #24
 8006578:	f851 6b04 	ldr.w	r6, [r1], #4
 800657c:	d402      	bmi.n	8006584 <_printf_i+0x18c>
 800657e:	065f      	lsls	r7, r3, #25
 8006580:	bf48      	it	mi
 8006582:	b2b6      	uxthmi	r6, r6
 8006584:	07df      	lsls	r7, r3, #31
 8006586:	bf48      	it	mi
 8006588:	f043 0320 	orrmi.w	r3, r3, #32
 800658c:	6029      	str	r1, [r5, #0]
 800658e:	bf48      	it	mi
 8006590:	6023      	strmi	r3, [r4, #0]
 8006592:	b91e      	cbnz	r6, 800659c <_printf_i+0x1a4>
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	f023 0320 	bic.w	r3, r3, #32
 800659a:	6023      	str	r3, [r4, #0]
 800659c:	2310      	movs	r3, #16
 800659e:	e7a7      	b.n	80064f0 <_printf_i+0xf8>
 80065a0:	4824      	ldr	r0, [pc, #144]	; (8006634 <_printf_i+0x23c>)
 80065a2:	e7e4      	b.n	800656e <_printf_i+0x176>
 80065a4:	4615      	mov	r5, r2
 80065a6:	e7bd      	b.n	8006524 <_printf_i+0x12c>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	6826      	ldr	r6, [r4, #0]
 80065ac:	6961      	ldr	r1, [r4, #20]
 80065ae:	1d18      	adds	r0, r3, #4
 80065b0:	6028      	str	r0, [r5, #0]
 80065b2:	0635      	lsls	r5, r6, #24
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	d501      	bpl.n	80065bc <_printf_i+0x1c4>
 80065b8:	6019      	str	r1, [r3, #0]
 80065ba:	e002      	b.n	80065c2 <_printf_i+0x1ca>
 80065bc:	0670      	lsls	r0, r6, #25
 80065be:	d5fb      	bpl.n	80065b8 <_printf_i+0x1c0>
 80065c0:	8019      	strh	r1, [r3, #0]
 80065c2:	2300      	movs	r3, #0
 80065c4:	6123      	str	r3, [r4, #16]
 80065c6:	4615      	mov	r5, r2
 80065c8:	e7bc      	b.n	8006544 <_printf_i+0x14c>
 80065ca:	682b      	ldr	r3, [r5, #0]
 80065cc:	1d1a      	adds	r2, r3, #4
 80065ce:	602a      	str	r2, [r5, #0]
 80065d0:	681d      	ldr	r5, [r3, #0]
 80065d2:	6862      	ldr	r2, [r4, #4]
 80065d4:	2100      	movs	r1, #0
 80065d6:	4628      	mov	r0, r5
 80065d8:	f7f9 fdfa 	bl	80001d0 <memchr>
 80065dc:	b108      	cbz	r0, 80065e2 <_printf_i+0x1ea>
 80065de:	1b40      	subs	r0, r0, r5
 80065e0:	6060      	str	r0, [r4, #4]
 80065e2:	6863      	ldr	r3, [r4, #4]
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	2300      	movs	r3, #0
 80065e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ec:	e7aa      	b.n	8006544 <_printf_i+0x14c>
 80065ee:	6923      	ldr	r3, [r4, #16]
 80065f0:	462a      	mov	r2, r5
 80065f2:	4649      	mov	r1, r9
 80065f4:	4640      	mov	r0, r8
 80065f6:	47d0      	blx	sl
 80065f8:	3001      	adds	r0, #1
 80065fa:	d0ad      	beq.n	8006558 <_printf_i+0x160>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	079b      	lsls	r3, r3, #30
 8006600:	d413      	bmi.n	800662a <_printf_i+0x232>
 8006602:	68e0      	ldr	r0, [r4, #12]
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	4298      	cmp	r0, r3
 8006608:	bfb8      	it	lt
 800660a:	4618      	movlt	r0, r3
 800660c:	e7a6      	b.n	800655c <_printf_i+0x164>
 800660e:	2301      	movs	r3, #1
 8006610:	4632      	mov	r2, r6
 8006612:	4649      	mov	r1, r9
 8006614:	4640      	mov	r0, r8
 8006616:	47d0      	blx	sl
 8006618:	3001      	adds	r0, #1
 800661a:	d09d      	beq.n	8006558 <_printf_i+0x160>
 800661c:	3501      	adds	r5, #1
 800661e:	68e3      	ldr	r3, [r4, #12]
 8006620:	9903      	ldr	r1, [sp, #12]
 8006622:	1a5b      	subs	r3, r3, r1
 8006624:	42ab      	cmp	r3, r5
 8006626:	dcf2      	bgt.n	800660e <_printf_i+0x216>
 8006628:	e7eb      	b.n	8006602 <_printf_i+0x20a>
 800662a:	2500      	movs	r5, #0
 800662c:	f104 0619 	add.w	r6, r4, #25
 8006630:	e7f5      	b.n	800661e <_printf_i+0x226>
 8006632:	bf00      	nop
 8006634:	08009492 	.word	0x08009492
 8006638:	080094a3 	.word	0x080094a3

0800663c <std>:
 800663c:	2300      	movs	r3, #0
 800663e:	b510      	push	{r4, lr}
 8006640:	4604      	mov	r4, r0
 8006642:	e9c0 3300 	strd	r3, r3, [r0]
 8006646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800664a:	6083      	str	r3, [r0, #8]
 800664c:	8181      	strh	r1, [r0, #12]
 800664e:	6643      	str	r3, [r0, #100]	; 0x64
 8006650:	81c2      	strh	r2, [r0, #14]
 8006652:	6183      	str	r3, [r0, #24]
 8006654:	4619      	mov	r1, r3
 8006656:	2208      	movs	r2, #8
 8006658:	305c      	adds	r0, #92	; 0x5c
 800665a:	f000 f902 	bl	8006862 <memset>
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <std+0x38>)
 8006660:	6263      	str	r3, [r4, #36]	; 0x24
 8006662:	4b05      	ldr	r3, [pc, #20]	; (8006678 <std+0x3c>)
 8006664:	62a3      	str	r3, [r4, #40]	; 0x28
 8006666:	4b05      	ldr	r3, [pc, #20]	; (800667c <std+0x40>)
 8006668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800666a:	4b05      	ldr	r3, [pc, #20]	; (8006680 <std+0x44>)
 800666c:	6224      	str	r4, [r4, #32]
 800666e:	6323      	str	r3, [r4, #48]	; 0x30
 8006670:	bd10      	pop	{r4, pc}
 8006672:	bf00      	nop
 8006674:	080067dd 	.word	0x080067dd
 8006678:	080067ff 	.word	0x080067ff
 800667c:	08006837 	.word	0x08006837
 8006680:	0800685b 	.word	0x0800685b

08006684 <stdio_exit_handler>:
 8006684:	4a02      	ldr	r2, [pc, #8]	; (8006690 <stdio_exit_handler+0xc>)
 8006686:	4903      	ldr	r1, [pc, #12]	; (8006694 <stdio_exit_handler+0x10>)
 8006688:	4803      	ldr	r0, [pc, #12]	; (8006698 <stdio_exit_handler+0x14>)
 800668a:	f000 b869 	b.w	8006760 <_fwalk_sglue>
 800668e:	bf00      	nop
 8006690:	2000000c 	.word	0x2000000c
 8006694:	08008ca9 	.word	0x08008ca9
 8006698:	20000184 	.word	0x20000184

0800669c <cleanup_stdio>:
 800669c:	6841      	ldr	r1, [r0, #4]
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <cleanup_stdio+0x34>)
 80066a0:	4299      	cmp	r1, r3
 80066a2:	b510      	push	{r4, lr}
 80066a4:	4604      	mov	r4, r0
 80066a6:	d001      	beq.n	80066ac <cleanup_stdio+0x10>
 80066a8:	f002 fafe 	bl	8008ca8 <_fflush_r>
 80066ac:	68a1      	ldr	r1, [r4, #8]
 80066ae:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <cleanup_stdio+0x38>)
 80066b0:	4299      	cmp	r1, r3
 80066b2:	d002      	beq.n	80066ba <cleanup_stdio+0x1e>
 80066b4:	4620      	mov	r0, r4
 80066b6:	f002 faf7 	bl	8008ca8 <_fflush_r>
 80066ba:	68e1      	ldr	r1, [r4, #12]
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <cleanup_stdio+0x3c>)
 80066be:	4299      	cmp	r1, r3
 80066c0:	d004      	beq.n	80066cc <cleanup_stdio+0x30>
 80066c2:	4620      	mov	r0, r4
 80066c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c8:	f002 baee 	b.w	8008ca8 <_fflush_r>
 80066cc:	bd10      	pop	{r4, pc}
 80066ce:	bf00      	nop
 80066d0:	20000444 	.word	0x20000444
 80066d4:	200004ac 	.word	0x200004ac
 80066d8:	20000514 	.word	0x20000514

080066dc <global_stdio_init.part.0>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	4b0b      	ldr	r3, [pc, #44]	; (800670c <global_stdio_init.part.0+0x30>)
 80066e0:	4c0b      	ldr	r4, [pc, #44]	; (8006710 <global_stdio_init.part.0+0x34>)
 80066e2:	4a0c      	ldr	r2, [pc, #48]	; (8006714 <global_stdio_init.part.0+0x38>)
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	4620      	mov	r0, r4
 80066e8:	2200      	movs	r2, #0
 80066ea:	2104      	movs	r1, #4
 80066ec:	f7ff ffa6 	bl	800663c <std>
 80066f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80066f4:	2201      	movs	r2, #1
 80066f6:	2109      	movs	r1, #9
 80066f8:	f7ff ffa0 	bl	800663c <std>
 80066fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006700:	2202      	movs	r2, #2
 8006702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006706:	2112      	movs	r1, #18
 8006708:	f7ff bf98 	b.w	800663c <std>
 800670c:	2000057c 	.word	0x2000057c
 8006710:	20000444 	.word	0x20000444
 8006714:	08006685 	.word	0x08006685

08006718 <__sfp_lock_acquire>:
 8006718:	4801      	ldr	r0, [pc, #4]	; (8006720 <__sfp_lock_acquire+0x8>)
 800671a:	f000 b931 	b.w	8006980 <__retarget_lock_acquire_recursive>
 800671e:	bf00      	nop
 8006720:	20000585 	.word	0x20000585

08006724 <__sfp_lock_release>:
 8006724:	4801      	ldr	r0, [pc, #4]	; (800672c <__sfp_lock_release+0x8>)
 8006726:	f000 b92c 	b.w	8006982 <__retarget_lock_release_recursive>
 800672a:	bf00      	nop
 800672c:	20000585 	.word	0x20000585

08006730 <__sinit>:
 8006730:	b510      	push	{r4, lr}
 8006732:	4604      	mov	r4, r0
 8006734:	f7ff fff0 	bl	8006718 <__sfp_lock_acquire>
 8006738:	6a23      	ldr	r3, [r4, #32]
 800673a:	b11b      	cbz	r3, 8006744 <__sinit+0x14>
 800673c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006740:	f7ff bff0 	b.w	8006724 <__sfp_lock_release>
 8006744:	4b04      	ldr	r3, [pc, #16]	; (8006758 <__sinit+0x28>)
 8006746:	6223      	str	r3, [r4, #32]
 8006748:	4b04      	ldr	r3, [pc, #16]	; (800675c <__sinit+0x2c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f5      	bne.n	800673c <__sinit+0xc>
 8006750:	f7ff ffc4 	bl	80066dc <global_stdio_init.part.0>
 8006754:	e7f2      	b.n	800673c <__sinit+0xc>
 8006756:	bf00      	nop
 8006758:	0800669d 	.word	0x0800669d
 800675c:	2000057c 	.word	0x2000057c

08006760 <_fwalk_sglue>:
 8006760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006764:	4607      	mov	r7, r0
 8006766:	4688      	mov	r8, r1
 8006768:	4614      	mov	r4, r2
 800676a:	2600      	movs	r6, #0
 800676c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006770:	f1b9 0901 	subs.w	r9, r9, #1
 8006774:	d505      	bpl.n	8006782 <_fwalk_sglue+0x22>
 8006776:	6824      	ldr	r4, [r4, #0]
 8006778:	2c00      	cmp	r4, #0
 800677a:	d1f7      	bne.n	800676c <_fwalk_sglue+0xc>
 800677c:	4630      	mov	r0, r6
 800677e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006782:	89ab      	ldrh	r3, [r5, #12]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d907      	bls.n	8006798 <_fwalk_sglue+0x38>
 8006788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800678c:	3301      	adds	r3, #1
 800678e:	d003      	beq.n	8006798 <_fwalk_sglue+0x38>
 8006790:	4629      	mov	r1, r5
 8006792:	4638      	mov	r0, r7
 8006794:	47c0      	blx	r8
 8006796:	4306      	orrs	r6, r0
 8006798:	3568      	adds	r5, #104	; 0x68
 800679a:	e7e9      	b.n	8006770 <_fwalk_sglue+0x10>

0800679c <siprintf>:
 800679c:	b40e      	push	{r1, r2, r3}
 800679e:	b500      	push	{lr}
 80067a0:	b09c      	sub	sp, #112	; 0x70
 80067a2:	ab1d      	add	r3, sp, #116	; 0x74
 80067a4:	9002      	str	r0, [sp, #8]
 80067a6:	9006      	str	r0, [sp, #24]
 80067a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067ac:	4809      	ldr	r0, [pc, #36]	; (80067d4 <siprintf+0x38>)
 80067ae:	9107      	str	r1, [sp, #28]
 80067b0:	9104      	str	r1, [sp, #16]
 80067b2:	4909      	ldr	r1, [pc, #36]	; (80067d8 <siprintf+0x3c>)
 80067b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80067b8:	9105      	str	r1, [sp, #20]
 80067ba:	6800      	ldr	r0, [r0, #0]
 80067bc:	9301      	str	r3, [sp, #4]
 80067be:	a902      	add	r1, sp, #8
 80067c0:	f002 f8ee 	bl	80089a0 <_svfiprintf_r>
 80067c4:	9b02      	ldr	r3, [sp, #8]
 80067c6:	2200      	movs	r2, #0
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	b01c      	add	sp, #112	; 0x70
 80067cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067d0:	b003      	add	sp, #12
 80067d2:	4770      	bx	lr
 80067d4:	200001d0 	.word	0x200001d0
 80067d8:	ffff0208 	.word	0xffff0208

080067dc <__sread>:
 80067dc:	b510      	push	{r4, lr}
 80067de:	460c      	mov	r4, r1
 80067e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e4:	f000 f87e 	bl	80068e4 <_read_r>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	bfab      	itete	ge
 80067ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067ee:	89a3      	ldrhlt	r3, [r4, #12]
 80067f0:	181b      	addge	r3, r3, r0
 80067f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067f6:	bfac      	ite	ge
 80067f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80067fa:	81a3      	strhlt	r3, [r4, #12]
 80067fc:	bd10      	pop	{r4, pc}

080067fe <__swrite>:
 80067fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006802:	461f      	mov	r7, r3
 8006804:	898b      	ldrh	r3, [r1, #12]
 8006806:	05db      	lsls	r3, r3, #23
 8006808:	4605      	mov	r5, r0
 800680a:	460c      	mov	r4, r1
 800680c:	4616      	mov	r6, r2
 800680e:	d505      	bpl.n	800681c <__swrite+0x1e>
 8006810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006814:	2302      	movs	r3, #2
 8006816:	2200      	movs	r2, #0
 8006818:	f000 f852 	bl	80068c0 <_lseek_r>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	4632      	mov	r2, r6
 800682a:	463b      	mov	r3, r7
 800682c:	4628      	mov	r0, r5
 800682e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006832:	f000 b869 	b.w	8006908 <_write_r>

08006836 <__sseek>:
 8006836:	b510      	push	{r4, lr}
 8006838:	460c      	mov	r4, r1
 800683a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683e:	f000 f83f 	bl	80068c0 <_lseek_r>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	bf15      	itete	ne
 8006848:	6560      	strne	r0, [r4, #84]	; 0x54
 800684a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800684e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006852:	81a3      	strheq	r3, [r4, #12]
 8006854:	bf18      	it	ne
 8006856:	81a3      	strhne	r3, [r4, #12]
 8006858:	bd10      	pop	{r4, pc}

0800685a <__sclose>:
 800685a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685e:	f000 b81f 	b.w	80068a0 <_close_r>

08006862 <memset>:
 8006862:	4402      	add	r2, r0
 8006864:	4603      	mov	r3, r0
 8006866:	4293      	cmp	r3, r2
 8006868:	d100      	bne.n	800686c <memset+0xa>
 800686a:	4770      	bx	lr
 800686c:	f803 1b01 	strb.w	r1, [r3], #1
 8006870:	e7f9      	b.n	8006866 <memset+0x4>

08006872 <strncmp>:
 8006872:	b510      	push	{r4, lr}
 8006874:	b16a      	cbz	r2, 8006892 <strncmp+0x20>
 8006876:	3901      	subs	r1, #1
 8006878:	1884      	adds	r4, r0, r2
 800687a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800687e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006882:	429a      	cmp	r2, r3
 8006884:	d103      	bne.n	800688e <strncmp+0x1c>
 8006886:	42a0      	cmp	r0, r4
 8006888:	d001      	beq.n	800688e <strncmp+0x1c>
 800688a:	2a00      	cmp	r2, #0
 800688c:	d1f5      	bne.n	800687a <strncmp+0x8>
 800688e:	1ad0      	subs	r0, r2, r3
 8006890:	bd10      	pop	{r4, pc}
 8006892:	4610      	mov	r0, r2
 8006894:	e7fc      	b.n	8006890 <strncmp+0x1e>
	...

08006898 <_localeconv_r>:
 8006898:	4800      	ldr	r0, [pc, #0]	; (800689c <_localeconv_r+0x4>)
 800689a:	4770      	bx	lr
 800689c:	20000108 	.word	0x20000108

080068a0 <_close_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4d06      	ldr	r5, [pc, #24]	; (80068bc <_close_r+0x1c>)
 80068a4:	2300      	movs	r3, #0
 80068a6:	4604      	mov	r4, r0
 80068a8:	4608      	mov	r0, r1
 80068aa:	602b      	str	r3, [r5, #0]
 80068ac:	f7fb fabf 	bl	8001e2e <_close>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d102      	bne.n	80068ba <_close_r+0x1a>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	b103      	cbz	r3, 80068ba <_close_r+0x1a>
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	20000580 	.word	0x20000580

080068c0 <_lseek_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4d07      	ldr	r5, [pc, #28]	; (80068e0 <_lseek_r+0x20>)
 80068c4:	4604      	mov	r4, r0
 80068c6:	4608      	mov	r0, r1
 80068c8:	4611      	mov	r1, r2
 80068ca:	2200      	movs	r2, #0
 80068cc:	602a      	str	r2, [r5, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f7fb fad4 	bl	8001e7c <_lseek>
 80068d4:	1c43      	adds	r3, r0, #1
 80068d6:	d102      	bne.n	80068de <_lseek_r+0x1e>
 80068d8:	682b      	ldr	r3, [r5, #0]
 80068da:	b103      	cbz	r3, 80068de <_lseek_r+0x1e>
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	bd38      	pop	{r3, r4, r5, pc}
 80068e0:	20000580 	.word	0x20000580

080068e4 <_read_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	4d07      	ldr	r5, [pc, #28]	; (8006904 <_read_r+0x20>)
 80068e8:	4604      	mov	r4, r0
 80068ea:	4608      	mov	r0, r1
 80068ec:	4611      	mov	r1, r2
 80068ee:	2200      	movs	r2, #0
 80068f0:	602a      	str	r2, [r5, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f7fb fa62 	bl	8001dbc <_read>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	d102      	bne.n	8006902 <_read_r+0x1e>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	b103      	cbz	r3, 8006902 <_read_r+0x1e>
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	20000580 	.word	0x20000580

08006908 <_write_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4d07      	ldr	r5, [pc, #28]	; (8006928 <_write_r+0x20>)
 800690c:	4604      	mov	r4, r0
 800690e:	4608      	mov	r0, r1
 8006910:	4611      	mov	r1, r2
 8006912:	2200      	movs	r2, #0
 8006914:	602a      	str	r2, [r5, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	f7fb fa6d 	bl	8001df6 <_write>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d102      	bne.n	8006926 <_write_r+0x1e>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	b103      	cbz	r3, 8006926 <_write_r+0x1e>
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	20000580 	.word	0x20000580

0800692c <__errno>:
 800692c:	4b01      	ldr	r3, [pc, #4]	; (8006934 <__errno+0x8>)
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	200001d0 	.word	0x200001d0

08006938 <__libc_init_array>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4d0d      	ldr	r5, [pc, #52]	; (8006970 <__libc_init_array+0x38>)
 800693c:	4c0d      	ldr	r4, [pc, #52]	; (8006974 <__libc_init_array+0x3c>)
 800693e:	1b64      	subs	r4, r4, r5
 8006940:	10a4      	asrs	r4, r4, #2
 8006942:	2600      	movs	r6, #0
 8006944:	42a6      	cmp	r6, r4
 8006946:	d109      	bne.n	800695c <__libc_init_array+0x24>
 8006948:	4d0b      	ldr	r5, [pc, #44]	; (8006978 <__libc_init_array+0x40>)
 800694a:	4c0c      	ldr	r4, [pc, #48]	; (800697c <__libc_init_array+0x44>)
 800694c:	f002 fd24 	bl	8009398 <_init>
 8006950:	1b64      	subs	r4, r4, r5
 8006952:	10a4      	asrs	r4, r4, #2
 8006954:	2600      	movs	r6, #0
 8006956:	42a6      	cmp	r6, r4
 8006958:	d105      	bne.n	8006966 <__libc_init_array+0x2e>
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006960:	4798      	blx	r3
 8006962:	3601      	adds	r6, #1
 8006964:	e7ee      	b.n	8006944 <__libc_init_array+0xc>
 8006966:	f855 3b04 	ldr.w	r3, [r5], #4
 800696a:	4798      	blx	r3
 800696c:	3601      	adds	r6, #1
 800696e:	e7f2      	b.n	8006956 <__libc_init_array+0x1e>
 8006970:	08009854 	.word	0x08009854
 8006974:	08009854 	.word	0x08009854
 8006978:	08009854 	.word	0x08009854
 800697c:	08009858 	.word	0x08009858

08006980 <__retarget_lock_acquire_recursive>:
 8006980:	4770      	bx	lr

08006982 <__retarget_lock_release_recursive>:
 8006982:	4770      	bx	lr

08006984 <memcpy>:
 8006984:	440a      	add	r2, r1
 8006986:	4291      	cmp	r1, r2
 8006988:	f100 33ff 	add.w	r3, r0, #4294967295
 800698c:	d100      	bne.n	8006990 <memcpy+0xc>
 800698e:	4770      	bx	lr
 8006990:	b510      	push	{r4, lr}
 8006992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800699a:	4291      	cmp	r1, r2
 800699c:	d1f9      	bne.n	8006992 <memcpy+0xe>
 800699e:	bd10      	pop	{r4, pc}

080069a0 <nan>:
 80069a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80069a8 <nan+0x8>
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	00000000 	.word	0x00000000
 80069ac:	7ff80000 	.word	0x7ff80000

080069b0 <quorem>:
 80069b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b4:	6903      	ldr	r3, [r0, #16]
 80069b6:	690c      	ldr	r4, [r1, #16]
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	4607      	mov	r7, r0
 80069bc:	db7e      	blt.n	8006abc <quorem+0x10c>
 80069be:	3c01      	subs	r4, #1
 80069c0:	f101 0814 	add.w	r8, r1, #20
 80069c4:	f100 0514 	add.w	r5, r0, #20
 80069c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069d6:	3301      	adds	r3, #1
 80069d8:	429a      	cmp	r2, r3
 80069da:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80069e6:	d331      	bcc.n	8006a4c <quorem+0x9c>
 80069e8:	f04f 0e00 	mov.w	lr, #0
 80069ec:	4640      	mov	r0, r8
 80069ee:	46ac      	mov	ip, r5
 80069f0:	46f2      	mov	sl, lr
 80069f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80069f6:	b293      	uxth	r3, r2
 80069f8:	fb06 e303 	mla	r3, r6, r3, lr
 80069fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a00:	0c1a      	lsrs	r2, r3, #16
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	ebaa 0303 	sub.w	r3, sl, r3
 8006a08:	f8dc a000 	ldr.w	sl, [ip]
 8006a0c:	fa13 f38a 	uxtah	r3, r3, sl
 8006a10:	fb06 220e 	mla	r2, r6, lr, r2
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	9b00      	ldr	r3, [sp, #0]
 8006a18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a1c:	b292      	uxth	r2, r2
 8006a1e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a26:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a2a:	4581      	cmp	r9, r0
 8006a2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a30:	f84c 3b04 	str.w	r3, [ip], #4
 8006a34:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a38:	d2db      	bcs.n	80069f2 <quorem+0x42>
 8006a3a:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a3e:	b92b      	cbnz	r3, 8006a4c <quorem+0x9c>
 8006a40:	9b01      	ldr	r3, [sp, #4]
 8006a42:	3b04      	subs	r3, #4
 8006a44:	429d      	cmp	r5, r3
 8006a46:	461a      	mov	r2, r3
 8006a48:	d32c      	bcc.n	8006aa4 <quorem+0xf4>
 8006a4a:	613c      	str	r4, [r7, #16]
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	f001 fd59 	bl	8008504 <__mcmp>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	db22      	blt.n	8006a9c <quorem+0xec>
 8006a56:	3601      	adds	r6, #1
 8006a58:	4629      	mov	r1, r5
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a60:	f8d1 c000 	ldr.w	ip, [r1]
 8006a64:	b293      	uxth	r3, r2
 8006a66:	1ac3      	subs	r3, r0, r3
 8006a68:	0c12      	lsrs	r2, r2, #16
 8006a6a:	fa13 f38c 	uxtah	r3, r3, ip
 8006a6e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006a72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a7c:	45c1      	cmp	r9, r8
 8006a7e:	f841 3b04 	str.w	r3, [r1], #4
 8006a82:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a86:	d2e9      	bcs.n	8006a5c <quorem+0xac>
 8006a88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a90:	b922      	cbnz	r2, 8006a9c <quorem+0xec>
 8006a92:	3b04      	subs	r3, #4
 8006a94:	429d      	cmp	r5, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	d30a      	bcc.n	8006ab0 <quorem+0x100>
 8006a9a:	613c      	str	r4, [r7, #16]
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	b003      	add	sp, #12
 8006aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa4:	6812      	ldr	r2, [r2, #0]
 8006aa6:	3b04      	subs	r3, #4
 8006aa8:	2a00      	cmp	r2, #0
 8006aaa:	d1ce      	bne.n	8006a4a <quorem+0x9a>
 8006aac:	3c01      	subs	r4, #1
 8006aae:	e7c9      	b.n	8006a44 <quorem+0x94>
 8006ab0:	6812      	ldr	r2, [r2, #0]
 8006ab2:	3b04      	subs	r3, #4
 8006ab4:	2a00      	cmp	r2, #0
 8006ab6:	d1f0      	bne.n	8006a9a <quorem+0xea>
 8006ab8:	3c01      	subs	r4, #1
 8006aba:	e7eb      	b.n	8006a94 <quorem+0xe4>
 8006abc:	2000      	movs	r0, #0
 8006abe:	e7ee      	b.n	8006a9e <quorem+0xee>

08006ac0 <_dtoa_r>:
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	ed2d 8b04 	vpush	{d8-d9}
 8006ac8:	69c5      	ldr	r5, [r0, #28]
 8006aca:	b093      	sub	sp, #76	; 0x4c
 8006acc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006ad0:	ec57 6b10 	vmov	r6, r7, d0
 8006ad4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ad8:	9107      	str	r1, [sp, #28]
 8006ada:	4604      	mov	r4, r0
 8006adc:	920a      	str	r2, [sp, #40]	; 0x28
 8006ade:	930d      	str	r3, [sp, #52]	; 0x34
 8006ae0:	b975      	cbnz	r5, 8006b00 <_dtoa_r+0x40>
 8006ae2:	2010      	movs	r0, #16
 8006ae4:	f001 f982 	bl	8007dec <malloc>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	61e0      	str	r0, [r4, #28]
 8006aec:	b920      	cbnz	r0, 8006af8 <_dtoa_r+0x38>
 8006aee:	4bae      	ldr	r3, [pc, #696]	; (8006da8 <_dtoa_r+0x2e8>)
 8006af0:	21ef      	movs	r1, #239	; 0xef
 8006af2:	48ae      	ldr	r0, [pc, #696]	; (8006dac <_dtoa_r+0x2ec>)
 8006af4:	f002 f92a 	bl	8008d4c <__assert_func>
 8006af8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006afc:	6005      	str	r5, [r0, #0]
 8006afe:	60c5      	str	r5, [r0, #12]
 8006b00:	69e3      	ldr	r3, [r4, #28]
 8006b02:	6819      	ldr	r1, [r3, #0]
 8006b04:	b151      	cbz	r1, 8006b1c <_dtoa_r+0x5c>
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	604a      	str	r2, [r1, #4]
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	4093      	lsls	r3, r2
 8006b0e:	608b      	str	r3, [r1, #8]
 8006b10:	4620      	mov	r0, r4
 8006b12:	f001 fa71 	bl	8007ff8 <_Bfree>
 8006b16:	69e3      	ldr	r3, [r4, #28]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	1e3b      	subs	r3, r7, #0
 8006b1e:	bfbb      	ittet	lt
 8006b20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b24:	9303      	strlt	r3, [sp, #12]
 8006b26:	2300      	movge	r3, #0
 8006b28:	2201      	movlt	r2, #1
 8006b2a:	bfac      	ite	ge
 8006b2c:	f8c8 3000 	strge.w	r3, [r8]
 8006b30:	f8c8 2000 	strlt.w	r2, [r8]
 8006b34:	4b9e      	ldr	r3, [pc, #632]	; (8006db0 <_dtoa_r+0x2f0>)
 8006b36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006b3a:	ea33 0308 	bics.w	r3, r3, r8
 8006b3e:	d11b      	bne.n	8006b78 <_dtoa_r+0xb8>
 8006b40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b42:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006b4c:	4333      	orrs	r3, r6
 8006b4e:	f000 8593 	beq.w	8007678 <_dtoa_r+0xbb8>
 8006b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b54:	b963      	cbnz	r3, 8006b70 <_dtoa_r+0xb0>
 8006b56:	4b97      	ldr	r3, [pc, #604]	; (8006db4 <_dtoa_r+0x2f4>)
 8006b58:	e027      	b.n	8006baa <_dtoa_r+0xea>
 8006b5a:	4b97      	ldr	r3, [pc, #604]	; (8006db8 <_dtoa_r+0x2f8>)
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	9800      	ldr	r0, [sp, #0]
 8006b66:	b013      	add	sp, #76	; 0x4c
 8006b68:	ecbd 8b04 	vpop	{d8-d9}
 8006b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b70:	4b90      	ldr	r3, [pc, #576]	; (8006db4 <_dtoa_r+0x2f4>)
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	3303      	adds	r3, #3
 8006b76:	e7f3      	b.n	8006b60 <_dtoa_r+0xa0>
 8006b78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	ec51 0b17 	vmov	r0, r1, d7
 8006b82:	eeb0 8a47 	vmov.f32	s16, s14
 8006b86:	eef0 8a67 	vmov.f32	s17, s15
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f7f9 ff9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b90:	4681      	mov	r9, r0
 8006b92:	b160      	cbz	r0, 8006bae <_dtoa_r+0xee>
 8006b94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b96:	2301      	movs	r3, #1
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8568 	beq.w	8007672 <_dtoa_r+0xbb2>
 8006ba2:	4b86      	ldr	r3, [pc, #536]	; (8006dbc <_dtoa_r+0x2fc>)
 8006ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	e7da      	b.n	8006b64 <_dtoa_r+0xa4>
 8006bae:	aa10      	add	r2, sp, #64	; 0x40
 8006bb0:	a911      	add	r1, sp, #68	; 0x44
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	eeb0 0a48 	vmov.f32	s0, s16
 8006bb8:	eef0 0a68 	vmov.f32	s1, s17
 8006bbc:	f001 fdb8 	bl	8008730 <__d2b>
 8006bc0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006bc4:	4682      	mov	sl, r0
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	d07f      	beq.n	8006cca <_dtoa_r+0x20a>
 8006bca:	ee18 3a90 	vmov	r3, s17
 8006bce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bd2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006bd6:	ec51 0b18 	vmov	r0, r1, d8
 8006bda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006bde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006be2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006be6:	4619      	mov	r1, r3
 8006be8:	2200      	movs	r2, #0
 8006bea:	4b75      	ldr	r3, [pc, #468]	; (8006dc0 <_dtoa_r+0x300>)
 8006bec:	f7f9 fb4c 	bl	8000288 <__aeabi_dsub>
 8006bf0:	a367      	add	r3, pc, #412	; (adr r3, 8006d90 <_dtoa_r+0x2d0>)
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	f7f9 fcff 	bl	80005f8 <__aeabi_dmul>
 8006bfa:	a367      	add	r3, pc, #412	; (adr r3, 8006d98 <_dtoa_r+0x2d8>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fb44 	bl	800028c <__adddf3>
 8006c04:	4606      	mov	r6, r0
 8006c06:	4628      	mov	r0, r5
 8006c08:	460f      	mov	r7, r1
 8006c0a:	f7f9 fc8b 	bl	8000524 <__aeabi_i2d>
 8006c0e:	a364      	add	r3, pc, #400	; (adr r3, 8006da0 <_dtoa_r+0x2e0>)
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f7f9 fcf0 	bl	80005f8 <__aeabi_dmul>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	4639      	mov	r1, r7
 8006c20:	f7f9 fb34 	bl	800028c <__adddf3>
 8006c24:	4606      	mov	r6, r0
 8006c26:	460f      	mov	r7, r1
 8006c28:	f7f9 ff96 	bl	8000b58 <__aeabi_d2iz>
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	4683      	mov	fp, r0
 8006c30:	2300      	movs	r3, #0
 8006c32:	4630      	mov	r0, r6
 8006c34:	4639      	mov	r1, r7
 8006c36:	f7f9 ff51 	bl	8000adc <__aeabi_dcmplt>
 8006c3a:	b148      	cbz	r0, 8006c50 <_dtoa_r+0x190>
 8006c3c:	4658      	mov	r0, fp
 8006c3e:	f7f9 fc71 	bl	8000524 <__aeabi_i2d>
 8006c42:	4632      	mov	r2, r6
 8006c44:	463b      	mov	r3, r7
 8006c46:	f7f9 ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c4a:	b908      	cbnz	r0, 8006c50 <_dtoa_r+0x190>
 8006c4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c50:	f1bb 0f16 	cmp.w	fp, #22
 8006c54:	d857      	bhi.n	8006d06 <_dtoa_r+0x246>
 8006c56:	4b5b      	ldr	r3, [pc, #364]	; (8006dc4 <_dtoa_r+0x304>)
 8006c58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c60:	ec51 0b18 	vmov	r0, r1, d8
 8006c64:	f7f9 ff3a 	bl	8000adc <__aeabi_dcmplt>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d04e      	beq.n	8006d0a <_dtoa_r+0x24a>
 8006c6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c70:	2300      	movs	r3, #0
 8006c72:	930c      	str	r3, [sp, #48]	; 0x30
 8006c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c76:	1b5b      	subs	r3, r3, r5
 8006c78:	1e5a      	subs	r2, r3, #1
 8006c7a:	bf45      	ittet	mi
 8006c7c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006c80:	9305      	strmi	r3, [sp, #20]
 8006c82:	2300      	movpl	r3, #0
 8006c84:	2300      	movmi	r3, #0
 8006c86:	9206      	str	r2, [sp, #24]
 8006c88:	bf54      	ite	pl
 8006c8a:	9305      	strpl	r3, [sp, #20]
 8006c8c:	9306      	strmi	r3, [sp, #24]
 8006c8e:	f1bb 0f00 	cmp.w	fp, #0
 8006c92:	db3c      	blt.n	8006d0e <_dtoa_r+0x24e>
 8006c94:	9b06      	ldr	r3, [sp, #24]
 8006c96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006c9a:	445b      	add	r3, fp
 8006c9c:	9306      	str	r3, [sp, #24]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	9308      	str	r3, [sp, #32]
 8006ca2:	9b07      	ldr	r3, [sp, #28]
 8006ca4:	2b09      	cmp	r3, #9
 8006ca6:	d868      	bhi.n	8006d7a <_dtoa_r+0x2ba>
 8006ca8:	2b05      	cmp	r3, #5
 8006caa:	bfc4      	itt	gt
 8006cac:	3b04      	subgt	r3, #4
 8006cae:	9307      	strgt	r3, [sp, #28]
 8006cb0:	9b07      	ldr	r3, [sp, #28]
 8006cb2:	f1a3 0302 	sub.w	r3, r3, #2
 8006cb6:	bfcc      	ite	gt
 8006cb8:	2500      	movgt	r5, #0
 8006cba:	2501      	movle	r5, #1
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	f200 8085 	bhi.w	8006dcc <_dtoa_r+0x30c>
 8006cc2:	e8df f003 	tbb	[pc, r3]
 8006cc6:	3b2e      	.short	0x3b2e
 8006cc8:	5839      	.short	0x5839
 8006cca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006cce:	441d      	add	r5, r3
 8006cd0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	bfc1      	itttt	gt
 8006cd8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006cdc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006ce0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006ce4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006ce8:	bfd6      	itet	le
 8006cea:	f1c3 0320 	rsble	r3, r3, #32
 8006cee:	ea48 0003 	orrgt.w	r0, r8, r3
 8006cf2:	fa06 f003 	lslle.w	r0, r6, r3
 8006cf6:	f7f9 fc05 	bl	8000504 <__aeabi_ui2d>
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006d00:	3d01      	subs	r5, #1
 8006d02:	920e      	str	r2, [sp, #56]	; 0x38
 8006d04:	e76f      	b.n	8006be6 <_dtoa_r+0x126>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e7b3      	b.n	8006c72 <_dtoa_r+0x1b2>
 8006d0a:	900c      	str	r0, [sp, #48]	; 0x30
 8006d0c:	e7b2      	b.n	8006c74 <_dtoa_r+0x1b4>
 8006d0e:	9b05      	ldr	r3, [sp, #20]
 8006d10:	eba3 030b 	sub.w	r3, r3, fp
 8006d14:	9305      	str	r3, [sp, #20]
 8006d16:	f1cb 0300 	rsb	r3, fp, #0
 8006d1a:	9308      	str	r3, [sp, #32]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d20:	e7bf      	b.n	8006ca2 <_dtoa_r+0x1e2>
 8006d22:	2300      	movs	r3, #0
 8006d24:	9309      	str	r3, [sp, #36]	; 0x24
 8006d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	dc52      	bgt.n	8006dd2 <_dtoa_r+0x312>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	9304      	str	r3, [sp, #16]
 8006d32:	461a      	mov	r2, r3
 8006d34:	920a      	str	r2, [sp, #40]	; 0x28
 8006d36:	e00b      	b.n	8006d50 <_dtoa_r+0x290>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e7f3      	b.n	8006d24 <_dtoa_r+0x264>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d42:	445b      	add	r3, fp
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	3301      	adds	r3, #1
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	9304      	str	r3, [sp, #16]
 8006d4c:	bfb8      	it	lt
 8006d4e:	2301      	movlt	r3, #1
 8006d50:	69e0      	ldr	r0, [r4, #28]
 8006d52:	2100      	movs	r1, #0
 8006d54:	2204      	movs	r2, #4
 8006d56:	f102 0614 	add.w	r6, r2, #20
 8006d5a:	429e      	cmp	r6, r3
 8006d5c:	d93d      	bls.n	8006dda <_dtoa_r+0x31a>
 8006d5e:	6041      	str	r1, [r0, #4]
 8006d60:	4620      	mov	r0, r4
 8006d62:	f001 f909 	bl	8007f78 <_Balloc>
 8006d66:	9000      	str	r0, [sp, #0]
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d139      	bne.n	8006de0 <_dtoa_r+0x320>
 8006d6c:	4b16      	ldr	r3, [pc, #88]	; (8006dc8 <_dtoa_r+0x308>)
 8006d6e:	4602      	mov	r2, r0
 8006d70:	f240 11af 	movw	r1, #431	; 0x1af
 8006d74:	e6bd      	b.n	8006af2 <_dtoa_r+0x32>
 8006d76:	2301      	movs	r3, #1
 8006d78:	e7e1      	b.n	8006d3e <_dtoa_r+0x27e>
 8006d7a:	2501      	movs	r5, #1
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	9307      	str	r3, [sp, #28]
 8006d80:	9509      	str	r5, [sp, #36]	; 0x24
 8006d82:	f04f 33ff 	mov.w	r3, #4294967295
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	9304      	str	r3, [sp, #16]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2312      	movs	r3, #18
 8006d8e:	e7d1      	b.n	8006d34 <_dtoa_r+0x274>
 8006d90:	636f4361 	.word	0x636f4361
 8006d94:	3fd287a7 	.word	0x3fd287a7
 8006d98:	8b60c8b3 	.word	0x8b60c8b3
 8006d9c:	3fc68a28 	.word	0x3fc68a28
 8006da0:	509f79fb 	.word	0x509f79fb
 8006da4:	3fd34413 	.word	0x3fd34413
 8006da8:	080094c9 	.word	0x080094c9
 8006dac:	080094e0 	.word	0x080094e0
 8006db0:	7ff00000 	.word	0x7ff00000
 8006db4:	080094c5 	.word	0x080094c5
 8006db8:	080094bc 	.word	0x080094bc
 8006dbc:	08009491 	.word	0x08009491
 8006dc0:	3ff80000 	.word	0x3ff80000
 8006dc4:	08009630 	.word	0x08009630
 8006dc8:	08009538 	.word	0x08009538
 8006dcc:	2301      	movs	r3, #1
 8006dce:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd0:	e7d7      	b.n	8006d82 <_dtoa_r+0x2c2>
 8006dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd4:	9301      	str	r3, [sp, #4]
 8006dd6:	9304      	str	r3, [sp, #16]
 8006dd8:	e7ba      	b.n	8006d50 <_dtoa_r+0x290>
 8006dda:	3101      	adds	r1, #1
 8006ddc:	0052      	lsls	r2, r2, #1
 8006dde:	e7ba      	b.n	8006d56 <_dtoa_r+0x296>
 8006de0:	69e3      	ldr	r3, [r4, #28]
 8006de2:	9a00      	ldr	r2, [sp, #0]
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	9b04      	ldr	r3, [sp, #16]
 8006de8:	2b0e      	cmp	r3, #14
 8006dea:	f200 80a8 	bhi.w	8006f3e <_dtoa_r+0x47e>
 8006dee:	2d00      	cmp	r5, #0
 8006df0:	f000 80a5 	beq.w	8006f3e <_dtoa_r+0x47e>
 8006df4:	f1bb 0f00 	cmp.w	fp, #0
 8006df8:	dd38      	ble.n	8006e6c <_dtoa_r+0x3ac>
 8006dfa:	4bc0      	ldr	r3, [pc, #768]	; (80070fc <_dtoa_r+0x63c>)
 8006dfc:	f00b 020f 	and.w	r2, fp, #15
 8006e00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e04:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006e08:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006e0c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006e10:	d019      	beq.n	8006e46 <_dtoa_r+0x386>
 8006e12:	4bbb      	ldr	r3, [pc, #748]	; (8007100 <_dtoa_r+0x640>)
 8006e14:	ec51 0b18 	vmov	r0, r1, d8
 8006e18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e1c:	f7f9 fd16 	bl	800084c <__aeabi_ddiv>
 8006e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e24:	f008 080f 	and.w	r8, r8, #15
 8006e28:	2503      	movs	r5, #3
 8006e2a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007100 <_dtoa_r+0x640>
 8006e2e:	f1b8 0f00 	cmp.w	r8, #0
 8006e32:	d10a      	bne.n	8006e4a <_dtoa_r+0x38a>
 8006e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e38:	4632      	mov	r2, r6
 8006e3a:	463b      	mov	r3, r7
 8006e3c:	f7f9 fd06 	bl	800084c <__aeabi_ddiv>
 8006e40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e44:	e02b      	b.n	8006e9e <_dtoa_r+0x3de>
 8006e46:	2502      	movs	r5, #2
 8006e48:	e7ef      	b.n	8006e2a <_dtoa_r+0x36a>
 8006e4a:	f018 0f01 	tst.w	r8, #1
 8006e4e:	d008      	beq.n	8006e62 <_dtoa_r+0x3a2>
 8006e50:	4630      	mov	r0, r6
 8006e52:	4639      	mov	r1, r7
 8006e54:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006e58:	f7f9 fbce 	bl	80005f8 <__aeabi_dmul>
 8006e5c:	3501      	adds	r5, #1
 8006e5e:	4606      	mov	r6, r0
 8006e60:	460f      	mov	r7, r1
 8006e62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006e66:	f109 0908 	add.w	r9, r9, #8
 8006e6a:	e7e0      	b.n	8006e2e <_dtoa_r+0x36e>
 8006e6c:	f000 809f 	beq.w	8006fae <_dtoa_r+0x4ee>
 8006e70:	f1cb 0600 	rsb	r6, fp, #0
 8006e74:	4ba1      	ldr	r3, [pc, #644]	; (80070fc <_dtoa_r+0x63c>)
 8006e76:	4fa2      	ldr	r7, [pc, #648]	; (8007100 <_dtoa_r+0x640>)
 8006e78:	f006 020f 	and.w	r2, r6, #15
 8006e7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	ec51 0b18 	vmov	r0, r1, d8
 8006e88:	f7f9 fbb6 	bl	80005f8 <__aeabi_dmul>
 8006e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e90:	1136      	asrs	r6, r6, #4
 8006e92:	2300      	movs	r3, #0
 8006e94:	2502      	movs	r5, #2
 8006e96:	2e00      	cmp	r6, #0
 8006e98:	d17e      	bne.n	8006f98 <_dtoa_r+0x4d8>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1d0      	bne.n	8006e40 <_dtoa_r+0x380>
 8006e9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ea0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 8084 	beq.w	8006fb2 <_dtoa_r+0x4f2>
 8006eaa:	4b96      	ldr	r3, [pc, #600]	; (8007104 <_dtoa_r+0x644>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	4640      	mov	r0, r8
 8006eb0:	4649      	mov	r1, r9
 8006eb2:	f7f9 fe13 	bl	8000adc <__aeabi_dcmplt>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d07b      	beq.n	8006fb2 <_dtoa_r+0x4f2>
 8006eba:	9b04      	ldr	r3, [sp, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d078      	beq.n	8006fb2 <_dtoa_r+0x4f2>
 8006ec0:	9b01      	ldr	r3, [sp, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	dd39      	ble.n	8006f3a <_dtoa_r+0x47a>
 8006ec6:	4b90      	ldr	r3, [pc, #576]	; (8007108 <_dtoa_r+0x648>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	4640      	mov	r0, r8
 8006ecc:	4649      	mov	r1, r9
 8006ece:	f7f9 fb93 	bl	80005f8 <__aeabi_dmul>
 8006ed2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ed6:	9e01      	ldr	r6, [sp, #4]
 8006ed8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006edc:	3501      	adds	r5, #1
 8006ede:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f7f9 fb1e 	bl	8000524 <__aeabi_i2d>
 8006ee8:	4642      	mov	r2, r8
 8006eea:	464b      	mov	r3, r9
 8006eec:	f7f9 fb84 	bl	80005f8 <__aeabi_dmul>
 8006ef0:	4b86      	ldr	r3, [pc, #536]	; (800710c <_dtoa_r+0x64c>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f7f9 f9ca 	bl	800028c <__adddf3>
 8006ef8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f00:	9303      	str	r3, [sp, #12]
 8006f02:	2e00      	cmp	r6, #0
 8006f04:	d158      	bne.n	8006fb8 <_dtoa_r+0x4f8>
 8006f06:	4b82      	ldr	r3, [pc, #520]	; (8007110 <_dtoa_r+0x650>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	f7f9 f9bb 	bl	8000288 <__aeabi_dsub>
 8006f12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f16:	4680      	mov	r8, r0
 8006f18:	4689      	mov	r9, r1
 8006f1a:	f7f9 fdfd 	bl	8000b18 <__aeabi_dcmpgt>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f040 8296 	bne.w	8007450 <_dtoa_r+0x990>
 8006f24:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006f28:	4640      	mov	r0, r8
 8006f2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f2e:	4649      	mov	r1, r9
 8006f30:	f7f9 fdd4 	bl	8000adc <__aeabi_dcmplt>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	f040 8289 	bne.w	800744c <_dtoa_r+0x98c>
 8006f3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f2c0 814e 	blt.w	80071e2 <_dtoa_r+0x722>
 8006f46:	f1bb 0f0e 	cmp.w	fp, #14
 8006f4a:	f300 814a 	bgt.w	80071e2 <_dtoa_r+0x722>
 8006f4e:	4b6b      	ldr	r3, [pc, #428]	; (80070fc <_dtoa_r+0x63c>)
 8006f50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f280 80dc 	bge.w	8007118 <_dtoa_r+0x658>
 8006f60:	9b04      	ldr	r3, [sp, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f300 80d8 	bgt.w	8007118 <_dtoa_r+0x658>
 8006f68:	f040 826f 	bne.w	800744a <_dtoa_r+0x98a>
 8006f6c:	4b68      	ldr	r3, [pc, #416]	; (8007110 <_dtoa_r+0x650>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	4640      	mov	r0, r8
 8006f72:	4649      	mov	r1, r9
 8006f74:	f7f9 fb40 	bl	80005f8 <__aeabi_dmul>
 8006f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f7c:	f7f9 fdc2 	bl	8000b04 <__aeabi_dcmpge>
 8006f80:	9e04      	ldr	r6, [sp, #16]
 8006f82:	4637      	mov	r7, r6
 8006f84:	2800      	cmp	r0, #0
 8006f86:	f040 8245 	bne.w	8007414 <_dtoa_r+0x954>
 8006f8a:	9d00      	ldr	r5, [sp, #0]
 8006f8c:	2331      	movs	r3, #49	; 0x31
 8006f8e:	f805 3b01 	strb.w	r3, [r5], #1
 8006f92:	f10b 0b01 	add.w	fp, fp, #1
 8006f96:	e241      	b.n	800741c <_dtoa_r+0x95c>
 8006f98:	07f2      	lsls	r2, r6, #31
 8006f9a:	d505      	bpl.n	8006fa8 <_dtoa_r+0x4e8>
 8006f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa0:	f7f9 fb2a 	bl	80005f8 <__aeabi_dmul>
 8006fa4:	3501      	adds	r5, #1
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	1076      	asrs	r6, r6, #1
 8006faa:	3708      	adds	r7, #8
 8006fac:	e773      	b.n	8006e96 <_dtoa_r+0x3d6>
 8006fae:	2502      	movs	r5, #2
 8006fb0:	e775      	b.n	8006e9e <_dtoa_r+0x3de>
 8006fb2:	9e04      	ldr	r6, [sp, #16]
 8006fb4:	465f      	mov	r7, fp
 8006fb6:	e792      	b.n	8006ede <_dtoa_r+0x41e>
 8006fb8:	9900      	ldr	r1, [sp, #0]
 8006fba:	4b50      	ldr	r3, [pc, #320]	; (80070fc <_dtoa_r+0x63c>)
 8006fbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006fc0:	4431      	add	r1, r6
 8006fc2:	9102      	str	r1, [sp, #8]
 8006fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fc6:	eeb0 9a47 	vmov.f32	s18, s14
 8006fca:	eef0 9a67 	vmov.f32	s19, s15
 8006fce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006fd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006fd6:	2900      	cmp	r1, #0
 8006fd8:	d044      	beq.n	8007064 <_dtoa_r+0x5a4>
 8006fda:	494e      	ldr	r1, [pc, #312]	; (8007114 <_dtoa_r+0x654>)
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f7f9 fc35 	bl	800084c <__aeabi_ddiv>
 8006fe2:	ec53 2b19 	vmov	r2, r3, d9
 8006fe6:	f7f9 f94f 	bl	8000288 <__aeabi_dsub>
 8006fea:	9d00      	ldr	r5, [sp, #0]
 8006fec:	ec41 0b19 	vmov	d9, r0, r1
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	f7f9 fdb0 	bl	8000b58 <__aeabi_d2iz>
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	f7f9 fa93 	bl	8000524 <__aeabi_i2d>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 f93f 	bl	8000288 <__aeabi_dsub>
 800700a:	3630      	adds	r6, #48	; 0x30
 800700c:	f805 6b01 	strb.w	r6, [r5], #1
 8007010:	ec53 2b19 	vmov	r2, r3, d9
 8007014:	4680      	mov	r8, r0
 8007016:	4689      	mov	r9, r1
 8007018:	f7f9 fd60 	bl	8000adc <__aeabi_dcmplt>
 800701c:	2800      	cmp	r0, #0
 800701e:	d164      	bne.n	80070ea <_dtoa_r+0x62a>
 8007020:	4642      	mov	r2, r8
 8007022:	464b      	mov	r3, r9
 8007024:	4937      	ldr	r1, [pc, #220]	; (8007104 <_dtoa_r+0x644>)
 8007026:	2000      	movs	r0, #0
 8007028:	f7f9 f92e 	bl	8000288 <__aeabi_dsub>
 800702c:	ec53 2b19 	vmov	r2, r3, d9
 8007030:	f7f9 fd54 	bl	8000adc <__aeabi_dcmplt>
 8007034:	2800      	cmp	r0, #0
 8007036:	f040 80b6 	bne.w	80071a6 <_dtoa_r+0x6e6>
 800703a:	9b02      	ldr	r3, [sp, #8]
 800703c:	429d      	cmp	r5, r3
 800703e:	f43f af7c 	beq.w	8006f3a <_dtoa_r+0x47a>
 8007042:	4b31      	ldr	r3, [pc, #196]	; (8007108 <_dtoa_r+0x648>)
 8007044:	ec51 0b19 	vmov	r0, r1, d9
 8007048:	2200      	movs	r2, #0
 800704a:	f7f9 fad5 	bl	80005f8 <__aeabi_dmul>
 800704e:	4b2e      	ldr	r3, [pc, #184]	; (8007108 <_dtoa_r+0x648>)
 8007050:	ec41 0b19 	vmov	d9, r0, r1
 8007054:	2200      	movs	r2, #0
 8007056:	4640      	mov	r0, r8
 8007058:	4649      	mov	r1, r9
 800705a:	f7f9 facd 	bl	80005f8 <__aeabi_dmul>
 800705e:	4680      	mov	r8, r0
 8007060:	4689      	mov	r9, r1
 8007062:	e7c5      	b.n	8006ff0 <_dtoa_r+0x530>
 8007064:	ec51 0b17 	vmov	r0, r1, d7
 8007068:	f7f9 fac6 	bl	80005f8 <__aeabi_dmul>
 800706c:	9b02      	ldr	r3, [sp, #8]
 800706e:	9d00      	ldr	r5, [sp, #0]
 8007070:	930f      	str	r3, [sp, #60]	; 0x3c
 8007072:	ec41 0b19 	vmov	d9, r0, r1
 8007076:	4649      	mov	r1, r9
 8007078:	4640      	mov	r0, r8
 800707a:	f7f9 fd6d 	bl	8000b58 <__aeabi_d2iz>
 800707e:	4606      	mov	r6, r0
 8007080:	f7f9 fa50 	bl	8000524 <__aeabi_i2d>
 8007084:	3630      	adds	r6, #48	; 0x30
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	4640      	mov	r0, r8
 800708c:	4649      	mov	r1, r9
 800708e:	f7f9 f8fb 	bl	8000288 <__aeabi_dsub>
 8007092:	f805 6b01 	strb.w	r6, [r5], #1
 8007096:	9b02      	ldr	r3, [sp, #8]
 8007098:	429d      	cmp	r5, r3
 800709a:	4680      	mov	r8, r0
 800709c:	4689      	mov	r9, r1
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	d124      	bne.n	80070ee <_dtoa_r+0x62e>
 80070a4:	4b1b      	ldr	r3, [pc, #108]	; (8007114 <_dtoa_r+0x654>)
 80070a6:	ec51 0b19 	vmov	r0, r1, d9
 80070aa:	f7f9 f8ef 	bl	800028c <__adddf3>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4640      	mov	r0, r8
 80070b4:	4649      	mov	r1, r9
 80070b6:	f7f9 fd2f 	bl	8000b18 <__aeabi_dcmpgt>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d173      	bne.n	80071a6 <_dtoa_r+0x6e6>
 80070be:	ec53 2b19 	vmov	r2, r3, d9
 80070c2:	4914      	ldr	r1, [pc, #80]	; (8007114 <_dtoa_r+0x654>)
 80070c4:	2000      	movs	r0, #0
 80070c6:	f7f9 f8df 	bl	8000288 <__aeabi_dsub>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4640      	mov	r0, r8
 80070d0:	4649      	mov	r1, r9
 80070d2:	f7f9 fd03 	bl	8000adc <__aeabi_dcmplt>
 80070d6:	2800      	cmp	r0, #0
 80070d8:	f43f af2f 	beq.w	8006f3a <_dtoa_r+0x47a>
 80070dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80070de:	1e6b      	subs	r3, r5, #1
 80070e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80070e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070e6:	2b30      	cmp	r3, #48	; 0x30
 80070e8:	d0f8      	beq.n	80070dc <_dtoa_r+0x61c>
 80070ea:	46bb      	mov	fp, r7
 80070ec:	e04a      	b.n	8007184 <_dtoa_r+0x6c4>
 80070ee:	4b06      	ldr	r3, [pc, #24]	; (8007108 <_dtoa_r+0x648>)
 80070f0:	f7f9 fa82 	bl	80005f8 <__aeabi_dmul>
 80070f4:	4680      	mov	r8, r0
 80070f6:	4689      	mov	r9, r1
 80070f8:	e7bd      	b.n	8007076 <_dtoa_r+0x5b6>
 80070fa:	bf00      	nop
 80070fc:	08009630 	.word	0x08009630
 8007100:	08009608 	.word	0x08009608
 8007104:	3ff00000 	.word	0x3ff00000
 8007108:	40240000 	.word	0x40240000
 800710c:	401c0000 	.word	0x401c0000
 8007110:	40140000 	.word	0x40140000
 8007114:	3fe00000 	.word	0x3fe00000
 8007118:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800711c:	9d00      	ldr	r5, [sp, #0]
 800711e:	4642      	mov	r2, r8
 8007120:	464b      	mov	r3, r9
 8007122:	4630      	mov	r0, r6
 8007124:	4639      	mov	r1, r7
 8007126:	f7f9 fb91 	bl	800084c <__aeabi_ddiv>
 800712a:	f7f9 fd15 	bl	8000b58 <__aeabi_d2iz>
 800712e:	9001      	str	r0, [sp, #4]
 8007130:	f7f9 f9f8 	bl	8000524 <__aeabi_i2d>
 8007134:	4642      	mov	r2, r8
 8007136:	464b      	mov	r3, r9
 8007138:	f7f9 fa5e 	bl	80005f8 <__aeabi_dmul>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	4630      	mov	r0, r6
 8007142:	4639      	mov	r1, r7
 8007144:	f7f9 f8a0 	bl	8000288 <__aeabi_dsub>
 8007148:	9e01      	ldr	r6, [sp, #4]
 800714a:	9f04      	ldr	r7, [sp, #16]
 800714c:	3630      	adds	r6, #48	; 0x30
 800714e:	f805 6b01 	strb.w	r6, [r5], #1
 8007152:	9e00      	ldr	r6, [sp, #0]
 8007154:	1bae      	subs	r6, r5, r6
 8007156:	42b7      	cmp	r7, r6
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	d134      	bne.n	80071c8 <_dtoa_r+0x708>
 800715e:	f7f9 f895 	bl	800028c <__adddf3>
 8007162:	4642      	mov	r2, r8
 8007164:	464b      	mov	r3, r9
 8007166:	4606      	mov	r6, r0
 8007168:	460f      	mov	r7, r1
 800716a:	f7f9 fcd5 	bl	8000b18 <__aeabi_dcmpgt>
 800716e:	b9c8      	cbnz	r0, 80071a4 <_dtoa_r+0x6e4>
 8007170:	4642      	mov	r2, r8
 8007172:	464b      	mov	r3, r9
 8007174:	4630      	mov	r0, r6
 8007176:	4639      	mov	r1, r7
 8007178:	f7f9 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800717c:	b110      	cbz	r0, 8007184 <_dtoa_r+0x6c4>
 800717e:	9b01      	ldr	r3, [sp, #4]
 8007180:	07db      	lsls	r3, r3, #31
 8007182:	d40f      	bmi.n	80071a4 <_dtoa_r+0x6e4>
 8007184:	4651      	mov	r1, sl
 8007186:	4620      	mov	r0, r4
 8007188:	f000 ff36 	bl	8007ff8 <_Bfree>
 800718c:	2300      	movs	r3, #0
 800718e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007190:	702b      	strb	r3, [r5, #0]
 8007192:	f10b 0301 	add.w	r3, fp, #1
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800719a:	2b00      	cmp	r3, #0
 800719c:	f43f ace2 	beq.w	8006b64 <_dtoa_r+0xa4>
 80071a0:	601d      	str	r5, [r3, #0]
 80071a2:	e4df      	b.n	8006b64 <_dtoa_r+0xa4>
 80071a4:	465f      	mov	r7, fp
 80071a6:	462b      	mov	r3, r5
 80071a8:	461d      	mov	r5, r3
 80071aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071ae:	2a39      	cmp	r2, #57	; 0x39
 80071b0:	d106      	bne.n	80071c0 <_dtoa_r+0x700>
 80071b2:	9a00      	ldr	r2, [sp, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d1f7      	bne.n	80071a8 <_dtoa_r+0x6e8>
 80071b8:	9900      	ldr	r1, [sp, #0]
 80071ba:	2230      	movs	r2, #48	; 0x30
 80071bc:	3701      	adds	r7, #1
 80071be:	700a      	strb	r2, [r1, #0]
 80071c0:	781a      	ldrb	r2, [r3, #0]
 80071c2:	3201      	adds	r2, #1
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	e790      	b.n	80070ea <_dtoa_r+0x62a>
 80071c8:	4ba3      	ldr	r3, [pc, #652]	; (8007458 <_dtoa_r+0x998>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	f7f9 fa14 	bl	80005f8 <__aeabi_dmul>
 80071d0:	2200      	movs	r2, #0
 80071d2:	2300      	movs	r3, #0
 80071d4:	4606      	mov	r6, r0
 80071d6:	460f      	mov	r7, r1
 80071d8:	f7f9 fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d09e      	beq.n	800711e <_dtoa_r+0x65e>
 80071e0:	e7d0      	b.n	8007184 <_dtoa_r+0x6c4>
 80071e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071e4:	2a00      	cmp	r2, #0
 80071e6:	f000 80ca 	beq.w	800737e <_dtoa_r+0x8be>
 80071ea:	9a07      	ldr	r2, [sp, #28]
 80071ec:	2a01      	cmp	r2, #1
 80071ee:	f300 80ad 	bgt.w	800734c <_dtoa_r+0x88c>
 80071f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071f4:	2a00      	cmp	r2, #0
 80071f6:	f000 80a5 	beq.w	8007344 <_dtoa_r+0x884>
 80071fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071fe:	9e08      	ldr	r6, [sp, #32]
 8007200:	9d05      	ldr	r5, [sp, #20]
 8007202:	9a05      	ldr	r2, [sp, #20]
 8007204:	441a      	add	r2, r3
 8007206:	9205      	str	r2, [sp, #20]
 8007208:	9a06      	ldr	r2, [sp, #24]
 800720a:	2101      	movs	r1, #1
 800720c:	441a      	add	r2, r3
 800720e:	4620      	mov	r0, r4
 8007210:	9206      	str	r2, [sp, #24]
 8007212:	f000 fff1 	bl	80081f8 <__i2b>
 8007216:	4607      	mov	r7, r0
 8007218:	b165      	cbz	r5, 8007234 <_dtoa_r+0x774>
 800721a:	9b06      	ldr	r3, [sp, #24]
 800721c:	2b00      	cmp	r3, #0
 800721e:	dd09      	ble.n	8007234 <_dtoa_r+0x774>
 8007220:	42ab      	cmp	r3, r5
 8007222:	9a05      	ldr	r2, [sp, #20]
 8007224:	bfa8      	it	ge
 8007226:	462b      	movge	r3, r5
 8007228:	1ad2      	subs	r2, r2, r3
 800722a:	9205      	str	r2, [sp, #20]
 800722c:	9a06      	ldr	r2, [sp, #24]
 800722e:	1aed      	subs	r5, r5, r3
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	9306      	str	r3, [sp, #24]
 8007234:	9b08      	ldr	r3, [sp, #32]
 8007236:	b1f3      	cbz	r3, 8007276 <_dtoa_r+0x7b6>
 8007238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 80a3 	beq.w	8007386 <_dtoa_r+0x8c6>
 8007240:	2e00      	cmp	r6, #0
 8007242:	dd10      	ble.n	8007266 <_dtoa_r+0x7a6>
 8007244:	4639      	mov	r1, r7
 8007246:	4632      	mov	r2, r6
 8007248:	4620      	mov	r0, r4
 800724a:	f001 f895 	bl	8008378 <__pow5mult>
 800724e:	4652      	mov	r2, sl
 8007250:	4601      	mov	r1, r0
 8007252:	4607      	mov	r7, r0
 8007254:	4620      	mov	r0, r4
 8007256:	f000 ffe5 	bl	8008224 <__multiply>
 800725a:	4651      	mov	r1, sl
 800725c:	4680      	mov	r8, r0
 800725e:	4620      	mov	r0, r4
 8007260:	f000 feca 	bl	8007ff8 <_Bfree>
 8007264:	46c2      	mov	sl, r8
 8007266:	9b08      	ldr	r3, [sp, #32]
 8007268:	1b9a      	subs	r2, r3, r6
 800726a:	d004      	beq.n	8007276 <_dtoa_r+0x7b6>
 800726c:	4651      	mov	r1, sl
 800726e:	4620      	mov	r0, r4
 8007270:	f001 f882 	bl	8008378 <__pow5mult>
 8007274:	4682      	mov	sl, r0
 8007276:	2101      	movs	r1, #1
 8007278:	4620      	mov	r0, r4
 800727a:	f000 ffbd 	bl	80081f8 <__i2b>
 800727e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007280:	2b00      	cmp	r3, #0
 8007282:	4606      	mov	r6, r0
 8007284:	f340 8081 	ble.w	800738a <_dtoa_r+0x8ca>
 8007288:	461a      	mov	r2, r3
 800728a:	4601      	mov	r1, r0
 800728c:	4620      	mov	r0, r4
 800728e:	f001 f873 	bl	8008378 <__pow5mult>
 8007292:	9b07      	ldr	r3, [sp, #28]
 8007294:	2b01      	cmp	r3, #1
 8007296:	4606      	mov	r6, r0
 8007298:	dd7a      	ble.n	8007390 <_dtoa_r+0x8d0>
 800729a:	f04f 0800 	mov.w	r8, #0
 800729e:	6933      	ldr	r3, [r6, #16]
 80072a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072a4:	6918      	ldr	r0, [r3, #16]
 80072a6:	f000 ff59 	bl	800815c <__hi0bits>
 80072aa:	f1c0 0020 	rsb	r0, r0, #32
 80072ae:	9b06      	ldr	r3, [sp, #24]
 80072b0:	4418      	add	r0, r3
 80072b2:	f010 001f 	ands.w	r0, r0, #31
 80072b6:	f000 8094 	beq.w	80073e2 <_dtoa_r+0x922>
 80072ba:	f1c0 0320 	rsb	r3, r0, #32
 80072be:	2b04      	cmp	r3, #4
 80072c0:	f340 8085 	ble.w	80073ce <_dtoa_r+0x90e>
 80072c4:	9b05      	ldr	r3, [sp, #20]
 80072c6:	f1c0 001c 	rsb	r0, r0, #28
 80072ca:	4403      	add	r3, r0
 80072cc:	9305      	str	r3, [sp, #20]
 80072ce:	9b06      	ldr	r3, [sp, #24]
 80072d0:	4403      	add	r3, r0
 80072d2:	4405      	add	r5, r0
 80072d4:	9306      	str	r3, [sp, #24]
 80072d6:	9b05      	ldr	r3, [sp, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dd05      	ble.n	80072e8 <_dtoa_r+0x828>
 80072dc:	4651      	mov	r1, sl
 80072de:	461a      	mov	r2, r3
 80072e0:	4620      	mov	r0, r4
 80072e2:	f001 f8a3 	bl	800842c <__lshift>
 80072e6:	4682      	mov	sl, r0
 80072e8:	9b06      	ldr	r3, [sp, #24]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	dd05      	ble.n	80072fa <_dtoa_r+0x83a>
 80072ee:	4631      	mov	r1, r6
 80072f0:	461a      	mov	r2, r3
 80072f2:	4620      	mov	r0, r4
 80072f4:	f001 f89a 	bl	800842c <__lshift>
 80072f8:	4606      	mov	r6, r0
 80072fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d072      	beq.n	80073e6 <_dtoa_r+0x926>
 8007300:	4631      	mov	r1, r6
 8007302:	4650      	mov	r0, sl
 8007304:	f001 f8fe 	bl	8008504 <__mcmp>
 8007308:	2800      	cmp	r0, #0
 800730a:	da6c      	bge.n	80073e6 <_dtoa_r+0x926>
 800730c:	2300      	movs	r3, #0
 800730e:	4651      	mov	r1, sl
 8007310:	220a      	movs	r2, #10
 8007312:	4620      	mov	r0, r4
 8007314:	f000 fe92 	bl	800803c <__multadd>
 8007318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800731a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800731e:	4682      	mov	sl, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 81b0 	beq.w	8007686 <_dtoa_r+0xbc6>
 8007326:	2300      	movs	r3, #0
 8007328:	4639      	mov	r1, r7
 800732a:	220a      	movs	r2, #10
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fe85 	bl	800803c <__multadd>
 8007332:	9b01      	ldr	r3, [sp, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	4607      	mov	r7, r0
 8007338:	f300 8096 	bgt.w	8007468 <_dtoa_r+0x9a8>
 800733c:	9b07      	ldr	r3, [sp, #28]
 800733e:	2b02      	cmp	r3, #2
 8007340:	dc59      	bgt.n	80073f6 <_dtoa_r+0x936>
 8007342:	e091      	b.n	8007468 <_dtoa_r+0x9a8>
 8007344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007346:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800734a:	e758      	b.n	80071fe <_dtoa_r+0x73e>
 800734c:	9b04      	ldr	r3, [sp, #16]
 800734e:	1e5e      	subs	r6, r3, #1
 8007350:	9b08      	ldr	r3, [sp, #32]
 8007352:	42b3      	cmp	r3, r6
 8007354:	bfbf      	itttt	lt
 8007356:	9b08      	ldrlt	r3, [sp, #32]
 8007358:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800735a:	9608      	strlt	r6, [sp, #32]
 800735c:	1af3      	sublt	r3, r6, r3
 800735e:	bfb4      	ite	lt
 8007360:	18d2      	addlt	r2, r2, r3
 8007362:	1b9e      	subge	r6, r3, r6
 8007364:	9b04      	ldr	r3, [sp, #16]
 8007366:	bfbc      	itt	lt
 8007368:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800736a:	2600      	movlt	r6, #0
 800736c:	2b00      	cmp	r3, #0
 800736e:	bfb7      	itett	lt
 8007370:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007374:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007378:	1a9d      	sublt	r5, r3, r2
 800737a:	2300      	movlt	r3, #0
 800737c:	e741      	b.n	8007202 <_dtoa_r+0x742>
 800737e:	9e08      	ldr	r6, [sp, #32]
 8007380:	9d05      	ldr	r5, [sp, #20]
 8007382:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007384:	e748      	b.n	8007218 <_dtoa_r+0x758>
 8007386:	9a08      	ldr	r2, [sp, #32]
 8007388:	e770      	b.n	800726c <_dtoa_r+0x7ac>
 800738a:	9b07      	ldr	r3, [sp, #28]
 800738c:	2b01      	cmp	r3, #1
 800738e:	dc19      	bgt.n	80073c4 <_dtoa_r+0x904>
 8007390:	9b02      	ldr	r3, [sp, #8]
 8007392:	b9bb      	cbnz	r3, 80073c4 <_dtoa_r+0x904>
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800739a:	b99b      	cbnz	r3, 80073c4 <_dtoa_r+0x904>
 800739c:	9b03      	ldr	r3, [sp, #12]
 800739e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073a2:	0d1b      	lsrs	r3, r3, #20
 80073a4:	051b      	lsls	r3, r3, #20
 80073a6:	b183      	cbz	r3, 80073ca <_dtoa_r+0x90a>
 80073a8:	9b05      	ldr	r3, [sp, #20]
 80073aa:	3301      	adds	r3, #1
 80073ac:	9305      	str	r3, [sp, #20]
 80073ae:	9b06      	ldr	r3, [sp, #24]
 80073b0:	3301      	adds	r3, #1
 80073b2:	9306      	str	r3, [sp, #24]
 80073b4:	f04f 0801 	mov.w	r8, #1
 80073b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f47f af6f 	bne.w	800729e <_dtoa_r+0x7de>
 80073c0:	2001      	movs	r0, #1
 80073c2:	e774      	b.n	80072ae <_dtoa_r+0x7ee>
 80073c4:	f04f 0800 	mov.w	r8, #0
 80073c8:	e7f6      	b.n	80073b8 <_dtoa_r+0x8f8>
 80073ca:	4698      	mov	r8, r3
 80073cc:	e7f4      	b.n	80073b8 <_dtoa_r+0x8f8>
 80073ce:	d082      	beq.n	80072d6 <_dtoa_r+0x816>
 80073d0:	9a05      	ldr	r2, [sp, #20]
 80073d2:	331c      	adds	r3, #28
 80073d4:	441a      	add	r2, r3
 80073d6:	9205      	str	r2, [sp, #20]
 80073d8:	9a06      	ldr	r2, [sp, #24]
 80073da:	441a      	add	r2, r3
 80073dc:	441d      	add	r5, r3
 80073de:	9206      	str	r2, [sp, #24]
 80073e0:	e779      	b.n	80072d6 <_dtoa_r+0x816>
 80073e2:	4603      	mov	r3, r0
 80073e4:	e7f4      	b.n	80073d0 <_dtoa_r+0x910>
 80073e6:	9b04      	ldr	r3, [sp, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dc37      	bgt.n	800745c <_dtoa_r+0x99c>
 80073ec:	9b07      	ldr	r3, [sp, #28]
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	dd34      	ble.n	800745c <_dtoa_r+0x99c>
 80073f2:	9b04      	ldr	r3, [sp, #16]
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	9b01      	ldr	r3, [sp, #4]
 80073f8:	b963      	cbnz	r3, 8007414 <_dtoa_r+0x954>
 80073fa:	4631      	mov	r1, r6
 80073fc:	2205      	movs	r2, #5
 80073fe:	4620      	mov	r0, r4
 8007400:	f000 fe1c 	bl	800803c <__multadd>
 8007404:	4601      	mov	r1, r0
 8007406:	4606      	mov	r6, r0
 8007408:	4650      	mov	r0, sl
 800740a:	f001 f87b 	bl	8008504 <__mcmp>
 800740e:	2800      	cmp	r0, #0
 8007410:	f73f adbb 	bgt.w	8006f8a <_dtoa_r+0x4ca>
 8007414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007416:	9d00      	ldr	r5, [sp, #0]
 8007418:	ea6f 0b03 	mvn.w	fp, r3
 800741c:	f04f 0800 	mov.w	r8, #0
 8007420:	4631      	mov	r1, r6
 8007422:	4620      	mov	r0, r4
 8007424:	f000 fde8 	bl	8007ff8 <_Bfree>
 8007428:	2f00      	cmp	r7, #0
 800742a:	f43f aeab 	beq.w	8007184 <_dtoa_r+0x6c4>
 800742e:	f1b8 0f00 	cmp.w	r8, #0
 8007432:	d005      	beq.n	8007440 <_dtoa_r+0x980>
 8007434:	45b8      	cmp	r8, r7
 8007436:	d003      	beq.n	8007440 <_dtoa_r+0x980>
 8007438:	4641      	mov	r1, r8
 800743a:	4620      	mov	r0, r4
 800743c:	f000 fddc 	bl	8007ff8 <_Bfree>
 8007440:	4639      	mov	r1, r7
 8007442:	4620      	mov	r0, r4
 8007444:	f000 fdd8 	bl	8007ff8 <_Bfree>
 8007448:	e69c      	b.n	8007184 <_dtoa_r+0x6c4>
 800744a:	2600      	movs	r6, #0
 800744c:	4637      	mov	r7, r6
 800744e:	e7e1      	b.n	8007414 <_dtoa_r+0x954>
 8007450:	46bb      	mov	fp, r7
 8007452:	4637      	mov	r7, r6
 8007454:	e599      	b.n	8006f8a <_dtoa_r+0x4ca>
 8007456:	bf00      	nop
 8007458:	40240000 	.word	0x40240000
 800745c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 80c8 	beq.w	80075f4 <_dtoa_r+0xb34>
 8007464:	9b04      	ldr	r3, [sp, #16]
 8007466:	9301      	str	r3, [sp, #4]
 8007468:	2d00      	cmp	r5, #0
 800746a:	dd05      	ble.n	8007478 <_dtoa_r+0x9b8>
 800746c:	4639      	mov	r1, r7
 800746e:	462a      	mov	r2, r5
 8007470:	4620      	mov	r0, r4
 8007472:	f000 ffdb 	bl	800842c <__lshift>
 8007476:	4607      	mov	r7, r0
 8007478:	f1b8 0f00 	cmp.w	r8, #0
 800747c:	d05b      	beq.n	8007536 <_dtoa_r+0xa76>
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	4620      	mov	r0, r4
 8007482:	f000 fd79 	bl	8007f78 <_Balloc>
 8007486:	4605      	mov	r5, r0
 8007488:	b928      	cbnz	r0, 8007496 <_dtoa_r+0x9d6>
 800748a:	4b83      	ldr	r3, [pc, #524]	; (8007698 <_dtoa_r+0xbd8>)
 800748c:	4602      	mov	r2, r0
 800748e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007492:	f7ff bb2e 	b.w	8006af2 <_dtoa_r+0x32>
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	3202      	adds	r2, #2
 800749a:	0092      	lsls	r2, r2, #2
 800749c:	f107 010c 	add.w	r1, r7, #12
 80074a0:	300c      	adds	r0, #12
 80074a2:	f7ff fa6f 	bl	8006984 <memcpy>
 80074a6:	2201      	movs	r2, #1
 80074a8:	4629      	mov	r1, r5
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 ffbe 	bl	800842c <__lshift>
 80074b0:	9b00      	ldr	r3, [sp, #0]
 80074b2:	3301      	adds	r3, #1
 80074b4:	9304      	str	r3, [sp, #16]
 80074b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074ba:	4413      	add	r3, r2
 80074bc:	9308      	str	r3, [sp, #32]
 80074be:	9b02      	ldr	r3, [sp, #8]
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	46b8      	mov	r8, r7
 80074c6:	9306      	str	r3, [sp, #24]
 80074c8:	4607      	mov	r7, r0
 80074ca:	9b04      	ldr	r3, [sp, #16]
 80074cc:	4631      	mov	r1, r6
 80074ce:	3b01      	subs	r3, #1
 80074d0:	4650      	mov	r0, sl
 80074d2:	9301      	str	r3, [sp, #4]
 80074d4:	f7ff fa6c 	bl	80069b0 <quorem>
 80074d8:	4641      	mov	r1, r8
 80074da:	9002      	str	r0, [sp, #8]
 80074dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80074e0:	4650      	mov	r0, sl
 80074e2:	f001 f80f 	bl	8008504 <__mcmp>
 80074e6:	463a      	mov	r2, r7
 80074e8:	9005      	str	r0, [sp, #20]
 80074ea:	4631      	mov	r1, r6
 80074ec:	4620      	mov	r0, r4
 80074ee:	f001 f825 	bl	800853c <__mdiff>
 80074f2:	68c2      	ldr	r2, [r0, #12]
 80074f4:	4605      	mov	r5, r0
 80074f6:	bb02      	cbnz	r2, 800753a <_dtoa_r+0xa7a>
 80074f8:	4601      	mov	r1, r0
 80074fa:	4650      	mov	r0, sl
 80074fc:	f001 f802 	bl	8008504 <__mcmp>
 8007500:	4602      	mov	r2, r0
 8007502:	4629      	mov	r1, r5
 8007504:	4620      	mov	r0, r4
 8007506:	9209      	str	r2, [sp, #36]	; 0x24
 8007508:	f000 fd76 	bl	8007ff8 <_Bfree>
 800750c:	9b07      	ldr	r3, [sp, #28]
 800750e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007510:	9d04      	ldr	r5, [sp, #16]
 8007512:	ea43 0102 	orr.w	r1, r3, r2
 8007516:	9b06      	ldr	r3, [sp, #24]
 8007518:	4319      	orrs	r1, r3
 800751a:	d110      	bne.n	800753e <_dtoa_r+0xa7e>
 800751c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007520:	d029      	beq.n	8007576 <_dtoa_r+0xab6>
 8007522:	9b05      	ldr	r3, [sp, #20]
 8007524:	2b00      	cmp	r3, #0
 8007526:	dd02      	ble.n	800752e <_dtoa_r+0xa6e>
 8007528:	9b02      	ldr	r3, [sp, #8]
 800752a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800752e:	9b01      	ldr	r3, [sp, #4]
 8007530:	f883 9000 	strb.w	r9, [r3]
 8007534:	e774      	b.n	8007420 <_dtoa_r+0x960>
 8007536:	4638      	mov	r0, r7
 8007538:	e7ba      	b.n	80074b0 <_dtoa_r+0x9f0>
 800753a:	2201      	movs	r2, #1
 800753c:	e7e1      	b.n	8007502 <_dtoa_r+0xa42>
 800753e:	9b05      	ldr	r3, [sp, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	db04      	blt.n	800754e <_dtoa_r+0xa8e>
 8007544:	9907      	ldr	r1, [sp, #28]
 8007546:	430b      	orrs	r3, r1
 8007548:	9906      	ldr	r1, [sp, #24]
 800754a:	430b      	orrs	r3, r1
 800754c:	d120      	bne.n	8007590 <_dtoa_r+0xad0>
 800754e:	2a00      	cmp	r2, #0
 8007550:	dded      	ble.n	800752e <_dtoa_r+0xa6e>
 8007552:	4651      	mov	r1, sl
 8007554:	2201      	movs	r2, #1
 8007556:	4620      	mov	r0, r4
 8007558:	f000 ff68 	bl	800842c <__lshift>
 800755c:	4631      	mov	r1, r6
 800755e:	4682      	mov	sl, r0
 8007560:	f000 ffd0 	bl	8008504 <__mcmp>
 8007564:	2800      	cmp	r0, #0
 8007566:	dc03      	bgt.n	8007570 <_dtoa_r+0xab0>
 8007568:	d1e1      	bne.n	800752e <_dtoa_r+0xa6e>
 800756a:	f019 0f01 	tst.w	r9, #1
 800756e:	d0de      	beq.n	800752e <_dtoa_r+0xa6e>
 8007570:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007574:	d1d8      	bne.n	8007528 <_dtoa_r+0xa68>
 8007576:	9a01      	ldr	r2, [sp, #4]
 8007578:	2339      	movs	r3, #57	; 0x39
 800757a:	7013      	strb	r3, [r2, #0]
 800757c:	462b      	mov	r3, r5
 800757e:	461d      	mov	r5, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007586:	2a39      	cmp	r2, #57	; 0x39
 8007588:	d06c      	beq.n	8007664 <_dtoa_r+0xba4>
 800758a:	3201      	adds	r2, #1
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	e747      	b.n	8007420 <_dtoa_r+0x960>
 8007590:	2a00      	cmp	r2, #0
 8007592:	dd07      	ble.n	80075a4 <_dtoa_r+0xae4>
 8007594:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007598:	d0ed      	beq.n	8007576 <_dtoa_r+0xab6>
 800759a:	9a01      	ldr	r2, [sp, #4]
 800759c:	f109 0301 	add.w	r3, r9, #1
 80075a0:	7013      	strb	r3, [r2, #0]
 80075a2:	e73d      	b.n	8007420 <_dtoa_r+0x960>
 80075a4:	9b04      	ldr	r3, [sp, #16]
 80075a6:	9a08      	ldr	r2, [sp, #32]
 80075a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d043      	beq.n	8007638 <_dtoa_r+0xb78>
 80075b0:	4651      	mov	r1, sl
 80075b2:	2300      	movs	r3, #0
 80075b4:	220a      	movs	r2, #10
 80075b6:	4620      	mov	r0, r4
 80075b8:	f000 fd40 	bl	800803c <__multadd>
 80075bc:	45b8      	cmp	r8, r7
 80075be:	4682      	mov	sl, r0
 80075c0:	f04f 0300 	mov.w	r3, #0
 80075c4:	f04f 020a 	mov.w	r2, #10
 80075c8:	4641      	mov	r1, r8
 80075ca:	4620      	mov	r0, r4
 80075cc:	d107      	bne.n	80075de <_dtoa_r+0xb1e>
 80075ce:	f000 fd35 	bl	800803c <__multadd>
 80075d2:	4680      	mov	r8, r0
 80075d4:	4607      	mov	r7, r0
 80075d6:	9b04      	ldr	r3, [sp, #16]
 80075d8:	3301      	adds	r3, #1
 80075da:	9304      	str	r3, [sp, #16]
 80075dc:	e775      	b.n	80074ca <_dtoa_r+0xa0a>
 80075de:	f000 fd2d 	bl	800803c <__multadd>
 80075e2:	4639      	mov	r1, r7
 80075e4:	4680      	mov	r8, r0
 80075e6:	2300      	movs	r3, #0
 80075e8:	220a      	movs	r2, #10
 80075ea:	4620      	mov	r0, r4
 80075ec:	f000 fd26 	bl	800803c <__multadd>
 80075f0:	4607      	mov	r7, r0
 80075f2:	e7f0      	b.n	80075d6 <_dtoa_r+0xb16>
 80075f4:	9b04      	ldr	r3, [sp, #16]
 80075f6:	9301      	str	r3, [sp, #4]
 80075f8:	9d00      	ldr	r5, [sp, #0]
 80075fa:	4631      	mov	r1, r6
 80075fc:	4650      	mov	r0, sl
 80075fe:	f7ff f9d7 	bl	80069b0 <quorem>
 8007602:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007606:	9b00      	ldr	r3, [sp, #0]
 8007608:	f805 9b01 	strb.w	r9, [r5], #1
 800760c:	1aea      	subs	r2, r5, r3
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	4293      	cmp	r3, r2
 8007612:	dd07      	ble.n	8007624 <_dtoa_r+0xb64>
 8007614:	4651      	mov	r1, sl
 8007616:	2300      	movs	r3, #0
 8007618:	220a      	movs	r2, #10
 800761a:	4620      	mov	r0, r4
 800761c:	f000 fd0e 	bl	800803c <__multadd>
 8007620:	4682      	mov	sl, r0
 8007622:	e7ea      	b.n	80075fa <_dtoa_r+0xb3a>
 8007624:	9b01      	ldr	r3, [sp, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	bfc8      	it	gt
 800762a:	461d      	movgt	r5, r3
 800762c:	9b00      	ldr	r3, [sp, #0]
 800762e:	bfd8      	it	le
 8007630:	2501      	movle	r5, #1
 8007632:	441d      	add	r5, r3
 8007634:	f04f 0800 	mov.w	r8, #0
 8007638:	4651      	mov	r1, sl
 800763a:	2201      	movs	r2, #1
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fef5 	bl	800842c <__lshift>
 8007642:	4631      	mov	r1, r6
 8007644:	4682      	mov	sl, r0
 8007646:	f000 ff5d 	bl	8008504 <__mcmp>
 800764a:	2800      	cmp	r0, #0
 800764c:	dc96      	bgt.n	800757c <_dtoa_r+0xabc>
 800764e:	d102      	bne.n	8007656 <_dtoa_r+0xb96>
 8007650:	f019 0f01 	tst.w	r9, #1
 8007654:	d192      	bne.n	800757c <_dtoa_r+0xabc>
 8007656:	462b      	mov	r3, r5
 8007658:	461d      	mov	r5, r3
 800765a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800765e:	2a30      	cmp	r2, #48	; 0x30
 8007660:	d0fa      	beq.n	8007658 <_dtoa_r+0xb98>
 8007662:	e6dd      	b.n	8007420 <_dtoa_r+0x960>
 8007664:	9a00      	ldr	r2, [sp, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d189      	bne.n	800757e <_dtoa_r+0xabe>
 800766a:	f10b 0b01 	add.w	fp, fp, #1
 800766e:	2331      	movs	r3, #49	; 0x31
 8007670:	e796      	b.n	80075a0 <_dtoa_r+0xae0>
 8007672:	4b0a      	ldr	r3, [pc, #40]	; (800769c <_dtoa_r+0xbdc>)
 8007674:	f7ff ba99 	b.w	8006baa <_dtoa_r+0xea>
 8007678:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800767a:	2b00      	cmp	r3, #0
 800767c:	f47f aa6d 	bne.w	8006b5a <_dtoa_r+0x9a>
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <_dtoa_r+0xbe0>)
 8007682:	f7ff ba92 	b.w	8006baa <_dtoa_r+0xea>
 8007686:	9b01      	ldr	r3, [sp, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	dcb5      	bgt.n	80075f8 <_dtoa_r+0xb38>
 800768c:	9b07      	ldr	r3, [sp, #28]
 800768e:	2b02      	cmp	r3, #2
 8007690:	f73f aeb1 	bgt.w	80073f6 <_dtoa_r+0x936>
 8007694:	e7b0      	b.n	80075f8 <_dtoa_r+0xb38>
 8007696:	bf00      	nop
 8007698:	08009538 	.word	0x08009538
 800769c:	08009490 	.word	0x08009490
 80076a0:	080094bc 	.word	0x080094bc

080076a4 <_free_r>:
 80076a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076a6:	2900      	cmp	r1, #0
 80076a8:	d044      	beq.n	8007734 <_free_r+0x90>
 80076aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ae:	9001      	str	r0, [sp, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f1a1 0404 	sub.w	r4, r1, #4
 80076b6:	bfb8      	it	lt
 80076b8:	18e4      	addlt	r4, r4, r3
 80076ba:	f000 fc51 	bl	8007f60 <__malloc_lock>
 80076be:	4a1e      	ldr	r2, [pc, #120]	; (8007738 <_free_r+0x94>)
 80076c0:	9801      	ldr	r0, [sp, #4]
 80076c2:	6813      	ldr	r3, [r2, #0]
 80076c4:	b933      	cbnz	r3, 80076d4 <_free_r+0x30>
 80076c6:	6063      	str	r3, [r4, #4]
 80076c8:	6014      	str	r4, [r2, #0]
 80076ca:	b003      	add	sp, #12
 80076cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076d0:	f000 bc4c 	b.w	8007f6c <__malloc_unlock>
 80076d4:	42a3      	cmp	r3, r4
 80076d6:	d908      	bls.n	80076ea <_free_r+0x46>
 80076d8:	6825      	ldr	r5, [r4, #0]
 80076da:	1961      	adds	r1, r4, r5
 80076dc:	428b      	cmp	r3, r1
 80076de:	bf01      	itttt	eq
 80076e0:	6819      	ldreq	r1, [r3, #0]
 80076e2:	685b      	ldreq	r3, [r3, #4]
 80076e4:	1949      	addeq	r1, r1, r5
 80076e6:	6021      	streq	r1, [r4, #0]
 80076e8:	e7ed      	b.n	80076c6 <_free_r+0x22>
 80076ea:	461a      	mov	r2, r3
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	b10b      	cbz	r3, 80076f4 <_free_r+0x50>
 80076f0:	42a3      	cmp	r3, r4
 80076f2:	d9fa      	bls.n	80076ea <_free_r+0x46>
 80076f4:	6811      	ldr	r1, [r2, #0]
 80076f6:	1855      	adds	r5, r2, r1
 80076f8:	42a5      	cmp	r5, r4
 80076fa:	d10b      	bne.n	8007714 <_free_r+0x70>
 80076fc:	6824      	ldr	r4, [r4, #0]
 80076fe:	4421      	add	r1, r4
 8007700:	1854      	adds	r4, r2, r1
 8007702:	42a3      	cmp	r3, r4
 8007704:	6011      	str	r1, [r2, #0]
 8007706:	d1e0      	bne.n	80076ca <_free_r+0x26>
 8007708:	681c      	ldr	r4, [r3, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	6053      	str	r3, [r2, #4]
 800770e:	440c      	add	r4, r1
 8007710:	6014      	str	r4, [r2, #0]
 8007712:	e7da      	b.n	80076ca <_free_r+0x26>
 8007714:	d902      	bls.n	800771c <_free_r+0x78>
 8007716:	230c      	movs	r3, #12
 8007718:	6003      	str	r3, [r0, #0]
 800771a:	e7d6      	b.n	80076ca <_free_r+0x26>
 800771c:	6825      	ldr	r5, [r4, #0]
 800771e:	1961      	adds	r1, r4, r5
 8007720:	428b      	cmp	r3, r1
 8007722:	bf04      	itt	eq
 8007724:	6819      	ldreq	r1, [r3, #0]
 8007726:	685b      	ldreq	r3, [r3, #4]
 8007728:	6063      	str	r3, [r4, #4]
 800772a:	bf04      	itt	eq
 800772c:	1949      	addeq	r1, r1, r5
 800772e:	6021      	streq	r1, [r4, #0]
 8007730:	6054      	str	r4, [r2, #4]
 8007732:	e7ca      	b.n	80076ca <_free_r+0x26>
 8007734:	b003      	add	sp, #12
 8007736:	bd30      	pop	{r4, r5, pc}
 8007738:	20000588 	.word	0x20000588

0800773c <rshift>:
 800773c:	6903      	ldr	r3, [r0, #16]
 800773e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007742:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007746:	ea4f 1261 	mov.w	r2, r1, asr #5
 800774a:	f100 0414 	add.w	r4, r0, #20
 800774e:	dd45      	ble.n	80077dc <rshift+0xa0>
 8007750:	f011 011f 	ands.w	r1, r1, #31
 8007754:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007758:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800775c:	d10c      	bne.n	8007778 <rshift+0x3c>
 800775e:	f100 0710 	add.w	r7, r0, #16
 8007762:	4629      	mov	r1, r5
 8007764:	42b1      	cmp	r1, r6
 8007766:	d334      	bcc.n	80077d2 <rshift+0x96>
 8007768:	1a9b      	subs	r3, r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	1eea      	subs	r2, r5, #3
 800776e:	4296      	cmp	r6, r2
 8007770:	bf38      	it	cc
 8007772:	2300      	movcc	r3, #0
 8007774:	4423      	add	r3, r4
 8007776:	e015      	b.n	80077a4 <rshift+0x68>
 8007778:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800777c:	f1c1 0820 	rsb	r8, r1, #32
 8007780:	40cf      	lsrs	r7, r1
 8007782:	f105 0e04 	add.w	lr, r5, #4
 8007786:	46a1      	mov	r9, r4
 8007788:	4576      	cmp	r6, lr
 800778a:	46f4      	mov	ip, lr
 800778c:	d815      	bhi.n	80077ba <rshift+0x7e>
 800778e:	1a9a      	subs	r2, r3, r2
 8007790:	0092      	lsls	r2, r2, #2
 8007792:	3a04      	subs	r2, #4
 8007794:	3501      	adds	r5, #1
 8007796:	42ae      	cmp	r6, r5
 8007798:	bf38      	it	cc
 800779a:	2200      	movcc	r2, #0
 800779c:	18a3      	adds	r3, r4, r2
 800779e:	50a7      	str	r7, [r4, r2]
 80077a0:	b107      	cbz	r7, 80077a4 <rshift+0x68>
 80077a2:	3304      	adds	r3, #4
 80077a4:	1b1a      	subs	r2, r3, r4
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80077ac:	bf08      	it	eq
 80077ae:	2300      	moveq	r3, #0
 80077b0:	6102      	str	r2, [r0, #16]
 80077b2:	bf08      	it	eq
 80077b4:	6143      	streq	r3, [r0, #20]
 80077b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077ba:	f8dc c000 	ldr.w	ip, [ip]
 80077be:	fa0c fc08 	lsl.w	ip, ip, r8
 80077c2:	ea4c 0707 	orr.w	r7, ip, r7
 80077c6:	f849 7b04 	str.w	r7, [r9], #4
 80077ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077ce:	40cf      	lsrs	r7, r1
 80077d0:	e7da      	b.n	8007788 <rshift+0x4c>
 80077d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80077d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80077da:	e7c3      	b.n	8007764 <rshift+0x28>
 80077dc:	4623      	mov	r3, r4
 80077de:	e7e1      	b.n	80077a4 <rshift+0x68>

080077e0 <__hexdig_fun>:
 80077e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80077e4:	2b09      	cmp	r3, #9
 80077e6:	d802      	bhi.n	80077ee <__hexdig_fun+0xe>
 80077e8:	3820      	subs	r0, #32
 80077ea:	b2c0      	uxtb	r0, r0
 80077ec:	4770      	bx	lr
 80077ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80077f2:	2b05      	cmp	r3, #5
 80077f4:	d801      	bhi.n	80077fa <__hexdig_fun+0x1a>
 80077f6:	3847      	subs	r0, #71	; 0x47
 80077f8:	e7f7      	b.n	80077ea <__hexdig_fun+0xa>
 80077fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80077fe:	2b05      	cmp	r3, #5
 8007800:	d801      	bhi.n	8007806 <__hexdig_fun+0x26>
 8007802:	3827      	subs	r0, #39	; 0x27
 8007804:	e7f1      	b.n	80077ea <__hexdig_fun+0xa>
 8007806:	2000      	movs	r0, #0
 8007808:	4770      	bx	lr
	...

0800780c <__gethex>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	4617      	mov	r7, r2
 8007812:	680a      	ldr	r2, [r1, #0]
 8007814:	b085      	sub	sp, #20
 8007816:	f102 0b02 	add.w	fp, r2, #2
 800781a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800781e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007822:	4681      	mov	r9, r0
 8007824:	468a      	mov	sl, r1
 8007826:	9302      	str	r3, [sp, #8]
 8007828:	32fe      	adds	r2, #254	; 0xfe
 800782a:	eb02 030b 	add.w	r3, r2, fp
 800782e:	46d8      	mov	r8, fp
 8007830:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007834:	9301      	str	r3, [sp, #4]
 8007836:	2830      	cmp	r0, #48	; 0x30
 8007838:	d0f7      	beq.n	800782a <__gethex+0x1e>
 800783a:	f7ff ffd1 	bl	80077e0 <__hexdig_fun>
 800783e:	4604      	mov	r4, r0
 8007840:	2800      	cmp	r0, #0
 8007842:	d138      	bne.n	80078b6 <__gethex+0xaa>
 8007844:	49a7      	ldr	r1, [pc, #668]	; (8007ae4 <__gethex+0x2d8>)
 8007846:	2201      	movs	r2, #1
 8007848:	4640      	mov	r0, r8
 800784a:	f7ff f812 	bl	8006872 <strncmp>
 800784e:	4606      	mov	r6, r0
 8007850:	2800      	cmp	r0, #0
 8007852:	d169      	bne.n	8007928 <__gethex+0x11c>
 8007854:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007858:	465d      	mov	r5, fp
 800785a:	f7ff ffc1 	bl	80077e0 <__hexdig_fun>
 800785e:	2800      	cmp	r0, #0
 8007860:	d064      	beq.n	800792c <__gethex+0x120>
 8007862:	465a      	mov	r2, fp
 8007864:	7810      	ldrb	r0, [r2, #0]
 8007866:	2830      	cmp	r0, #48	; 0x30
 8007868:	4690      	mov	r8, r2
 800786a:	f102 0201 	add.w	r2, r2, #1
 800786e:	d0f9      	beq.n	8007864 <__gethex+0x58>
 8007870:	f7ff ffb6 	bl	80077e0 <__hexdig_fun>
 8007874:	2301      	movs	r3, #1
 8007876:	fab0 f480 	clz	r4, r0
 800787a:	0964      	lsrs	r4, r4, #5
 800787c:	465e      	mov	r6, fp
 800787e:	9301      	str	r3, [sp, #4]
 8007880:	4642      	mov	r2, r8
 8007882:	4615      	mov	r5, r2
 8007884:	3201      	adds	r2, #1
 8007886:	7828      	ldrb	r0, [r5, #0]
 8007888:	f7ff ffaa 	bl	80077e0 <__hexdig_fun>
 800788c:	2800      	cmp	r0, #0
 800788e:	d1f8      	bne.n	8007882 <__gethex+0x76>
 8007890:	4994      	ldr	r1, [pc, #592]	; (8007ae4 <__gethex+0x2d8>)
 8007892:	2201      	movs	r2, #1
 8007894:	4628      	mov	r0, r5
 8007896:	f7fe ffec 	bl	8006872 <strncmp>
 800789a:	b978      	cbnz	r0, 80078bc <__gethex+0xb0>
 800789c:	b946      	cbnz	r6, 80078b0 <__gethex+0xa4>
 800789e:	1c6e      	adds	r6, r5, #1
 80078a0:	4632      	mov	r2, r6
 80078a2:	4615      	mov	r5, r2
 80078a4:	3201      	adds	r2, #1
 80078a6:	7828      	ldrb	r0, [r5, #0]
 80078a8:	f7ff ff9a 	bl	80077e0 <__hexdig_fun>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d1f8      	bne.n	80078a2 <__gethex+0x96>
 80078b0:	1b73      	subs	r3, r6, r5
 80078b2:	009e      	lsls	r6, r3, #2
 80078b4:	e004      	b.n	80078c0 <__gethex+0xb4>
 80078b6:	2400      	movs	r4, #0
 80078b8:	4626      	mov	r6, r4
 80078ba:	e7e1      	b.n	8007880 <__gethex+0x74>
 80078bc:	2e00      	cmp	r6, #0
 80078be:	d1f7      	bne.n	80078b0 <__gethex+0xa4>
 80078c0:	782b      	ldrb	r3, [r5, #0]
 80078c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078c6:	2b50      	cmp	r3, #80	; 0x50
 80078c8:	d13d      	bne.n	8007946 <__gethex+0x13a>
 80078ca:	786b      	ldrb	r3, [r5, #1]
 80078cc:	2b2b      	cmp	r3, #43	; 0x2b
 80078ce:	d02f      	beq.n	8007930 <__gethex+0x124>
 80078d0:	2b2d      	cmp	r3, #45	; 0x2d
 80078d2:	d031      	beq.n	8007938 <__gethex+0x12c>
 80078d4:	1c69      	adds	r1, r5, #1
 80078d6:	f04f 0b00 	mov.w	fp, #0
 80078da:	7808      	ldrb	r0, [r1, #0]
 80078dc:	f7ff ff80 	bl	80077e0 <__hexdig_fun>
 80078e0:	1e42      	subs	r2, r0, #1
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	2a18      	cmp	r2, #24
 80078e6:	d82e      	bhi.n	8007946 <__gethex+0x13a>
 80078e8:	f1a0 0210 	sub.w	r2, r0, #16
 80078ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078f0:	f7ff ff76 	bl	80077e0 <__hexdig_fun>
 80078f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80078f8:	fa5f fc8c 	uxtb.w	ip, ip
 80078fc:	f1bc 0f18 	cmp.w	ip, #24
 8007900:	d91d      	bls.n	800793e <__gethex+0x132>
 8007902:	f1bb 0f00 	cmp.w	fp, #0
 8007906:	d000      	beq.n	800790a <__gethex+0xfe>
 8007908:	4252      	negs	r2, r2
 800790a:	4416      	add	r6, r2
 800790c:	f8ca 1000 	str.w	r1, [sl]
 8007910:	b1dc      	cbz	r4, 800794a <__gethex+0x13e>
 8007912:	9b01      	ldr	r3, [sp, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	bf14      	ite	ne
 8007918:	f04f 0800 	movne.w	r8, #0
 800791c:	f04f 0806 	moveq.w	r8, #6
 8007920:	4640      	mov	r0, r8
 8007922:	b005      	add	sp, #20
 8007924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007928:	4645      	mov	r5, r8
 800792a:	4626      	mov	r6, r4
 800792c:	2401      	movs	r4, #1
 800792e:	e7c7      	b.n	80078c0 <__gethex+0xb4>
 8007930:	f04f 0b00 	mov.w	fp, #0
 8007934:	1ca9      	adds	r1, r5, #2
 8007936:	e7d0      	b.n	80078da <__gethex+0xce>
 8007938:	f04f 0b01 	mov.w	fp, #1
 800793c:	e7fa      	b.n	8007934 <__gethex+0x128>
 800793e:	230a      	movs	r3, #10
 8007940:	fb03 0002 	mla	r0, r3, r2, r0
 8007944:	e7d0      	b.n	80078e8 <__gethex+0xdc>
 8007946:	4629      	mov	r1, r5
 8007948:	e7e0      	b.n	800790c <__gethex+0x100>
 800794a:	eba5 0308 	sub.w	r3, r5, r8
 800794e:	3b01      	subs	r3, #1
 8007950:	4621      	mov	r1, r4
 8007952:	2b07      	cmp	r3, #7
 8007954:	dc0a      	bgt.n	800796c <__gethex+0x160>
 8007956:	4648      	mov	r0, r9
 8007958:	f000 fb0e 	bl	8007f78 <_Balloc>
 800795c:	4604      	mov	r4, r0
 800795e:	b940      	cbnz	r0, 8007972 <__gethex+0x166>
 8007960:	4b61      	ldr	r3, [pc, #388]	; (8007ae8 <__gethex+0x2dc>)
 8007962:	4602      	mov	r2, r0
 8007964:	21e4      	movs	r1, #228	; 0xe4
 8007966:	4861      	ldr	r0, [pc, #388]	; (8007aec <__gethex+0x2e0>)
 8007968:	f001 f9f0 	bl	8008d4c <__assert_func>
 800796c:	3101      	adds	r1, #1
 800796e:	105b      	asrs	r3, r3, #1
 8007970:	e7ef      	b.n	8007952 <__gethex+0x146>
 8007972:	f100 0a14 	add.w	sl, r0, #20
 8007976:	2300      	movs	r3, #0
 8007978:	495a      	ldr	r1, [pc, #360]	; (8007ae4 <__gethex+0x2d8>)
 800797a:	f8cd a004 	str.w	sl, [sp, #4]
 800797e:	469b      	mov	fp, r3
 8007980:	45a8      	cmp	r8, r5
 8007982:	d342      	bcc.n	8007a0a <__gethex+0x1fe>
 8007984:	9801      	ldr	r0, [sp, #4]
 8007986:	f840 bb04 	str.w	fp, [r0], #4
 800798a:	eba0 000a 	sub.w	r0, r0, sl
 800798e:	1080      	asrs	r0, r0, #2
 8007990:	6120      	str	r0, [r4, #16]
 8007992:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8007996:	4658      	mov	r0, fp
 8007998:	f000 fbe0 	bl	800815c <__hi0bits>
 800799c:	683d      	ldr	r5, [r7, #0]
 800799e:	eba8 0000 	sub.w	r0, r8, r0
 80079a2:	42a8      	cmp	r0, r5
 80079a4:	dd59      	ble.n	8007a5a <__gethex+0x24e>
 80079a6:	eba0 0805 	sub.w	r8, r0, r5
 80079aa:	4641      	mov	r1, r8
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 ff6f 	bl	8008890 <__any_on>
 80079b2:	4683      	mov	fp, r0
 80079b4:	b1b8      	cbz	r0, 80079e6 <__gethex+0x1da>
 80079b6:	f108 33ff 	add.w	r3, r8, #4294967295
 80079ba:	1159      	asrs	r1, r3, #5
 80079bc:	f003 021f 	and.w	r2, r3, #31
 80079c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80079c4:	f04f 0b01 	mov.w	fp, #1
 80079c8:	fa0b f202 	lsl.w	r2, fp, r2
 80079cc:	420a      	tst	r2, r1
 80079ce:	d00a      	beq.n	80079e6 <__gethex+0x1da>
 80079d0:	455b      	cmp	r3, fp
 80079d2:	dd06      	ble.n	80079e2 <__gethex+0x1d6>
 80079d4:	f1a8 0102 	sub.w	r1, r8, #2
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 ff59 	bl	8008890 <__any_on>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d138      	bne.n	8007a54 <__gethex+0x248>
 80079e2:	f04f 0b02 	mov.w	fp, #2
 80079e6:	4641      	mov	r1, r8
 80079e8:	4620      	mov	r0, r4
 80079ea:	f7ff fea7 	bl	800773c <rshift>
 80079ee:	4446      	add	r6, r8
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	42b3      	cmp	r3, r6
 80079f4:	da41      	bge.n	8007a7a <__gethex+0x26e>
 80079f6:	4621      	mov	r1, r4
 80079f8:	4648      	mov	r0, r9
 80079fa:	f000 fafd 	bl	8007ff8 <_Bfree>
 80079fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a00:	2300      	movs	r3, #0
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007a08:	e78a      	b.n	8007920 <__gethex+0x114>
 8007a0a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007a0e:	2a2e      	cmp	r2, #46	; 0x2e
 8007a10:	d014      	beq.n	8007a3c <__gethex+0x230>
 8007a12:	2b20      	cmp	r3, #32
 8007a14:	d106      	bne.n	8007a24 <__gethex+0x218>
 8007a16:	9b01      	ldr	r3, [sp, #4]
 8007a18:	f843 bb04 	str.w	fp, [r3], #4
 8007a1c:	f04f 0b00 	mov.w	fp, #0
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	465b      	mov	r3, fp
 8007a24:	7828      	ldrb	r0, [r5, #0]
 8007a26:	9303      	str	r3, [sp, #12]
 8007a28:	f7ff feda 	bl	80077e0 <__hexdig_fun>
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	f000 000f 	and.w	r0, r0, #15
 8007a32:	4098      	lsls	r0, r3
 8007a34:	ea4b 0b00 	orr.w	fp, fp, r0
 8007a38:	3304      	adds	r3, #4
 8007a3a:	e7a1      	b.n	8007980 <__gethex+0x174>
 8007a3c:	45a8      	cmp	r8, r5
 8007a3e:	d8e8      	bhi.n	8007a12 <__gethex+0x206>
 8007a40:	2201      	movs	r2, #1
 8007a42:	4628      	mov	r0, r5
 8007a44:	9303      	str	r3, [sp, #12]
 8007a46:	f7fe ff14 	bl	8006872 <strncmp>
 8007a4a:	4926      	ldr	r1, [pc, #152]	; (8007ae4 <__gethex+0x2d8>)
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d1df      	bne.n	8007a12 <__gethex+0x206>
 8007a52:	e795      	b.n	8007980 <__gethex+0x174>
 8007a54:	f04f 0b03 	mov.w	fp, #3
 8007a58:	e7c5      	b.n	80079e6 <__gethex+0x1da>
 8007a5a:	da0b      	bge.n	8007a74 <__gethex+0x268>
 8007a5c:	eba5 0800 	sub.w	r8, r5, r0
 8007a60:	4621      	mov	r1, r4
 8007a62:	4642      	mov	r2, r8
 8007a64:	4648      	mov	r0, r9
 8007a66:	f000 fce1 	bl	800842c <__lshift>
 8007a6a:	eba6 0608 	sub.w	r6, r6, r8
 8007a6e:	4604      	mov	r4, r0
 8007a70:	f100 0a14 	add.w	sl, r0, #20
 8007a74:	f04f 0b00 	mov.w	fp, #0
 8007a78:	e7ba      	b.n	80079f0 <__gethex+0x1e4>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	42b3      	cmp	r3, r6
 8007a7e:	dd73      	ble.n	8007b68 <__gethex+0x35c>
 8007a80:	1b9e      	subs	r6, r3, r6
 8007a82:	42b5      	cmp	r5, r6
 8007a84:	dc34      	bgt.n	8007af0 <__gethex+0x2e4>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d023      	beq.n	8007ad4 <__gethex+0x2c8>
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d025      	beq.n	8007adc <__gethex+0x2d0>
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d115      	bne.n	8007ac0 <__gethex+0x2b4>
 8007a94:	42b5      	cmp	r5, r6
 8007a96:	d113      	bne.n	8007ac0 <__gethex+0x2b4>
 8007a98:	2d01      	cmp	r5, #1
 8007a9a:	d10b      	bne.n	8007ab4 <__gethex+0x2a8>
 8007a9c:	9a02      	ldr	r2, [sp, #8]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	6123      	str	r3, [r4, #16]
 8007aa6:	f8ca 3000 	str.w	r3, [sl]
 8007aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aac:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007ab0:	601c      	str	r4, [r3, #0]
 8007ab2:	e735      	b.n	8007920 <__gethex+0x114>
 8007ab4:	1e69      	subs	r1, r5, #1
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f000 feea 	bl	8008890 <__any_on>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d1ed      	bne.n	8007a9c <__gethex+0x290>
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4648      	mov	r0, r9
 8007ac4:	f000 fa98 	bl	8007ff8 <_Bfree>
 8007ac8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007aca:	2300      	movs	r3, #0
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007ad2:	e725      	b.n	8007920 <__gethex+0x114>
 8007ad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1f2      	bne.n	8007ac0 <__gethex+0x2b4>
 8007ada:	e7df      	b.n	8007a9c <__gethex+0x290>
 8007adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1dc      	bne.n	8007a9c <__gethex+0x290>
 8007ae2:	e7ed      	b.n	8007ac0 <__gethex+0x2b4>
 8007ae4:	0800942c 	.word	0x0800942c
 8007ae8:	08009538 	.word	0x08009538
 8007aec:	08009549 	.word	0x08009549
 8007af0:	f106 38ff 	add.w	r8, r6, #4294967295
 8007af4:	f1bb 0f00 	cmp.w	fp, #0
 8007af8:	d133      	bne.n	8007b62 <__gethex+0x356>
 8007afa:	f1b8 0f00 	cmp.w	r8, #0
 8007afe:	d004      	beq.n	8007b0a <__gethex+0x2fe>
 8007b00:	4641      	mov	r1, r8
 8007b02:	4620      	mov	r0, r4
 8007b04:	f000 fec4 	bl	8008890 <__any_on>
 8007b08:	4683      	mov	fp, r0
 8007b0a:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007b0e:	2301      	movs	r3, #1
 8007b10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007b14:	f008 081f 	and.w	r8, r8, #31
 8007b18:	fa03 f308 	lsl.w	r3, r3, r8
 8007b1c:	4213      	tst	r3, r2
 8007b1e:	4631      	mov	r1, r6
 8007b20:	4620      	mov	r0, r4
 8007b22:	bf18      	it	ne
 8007b24:	f04b 0b02 	orrne.w	fp, fp, #2
 8007b28:	1bad      	subs	r5, r5, r6
 8007b2a:	f7ff fe07 	bl	800773c <rshift>
 8007b2e:	687e      	ldr	r6, [r7, #4]
 8007b30:	f04f 0802 	mov.w	r8, #2
 8007b34:	f1bb 0f00 	cmp.w	fp, #0
 8007b38:	d04a      	beq.n	8007bd0 <__gethex+0x3c4>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d016      	beq.n	8007b6e <__gethex+0x362>
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d018      	beq.n	8007b76 <__gethex+0x36a>
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d109      	bne.n	8007b5c <__gethex+0x350>
 8007b48:	f01b 0f02 	tst.w	fp, #2
 8007b4c:	d006      	beq.n	8007b5c <__gethex+0x350>
 8007b4e:	f8da 3000 	ldr.w	r3, [sl]
 8007b52:	ea4b 0b03 	orr.w	fp, fp, r3
 8007b56:	f01b 0f01 	tst.w	fp, #1
 8007b5a:	d10f      	bne.n	8007b7c <__gethex+0x370>
 8007b5c:	f048 0810 	orr.w	r8, r8, #16
 8007b60:	e036      	b.n	8007bd0 <__gethex+0x3c4>
 8007b62:	f04f 0b01 	mov.w	fp, #1
 8007b66:	e7d0      	b.n	8007b0a <__gethex+0x2fe>
 8007b68:	f04f 0801 	mov.w	r8, #1
 8007b6c:	e7e2      	b.n	8007b34 <__gethex+0x328>
 8007b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b70:	f1c3 0301 	rsb	r3, r3, #1
 8007b74:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0ef      	beq.n	8007b5c <__gethex+0x350>
 8007b7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b80:	f104 0214 	add.w	r2, r4, #20
 8007b84:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007b8e:	2300      	movs	r3, #0
 8007b90:	4694      	mov	ip, r2
 8007b92:	f852 1b04 	ldr.w	r1, [r2], #4
 8007b96:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007b9a:	d01e      	beq.n	8007bda <__gethex+0x3ce>
 8007b9c:	3101      	adds	r1, #1
 8007b9e:	f8cc 1000 	str.w	r1, [ip]
 8007ba2:	f1b8 0f02 	cmp.w	r8, #2
 8007ba6:	f104 0214 	add.w	r2, r4, #20
 8007baa:	d13d      	bne.n	8007c28 <__gethex+0x41c>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	42ab      	cmp	r3, r5
 8007bb2:	d10b      	bne.n	8007bcc <__gethex+0x3c0>
 8007bb4:	1169      	asrs	r1, r5, #5
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	f005 051f 	and.w	r5, r5, #31
 8007bbc:	fa03 f505 	lsl.w	r5, r3, r5
 8007bc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bc4:	421d      	tst	r5, r3
 8007bc6:	bf18      	it	ne
 8007bc8:	f04f 0801 	movne.w	r8, #1
 8007bcc:	f048 0820 	orr.w	r8, r8, #32
 8007bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bd2:	601c      	str	r4, [r3, #0]
 8007bd4:	9b02      	ldr	r3, [sp, #8]
 8007bd6:	601e      	str	r6, [r3, #0]
 8007bd8:	e6a2      	b.n	8007920 <__gethex+0x114>
 8007bda:	4290      	cmp	r0, r2
 8007bdc:	f842 3c04 	str.w	r3, [r2, #-4]
 8007be0:	d8d6      	bhi.n	8007b90 <__gethex+0x384>
 8007be2:	68a2      	ldr	r2, [r4, #8]
 8007be4:	4593      	cmp	fp, r2
 8007be6:	db17      	blt.n	8007c18 <__gethex+0x40c>
 8007be8:	6861      	ldr	r1, [r4, #4]
 8007bea:	4648      	mov	r0, r9
 8007bec:	3101      	adds	r1, #1
 8007bee:	f000 f9c3 	bl	8007f78 <_Balloc>
 8007bf2:	4682      	mov	sl, r0
 8007bf4:	b918      	cbnz	r0, 8007bfe <__gethex+0x3f2>
 8007bf6:	4b1b      	ldr	r3, [pc, #108]	; (8007c64 <__gethex+0x458>)
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	2184      	movs	r1, #132	; 0x84
 8007bfc:	e6b3      	b.n	8007966 <__gethex+0x15a>
 8007bfe:	6922      	ldr	r2, [r4, #16]
 8007c00:	3202      	adds	r2, #2
 8007c02:	f104 010c 	add.w	r1, r4, #12
 8007c06:	0092      	lsls	r2, r2, #2
 8007c08:	300c      	adds	r0, #12
 8007c0a:	f7fe febb 	bl	8006984 <memcpy>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4648      	mov	r0, r9
 8007c12:	f000 f9f1 	bl	8007ff8 <_Bfree>
 8007c16:	4654      	mov	r4, sl
 8007c18:	6922      	ldr	r2, [r4, #16]
 8007c1a:	1c51      	adds	r1, r2, #1
 8007c1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007c20:	6121      	str	r1, [r4, #16]
 8007c22:	2101      	movs	r1, #1
 8007c24:	6151      	str	r1, [r2, #20]
 8007c26:	e7bc      	b.n	8007ba2 <__gethex+0x396>
 8007c28:	6921      	ldr	r1, [r4, #16]
 8007c2a:	4559      	cmp	r1, fp
 8007c2c:	dd0b      	ble.n	8007c46 <__gethex+0x43a>
 8007c2e:	2101      	movs	r1, #1
 8007c30:	4620      	mov	r0, r4
 8007c32:	f7ff fd83 	bl	800773c <rshift>
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	3601      	adds	r6, #1
 8007c3a:	42b3      	cmp	r3, r6
 8007c3c:	f6ff aedb 	blt.w	80079f6 <__gethex+0x1ea>
 8007c40:	f04f 0801 	mov.w	r8, #1
 8007c44:	e7c2      	b.n	8007bcc <__gethex+0x3c0>
 8007c46:	f015 051f 	ands.w	r5, r5, #31
 8007c4a:	d0f9      	beq.n	8007c40 <__gethex+0x434>
 8007c4c:	9b01      	ldr	r3, [sp, #4]
 8007c4e:	441a      	add	r2, r3
 8007c50:	f1c5 0520 	rsb	r5, r5, #32
 8007c54:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007c58:	f000 fa80 	bl	800815c <__hi0bits>
 8007c5c:	42a8      	cmp	r0, r5
 8007c5e:	dbe6      	blt.n	8007c2e <__gethex+0x422>
 8007c60:	e7ee      	b.n	8007c40 <__gethex+0x434>
 8007c62:	bf00      	nop
 8007c64:	08009538 	.word	0x08009538

08007c68 <L_shift>:
 8007c68:	f1c2 0208 	rsb	r2, r2, #8
 8007c6c:	0092      	lsls	r2, r2, #2
 8007c6e:	b570      	push	{r4, r5, r6, lr}
 8007c70:	f1c2 0620 	rsb	r6, r2, #32
 8007c74:	6843      	ldr	r3, [r0, #4]
 8007c76:	6804      	ldr	r4, [r0, #0]
 8007c78:	fa03 f506 	lsl.w	r5, r3, r6
 8007c7c:	432c      	orrs	r4, r5
 8007c7e:	40d3      	lsrs	r3, r2
 8007c80:	6004      	str	r4, [r0, #0]
 8007c82:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c86:	4288      	cmp	r0, r1
 8007c88:	d3f4      	bcc.n	8007c74 <L_shift+0xc>
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}

08007c8c <__match>:
 8007c8c:	b530      	push	{r4, r5, lr}
 8007c8e:	6803      	ldr	r3, [r0, #0]
 8007c90:	3301      	adds	r3, #1
 8007c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c96:	b914      	cbnz	r4, 8007c9e <__match+0x12>
 8007c98:	6003      	str	r3, [r0, #0]
 8007c9a:	2001      	movs	r0, #1
 8007c9c:	bd30      	pop	{r4, r5, pc}
 8007c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ca2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007ca6:	2d19      	cmp	r5, #25
 8007ca8:	bf98      	it	ls
 8007caa:	3220      	addls	r2, #32
 8007cac:	42a2      	cmp	r2, r4
 8007cae:	d0f0      	beq.n	8007c92 <__match+0x6>
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	e7f3      	b.n	8007c9c <__match+0x10>

08007cb4 <__hexnan>:
 8007cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb8:	680b      	ldr	r3, [r1, #0]
 8007cba:	6801      	ldr	r1, [r0, #0]
 8007cbc:	115e      	asrs	r6, r3, #5
 8007cbe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007cc2:	f013 031f 	ands.w	r3, r3, #31
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	bf18      	it	ne
 8007cca:	3604      	addne	r6, #4
 8007ccc:	2500      	movs	r5, #0
 8007cce:	1f37      	subs	r7, r6, #4
 8007cd0:	4682      	mov	sl, r0
 8007cd2:	4690      	mov	r8, r2
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	f846 5c04 	str.w	r5, [r6, #-4]
 8007cda:	46b9      	mov	r9, r7
 8007cdc:	463c      	mov	r4, r7
 8007cde:	9502      	str	r5, [sp, #8]
 8007ce0:	46ab      	mov	fp, r5
 8007ce2:	784a      	ldrb	r2, [r1, #1]
 8007ce4:	1c4b      	adds	r3, r1, #1
 8007ce6:	9303      	str	r3, [sp, #12]
 8007ce8:	b342      	cbz	r2, 8007d3c <__hexnan+0x88>
 8007cea:	4610      	mov	r0, r2
 8007cec:	9105      	str	r1, [sp, #20]
 8007cee:	9204      	str	r2, [sp, #16]
 8007cf0:	f7ff fd76 	bl	80077e0 <__hexdig_fun>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d14f      	bne.n	8007d98 <__hexnan+0xe4>
 8007cf8:	9a04      	ldr	r2, [sp, #16]
 8007cfa:	9905      	ldr	r1, [sp, #20]
 8007cfc:	2a20      	cmp	r2, #32
 8007cfe:	d818      	bhi.n	8007d32 <__hexnan+0x7e>
 8007d00:	9b02      	ldr	r3, [sp, #8]
 8007d02:	459b      	cmp	fp, r3
 8007d04:	dd13      	ble.n	8007d2e <__hexnan+0x7a>
 8007d06:	454c      	cmp	r4, r9
 8007d08:	d206      	bcs.n	8007d18 <__hexnan+0x64>
 8007d0a:	2d07      	cmp	r5, #7
 8007d0c:	dc04      	bgt.n	8007d18 <__hexnan+0x64>
 8007d0e:	462a      	mov	r2, r5
 8007d10:	4649      	mov	r1, r9
 8007d12:	4620      	mov	r0, r4
 8007d14:	f7ff ffa8 	bl	8007c68 <L_shift>
 8007d18:	4544      	cmp	r4, r8
 8007d1a:	d950      	bls.n	8007dbe <__hexnan+0x10a>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f1a4 0904 	sub.w	r9, r4, #4
 8007d22:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d26:	f8cd b008 	str.w	fp, [sp, #8]
 8007d2a:	464c      	mov	r4, r9
 8007d2c:	461d      	mov	r5, r3
 8007d2e:	9903      	ldr	r1, [sp, #12]
 8007d30:	e7d7      	b.n	8007ce2 <__hexnan+0x2e>
 8007d32:	2a29      	cmp	r2, #41	; 0x29
 8007d34:	d155      	bne.n	8007de2 <__hexnan+0x12e>
 8007d36:	3102      	adds	r1, #2
 8007d38:	f8ca 1000 	str.w	r1, [sl]
 8007d3c:	f1bb 0f00 	cmp.w	fp, #0
 8007d40:	d04f      	beq.n	8007de2 <__hexnan+0x12e>
 8007d42:	454c      	cmp	r4, r9
 8007d44:	d206      	bcs.n	8007d54 <__hexnan+0xa0>
 8007d46:	2d07      	cmp	r5, #7
 8007d48:	dc04      	bgt.n	8007d54 <__hexnan+0xa0>
 8007d4a:	462a      	mov	r2, r5
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f7ff ff8a 	bl	8007c68 <L_shift>
 8007d54:	4544      	cmp	r4, r8
 8007d56:	d934      	bls.n	8007dc2 <__hexnan+0x10e>
 8007d58:	f1a8 0204 	sub.w	r2, r8, #4
 8007d5c:	4623      	mov	r3, r4
 8007d5e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007d62:	f842 1f04 	str.w	r1, [r2, #4]!
 8007d66:	429f      	cmp	r7, r3
 8007d68:	d2f9      	bcs.n	8007d5e <__hexnan+0xaa>
 8007d6a:	1b3b      	subs	r3, r7, r4
 8007d6c:	f023 0303 	bic.w	r3, r3, #3
 8007d70:	3304      	adds	r3, #4
 8007d72:	3e03      	subs	r6, #3
 8007d74:	3401      	adds	r4, #1
 8007d76:	42a6      	cmp	r6, r4
 8007d78:	bf38      	it	cc
 8007d7a:	2304      	movcc	r3, #4
 8007d7c:	4443      	add	r3, r8
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f843 2b04 	str.w	r2, [r3], #4
 8007d84:	429f      	cmp	r7, r3
 8007d86:	d2fb      	bcs.n	8007d80 <__hexnan+0xcc>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	b91b      	cbnz	r3, 8007d94 <__hexnan+0xe0>
 8007d8c:	4547      	cmp	r7, r8
 8007d8e:	d126      	bne.n	8007dde <__hexnan+0x12a>
 8007d90:	2301      	movs	r3, #1
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	2005      	movs	r0, #5
 8007d96:	e025      	b.n	8007de4 <__hexnan+0x130>
 8007d98:	3501      	adds	r5, #1
 8007d9a:	2d08      	cmp	r5, #8
 8007d9c:	f10b 0b01 	add.w	fp, fp, #1
 8007da0:	dd06      	ble.n	8007db0 <__hexnan+0xfc>
 8007da2:	4544      	cmp	r4, r8
 8007da4:	d9c3      	bls.n	8007d2e <__hexnan+0x7a>
 8007da6:	2300      	movs	r3, #0
 8007da8:	f844 3c04 	str.w	r3, [r4, #-4]
 8007dac:	2501      	movs	r5, #1
 8007dae:	3c04      	subs	r4, #4
 8007db0:	6822      	ldr	r2, [r4, #0]
 8007db2:	f000 000f 	and.w	r0, r0, #15
 8007db6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007dba:	6020      	str	r0, [r4, #0]
 8007dbc:	e7b7      	b.n	8007d2e <__hexnan+0x7a>
 8007dbe:	2508      	movs	r5, #8
 8007dc0:	e7b5      	b.n	8007d2e <__hexnan+0x7a>
 8007dc2:	9b01      	ldr	r3, [sp, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0df      	beq.n	8007d88 <__hexnan+0xd4>
 8007dc8:	f1c3 0320 	rsb	r3, r3, #32
 8007dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd0:	40da      	lsrs	r2, r3
 8007dd2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	f846 3c04 	str.w	r3, [r6, #-4]
 8007ddc:	e7d4      	b.n	8007d88 <__hexnan+0xd4>
 8007dde:	3f04      	subs	r7, #4
 8007de0:	e7d2      	b.n	8007d88 <__hexnan+0xd4>
 8007de2:	2004      	movs	r0, #4
 8007de4:	b007      	add	sp, #28
 8007de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007dec <malloc>:
 8007dec:	4b02      	ldr	r3, [pc, #8]	; (8007df8 <malloc+0xc>)
 8007dee:	4601      	mov	r1, r0
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	f000 b823 	b.w	8007e3c <_malloc_r>
 8007df6:	bf00      	nop
 8007df8:	200001d0 	.word	0x200001d0

08007dfc <sbrk_aligned>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	4e0e      	ldr	r6, [pc, #56]	; (8007e38 <sbrk_aligned+0x3c>)
 8007e00:	460c      	mov	r4, r1
 8007e02:	6831      	ldr	r1, [r6, #0]
 8007e04:	4605      	mov	r5, r0
 8007e06:	b911      	cbnz	r1, 8007e0e <sbrk_aligned+0x12>
 8007e08:	f000 ff90 	bl	8008d2c <_sbrk_r>
 8007e0c:	6030      	str	r0, [r6, #0]
 8007e0e:	4621      	mov	r1, r4
 8007e10:	4628      	mov	r0, r5
 8007e12:	f000 ff8b 	bl	8008d2c <_sbrk_r>
 8007e16:	1c43      	adds	r3, r0, #1
 8007e18:	d00a      	beq.n	8007e30 <sbrk_aligned+0x34>
 8007e1a:	1cc4      	adds	r4, r0, #3
 8007e1c:	f024 0403 	bic.w	r4, r4, #3
 8007e20:	42a0      	cmp	r0, r4
 8007e22:	d007      	beq.n	8007e34 <sbrk_aligned+0x38>
 8007e24:	1a21      	subs	r1, r4, r0
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 ff80 	bl	8008d2c <_sbrk_r>
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d101      	bne.n	8007e34 <sbrk_aligned+0x38>
 8007e30:	f04f 34ff 	mov.w	r4, #4294967295
 8007e34:	4620      	mov	r0, r4
 8007e36:	bd70      	pop	{r4, r5, r6, pc}
 8007e38:	2000058c 	.word	0x2000058c

08007e3c <_malloc_r>:
 8007e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e40:	1ccd      	adds	r5, r1, #3
 8007e42:	f025 0503 	bic.w	r5, r5, #3
 8007e46:	3508      	adds	r5, #8
 8007e48:	2d0c      	cmp	r5, #12
 8007e4a:	bf38      	it	cc
 8007e4c:	250c      	movcc	r5, #12
 8007e4e:	2d00      	cmp	r5, #0
 8007e50:	4607      	mov	r7, r0
 8007e52:	db01      	blt.n	8007e58 <_malloc_r+0x1c>
 8007e54:	42a9      	cmp	r1, r5
 8007e56:	d905      	bls.n	8007e64 <_malloc_r+0x28>
 8007e58:	230c      	movs	r3, #12
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	2600      	movs	r6, #0
 8007e5e:	4630      	mov	r0, r6
 8007e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f38 <_malloc_r+0xfc>
 8007e68:	f000 f87a 	bl	8007f60 <__malloc_lock>
 8007e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e70:	461c      	mov	r4, r3
 8007e72:	bb5c      	cbnz	r4, 8007ecc <_malloc_r+0x90>
 8007e74:	4629      	mov	r1, r5
 8007e76:	4638      	mov	r0, r7
 8007e78:	f7ff ffc0 	bl	8007dfc <sbrk_aligned>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	4604      	mov	r4, r0
 8007e80:	d155      	bne.n	8007f2e <_malloc_r+0xf2>
 8007e82:	f8d8 4000 	ldr.w	r4, [r8]
 8007e86:	4626      	mov	r6, r4
 8007e88:	2e00      	cmp	r6, #0
 8007e8a:	d145      	bne.n	8007f18 <_malloc_r+0xdc>
 8007e8c:	2c00      	cmp	r4, #0
 8007e8e:	d048      	beq.n	8007f22 <_malloc_r+0xe6>
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	4631      	mov	r1, r6
 8007e94:	4638      	mov	r0, r7
 8007e96:	eb04 0903 	add.w	r9, r4, r3
 8007e9a:	f000 ff47 	bl	8008d2c <_sbrk_r>
 8007e9e:	4581      	cmp	r9, r0
 8007ea0:	d13f      	bne.n	8007f22 <_malloc_r+0xe6>
 8007ea2:	6821      	ldr	r1, [r4, #0]
 8007ea4:	1a6d      	subs	r5, r5, r1
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f7ff ffa7 	bl	8007dfc <sbrk_aligned>
 8007eae:	3001      	adds	r0, #1
 8007eb0:	d037      	beq.n	8007f22 <_malloc_r+0xe6>
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	442b      	add	r3, r5
 8007eb6:	6023      	str	r3, [r4, #0]
 8007eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d038      	beq.n	8007f32 <_malloc_r+0xf6>
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	42a2      	cmp	r2, r4
 8007ec4:	d12b      	bne.n	8007f1e <_malloc_r+0xe2>
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	605a      	str	r2, [r3, #4]
 8007eca:	e00f      	b.n	8007eec <_malloc_r+0xb0>
 8007ecc:	6822      	ldr	r2, [r4, #0]
 8007ece:	1b52      	subs	r2, r2, r5
 8007ed0:	d41f      	bmi.n	8007f12 <_malloc_r+0xd6>
 8007ed2:	2a0b      	cmp	r2, #11
 8007ed4:	d917      	bls.n	8007f06 <_malloc_r+0xca>
 8007ed6:	1961      	adds	r1, r4, r5
 8007ed8:	42a3      	cmp	r3, r4
 8007eda:	6025      	str	r5, [r4, #0]
 8007edc:	bf18      	it	ne
 8007ede:	6059      	strne	r1, [r3, #4]
 8007ee0:	6863      	ldr	r3, [r4, #4]
 8007ee2:	bf08      	it	eq
 8007ee4:	f8c8 1000 	streq.w	r1, [r8]
 8007ee8:	5162      	str	r2, [r4, r5]
 8007eea:	604b      	str	r3, [r1, #4]
 8007eec:	4638      	mov	r0, r7
 8007eee:	f104 060b 	add.w	r6, r4, #11
 8007ef2:	f000 f83b 	bl	8007f6c <__malloc_unlock>
 8007ef6:	f026 0607 	bic.w	r6, r6, #7
 8007efa:	1d23      	adds	r3, r4, #4
 8007efc:	1af2      	subs	r2, r6, r3
 8007efe:	d0ae      	beq.n	8007e5e <_malloc_r+0x22>
 8007f00:	1b9b      	subs	r3, r3, r6
 8007f02:	50a3      	str	r3, [r4, r2]
 8007f04:	e7ab      	b.n	8007e5e <_malloc_r+0x22>
 8007f06:	42a3      	cmp	r3, r4
 8007f08:	6862      	ldr	r2, [r4, #4]
 8007f0a:	d1dd      	bne.n	8007ec8 <_malloc_r+0x8c>
 8007f0c:	f8c8 2000 	str.w	r2, [r8]
 8007f10:	e7ec      	b.n	8007eec <_malloc_r+0xb0>
 8007f12:	4623      	mov	r3, r4
 8007f14:	6864      	ldr	r4, [r4, #4]
 8007f16:	e7ac      	b.n	8007e72 <_malloc_r+0x36>
 8007f18:	4634      	mov	r4, r6
 8007f1a:	6876      	ldr	r6, [r6, #4]
 8007f1c:	e7b4      	b.n	8007e88 <_malloc_r+0x4c>
 8007f1e:	4613      	mov	r3, r2
 8007f20:	e7cc      	b.n	8007ebc <_malloc_r+0x80>
 8007f22:	230c      	movs	r3, #12
 8007f24:	603b      	str	r3, [r7, #0]
 8007f26:	4638      	mov	r0, r7
 8007f28:	f000 f820 	bl	8007f6c <__malloc_unlock>
 8007f2c:	e797      	b.n	8007e5e <_malloc_r+0x22>
 8007f2e:	6025      	str	r5, [r4, #0]
 8007f30:	e7dc      	b.n	8007eec <_malloc_r+0xb0>
 8007f32:	605b      	str	r3, [r3, #4]
 8007f34:	deff      	udf	#255	; 0xff
 8007f36:	bf00      	nop
 8007f38:	20000588 	.word	0x20000588

08007f3c <__ascii_mbtowc>:
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	b901      	cbnz	r1, 8007f42 <__ascii_mbtowc+0x6>
 8007f40:	a901      	add	r1, sp, #4
 8007f42:	b142      	cbz	r2, 8007f56 <__ascii_mbtowc+0x1a>
 8007f44:	b14b      	cbz	r3, 8007f5a <__ascii_mbtowc+0x1e>
 8007f46:	7813      	ldrb	r3, [r2, #0]
 8007f48:	600b      	str	r3, [r1, #0]
 8007f4a:	7812      	ldrb	r2, [r2, #0]
 8007f4c:	1e10      	subs	r0, r2, #0
 8007f4e:	bf18      	it	ne
 8007f50:	2001      	movne	r0, #1
 8007f52:	b002      	add	sp, #8
 8007f54:	4770      	bx	lr
 8007f56:	4610      	mov	r0, r2
 8007f58:	e7fb      	b.n	8007f52 <__ascii_mbtowc+0x16>
 8007f5a:	f06f 0001 	mvn.w	r0, #1
 8007f5e:	e7f8      	b.n	8007f52 <__ascii_mbtowc+0x16>

08007f60 <__malloc_lock>:
 8007f60:	4801      	ldr	r0, [pc, #4]	; (8007f68 <__malloc_lock+0x8>)
 8007f62:	f7fe bd0d 	b.w	8006980 <__retarget_lock_acquire_recursive>
 8007f66:	bf00      	nop
 8007f68:	20000584 	.word	0x20000584

08007f6c <__malloc_unlock>:
 8007f6c:	4801      	ldr	r0, [pc, #4]	; (8007f74 <__malloc_unlock+0x8>)
 8007f6e:	f7fe bd08 	b.w	8006982 <__retarget_lock_release_recursive>
 8007f72:	bf00      	nop
 8007f74:	20000584 	.word	0x20000584

08007f78 <_Balloc>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	69c6      	ldr	r6, [r0, #28]
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	460d      	mov	r5, r1
 8007f80:	b976      	cbnz	r6, 8007fa0 <_Balloc+0x28>
 8007f82:	2010      	movs	r0, #16
 8007f84:	f7ff ff32 	bl	8007dec <malloc>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	61e0      	str	r0, [r4, #28]
 8007f8c:	b920      	cbnz	r0, 8007f98 <_Balloc+0x20>
 8007f8e:	4b18      	ldr	r3, [pc, #96]	; (8007ff0 <_Balloc+0x78>)
 8007f90:	4818      	ldr	r0, [pc, #96]	; (8007ff4 <_Balloc+0x7c>)
 8007f92:	216b      	movs	r1, #107	; 0x6b
 8007f94:	f000 feda 	bl	8008d4c <__assert_func>
 8007f98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f9c:	6006      	str	r6, [r0, #0]
 8007f9e:	60c6      	str	r6, [r0, #12]
 8007fa0:	69e6      	ldr	r6, [r4, #28]
 8007fa2:	68f3      	ldr	r3, [r6, #12]
 8007fa4:	b183      	cbz	r3, 8007fc8 <_Balloc+0x50>
 8007fa6:	69e3      	ldr	r3, [r4, #28]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fae:	b9b8      	cbnz	r0, 8007fe0 <_Balloc+0x68>
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	fa01 f605 	lsl.w	r6, r1, r5
 8007fb6:	1d72      	adds	r2, r6, #5
 8007fb8:	0092      	lsls	r2, r2, #2
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fee4 	bl	8008d88 <_calloc_r>
 8007fc0:	b160      	cbz	r0, 8007fdc <_Balloc+0x64>
 8007fc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fc6:	e00e      	b.n	8007fe6 <_Balloc+0x6e>
 8007fc8:	2221      	movs	r2, #33	; 0x21
 8007fca:	2104      	movs	r1, #4
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 fedb 	bl	8008d88 <_calloc_r>
 8007fd2:	69e3      	ldr	r3, [r4, #28]
 8007fd4:	60f0      	str	r0, [r6, #12]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e4      	bne.n	8007fa6 <_Balloc+0x2e>
 8007fdc:	2000      	movs	r0, #0
 8007fde:	bd70      	pop	{r4, r5, r6, pc}
 8007fe0:	6802      	ldr	r2, [r0, #0]
 8007fe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fec:	e7f7      	b.n	8007fde <_Balloc+0x66>
 8007fee:	bf00      	nop
 8007ff0:	080094c9 	.word	0x080094c9
 8007ff4:	080095a9 	.word	0x080095a9

08007ff8 <_Bfree>:
 8007ff8:	b570      	push	{r4, r5, r6, lr}
 8007ffa:	69c6      	ldr	r6, [r0, #28]
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	460c      	mov	r4, r1
 8008000:	b976      	cbnz	r6, 8008020 <_Bfree+0x28>
 8008002:	2010      	movs	r0, #16
 8008004:	f7ff fef2 	bl	8007dec <malloc>
 8008008:	4602      	mov	r2, r0
 800800a:	61e8      	str	r0, [r5, #28]
 800800c:	b920      	cbnz	r0, 8008018 <_Bfree+0x20>
 800800e:	4b09      	ldr	r3, [pc, #36]	; (8008034 <_Bfree+0x3c>)
 8008010:	4809      	ldr	r0, [pc, #36]	; (8008038 <_Bfree+0x40>)
 8008012:	218f      	movs	r1, #143	; 0x8f
 8008014:	f000 fe9a 	bl	8008d4c <__assert_func>
 8008018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800801c:	6006      	str	r6, [r0, #0]
 800801e:	60c6      	str	r6, [r0, #12]
 8008020:	b13c      	cbz	r4, 8008032 <_Bfree+0x3a>
 8008022:	69eb      	ldr	r3, [r5, #28]
 8008024:	6862      	ldr	r2, [r4, #4]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800802c:	6021      	str	r1, [r4, #0]
 800802e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008032:	bd70      	pop	{r4, r5, r6, pc}
 8008034:	080094c9 	.word	0x080094c9
 8008038:	080095a9 	.word	0x080095a9

0800803c <__multadd>:
 800803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008040:	690d      	ldr	r5, [r1, #16]
 8008042:	4607      	mov	r7, r0
 8008044:	460c      	mov	r4, r1
 8008046:	461e      	mov	r6, r3
 8008048:	f101 0c14 	add.w	ip, r1, #20
 800804c:	2000      	movs	r0, #0
 800804e:	f8dc 3000 	ldr.w	r3, [ip]
 8008052:	b299      	uxth	r1, r3
 8008054:	fb02 6101 	mla	r1, r2, r1, r6
 8008058:	0c1e      	lsrs	r6, r3, #16
 800805a:	0c0b      	lsrs	r3, r1, #16
 800805c:	fb02 3306 	mla	r3, r2, r6, r3
 8008060:	b289      	uxth	r1, r1
 8008062:	3001      	adds	r0, #1
 8008064:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008068:	4285      	cmp	r5, r0
 800806a:	f84c 1b04 	str.w	r1, [ip], #4
 800806e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008072:	dcec      	bgt.n	800804e <__multadd+0x12>
 8008074:	b30e      	cbz	r6, 80080ba <__multadd+0x7e>
 8008076:	68a3      	ldr	r3, [r4, #8]
 8008078:	42ab      	cmp	r3, r5
 800807a:	dc19      	bgt.n	80080b0 <__multadd+0x74>
 800807c:	6861      	ldr	r1, [r4, #4]
 800807e:	4638      	mov	r0, r7
 8008080:	3101      	adds	r1, #1
 8008082:	f7ff ff79 	bl	8007f78 <_Balloc>
 8008086:	4680      	mov	r8, r0
 8008088:	b928      	cbnz	r0, 8008096 <__multadd+0x5a>
 800808a:	4602      	mov	r2, r0
 800808c:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <__multadd+0x84>)
 800808e:	480d      	ldr	r0, [pc, #52]	; (80080c4 <__multadd+0x88>)
 8008090:	21ba      	movs	r1, #186	; 0xba
 8008092:	f000 fe5b 	bl	8008d4c <__assert_func>
 8008096:	6922      	ldr	r2, [r4, #16]
 8008098:	3202      	adds	r2, #2
 800809a:	f104 010c 	add.w	r1, r4, #12
 800809e:	0092      	lsls	r2, r2, #2
 80080a0:	300c      	adds	r0, #12
 80080a2:	f7fe fc6f 	bl	8006984 <memcpy>
 80080a6:	4621      	mov	r1, r4
 80080a8:	4638      	mov	r0, r7
 80080aa:	f7ff ffa5 	bl	8007ff8 <_Bfree>
 80080ae:	4644      	mov	r4, r8
 80080b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080b4:	3501      	adds	r5, #1
 80080b6:	615e      	str	r6, [r3, #20]
 80080b8:	6125      	str	r5, [r4, #16]
 80080ba:	4620      	mov	r0, r4
 80080bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c0:	08009538 	.word	0x08009538
 80080c4:	080095a9 	.word	0x080095a9

080080c8 <__s2b>:
 80080c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080cc:	460c      	mov	r4, r1
 80080ce:	4615      	mov	r5, r2
 80080d0:	461f      	mov	r7, r3
 80080d2:	2209      	movs	r2, #9
 80080d4:	3308      	adds	r3, #8
 80080d6:	4606      	mov	r6, r0
 80080d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80080dc:	2100      	movs	r1, #0
 80080de:	2201      	movs	r2, #1
 80080e0:	429a      	cmp	r2, r3
 80080e2:	db09      	blt.n	80080f8 <__s2b+0x30>
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7ff ff47 	bl	8007f78 <_Balloc>
 80080ea:	b940      	cbnz	r0, 80080fe <__s2b+0x36>
 80080ec:	4602      	mov	r2, r0
 80080ee:	4b19      	ldr	r3, [pc, #100]	; (8008154 <__s2b+0x8c>)
 80080f0:	4819      	ldr	r0, [pc, #100]	; (8008158 <__s2b+0x90>)
 80080f2:	21d3      	movs	r1, #211	; 0xd3
 80080f4:	f000 fe2a 	bl	8008d4c <__assert_func>
 80080f8:	0052      	lsls	r2, r2, #1
 80080fa:	3101      	adds	r1, #1
 80080fc:	e7f0      	b.n	80080e0 <__s2b+0x18>
 80080fe:	9b08      	ldr	r3, [sp, #32]
 8008100:	6143      	str	r3, [r0, #20]
 8008102:	2d09      	cmp	r5, #9
 8008104:	f04f 0301 	mov.w	r3, #1
 8008108:	6103      	str	r3, [r0, #16]
 800810a:	dd16      	ble.n	800813a <__s2b+0x72>
 800810c:	f104 0909 	add.w	r9, r4, #9
 8008110:	46c8      	mov	r8, r9
 8008112:	442c      	add	r4, r5
 8008114:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008118:	4601      	mov	r1, r0
 800811a:	3b30      	subs	r3, #48	; 0x30
 800811c:	220a      	movs	r2, #10
 800811e:	4630      	mov	r0, r6
 8008120:	f7ff ff8c 	bl	800803c <__multadd>
 8008124:	45a0      	cmp	r8, r4
 8008126:	d1f5      	bne.n	8008114 <__s2b+0x4c>
 8008128:	f1a5 0408 	sub.w	r4, r5, #8
 800812c:	444c      	add	r4, r9
 800812e:	1b2d      	subs	r5, r5, r4
 8008130:	1963      	adds	r3, r4, r5
 8008132:	42bb      	cmp	r3, r7
 8008134:	db04      	blt.n	8008140 <__s2b+0x78>
 8008136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800813a:	340a      	adds	r4, #10
 800813c:	2509      	movs	r5, #9
 800813e:	e7f6      	b.n	800812e <__s2b+0x66>
 8008140:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008144:	4601      	mov	r1, r0
 8008146:	3b30      	subs	r3, #48	; 0x30
 8008148:	220a      	movs	r2, #10
 800814a:	4630      	mov	r0, r6
 800814c:	f7ff ff76 	bl	800803c <__multadd>
 8008150:	e7ee      	b.n	8008130 <__s2b+0x68>
 8008152:	bf00      	nop
 8008154:	08009538 	.word	0x08009538
 8008158:	080095a9 	.word	0x080095a9

0800815c <__hi0bits>:
 800815c:	0c03      	lsrs	r3, r0, #16
 800815e:	041b      	lsls	r3, r3, #16
 8008160:	b9d3      	cbnz	r3, 8008198 <__hi0bits+0x3c>
 8008162:	0400      	lsls	r0, r0, #16
 8008164:	2310      	movs	r3, #16
 8008166:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800816a:	bf04      	itt	eq
 800816c:	0200      	lsleq	r0, r0, #8
 800816e:	3308      	addeq	r3, #8
 8008170:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008174:	bf04      	itt	eq
 8008176:	0100      	lsleq	r0, r0, #4
 8008178:	3304      	addeq	r3, #4
 800817a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800817e:	bf04      	itt	eq
 8008180:	0080      	lsleq	r0, r0, #2
 8008182:	3302      	addeq	r3, #2
 8008184:	2800      	cmp	r0, #0
 8008186:	db05      	blt.n	8008194 <__hi0bits+0x38>
 8008188:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800818c:	f103 0301 	add.w	r3, r3, #1
 8008190:	bf08      	it	eq
 8008192:	2320      	moveq	r3, #32
 8008194:	4618      	mov	r0, r3
 8008196:	4770      	bx	lr
 8008198:	2300      	movs	r3, #0
 800819a:	e7e4      	b.n	8008166 <__hi0bits+0xa>

0800819c <__lo0bits>:
 800819c:	6803      	ldr	r3, [r0, #0]
 800819e:	f013 0207 	ands.w	r2, r3, #7
 80081a2:	d00c      	beq.n	80081be <__lo0bits+0x22>
 80081a4:	07d9      	lsls	r1, r3, #31
 80081a6:	d422      	bmi.n	80081ee <__lo0bits+0x52>
 80081a8:	079a      	lsls	r2, r3, #30
 80081aa:	bf49      	itett	mi
 80081ac:	085b      	lsrmi	r3, r3, #1
 80081ae:	089b      	lsrpl	r3, r3, #2
 80081b0:	6003      	strmi	r3, [r0, #0]
 80081b2:	2201      	movmi	r2, #1
 80081b4:	bf5c      	itt	pl
 80081b6:	6003      	strpl	r3, [r0, #0]
 80081b8:	2202      	movpl	r2, #2
 80081ba:	4610      	mov	r0, r2
 80081bc:	4770      	bx	lr
 80081be:	b299      	uxth	r1, r3
 80081c0:	b909      	cbnz	r1, 80081c6 <__lo0bits+0x2a>
 80081c2:	0c1b      	lsrs	r3, r3, #16
 80081c4:	2210      	movs	r2, #16
 80081c6:	b2d9      	uxtb	r1, r3
 80081c8:	b909      	cbnz	r1, 80081ce <__lo0bits+0x32>
 80081ca:	3208      	adds	r2, #8
 80081cc:	0a1b      	lsrs	r3, r3, #8
 80081ce:	0719      	lsls	r1, r3, #28
 80081d0:	bf04      	itt	eq
 80081d2:	091b      	lsreq	r3, r3, #4
 80081d4:	3204      	addeq	r2, #4
 80081d6:	0799      	lsls	r1, r3, #30
 80081d8:	bf04      	itt	eq
 80081da:	089b      	lsreq	r3, r3, #2
 80081dc:	3202      	addeq	r2, #2
 80081de:	07d9      	lsls	r1, r3, #31
 80081e0:	d403      	bmi.n	80081ea <__lo0bits+0x4e>
 80081e2:	085b      	lsrs	r3, r3, #1
 80081e4:	f102 0201 	add.w	r2, r2, #1
 80081e8:	d003      	beq.n	80081f2 <__lo0bits+0x56>
 80081ea:	6003      	str	r3, [r0, #0]
 80081ec:	e7e5      	b.n	80081ba <__lo0bits+0x1e>
 80081ee:	2200      	movs	r2, #0
 80081f0:	e7e3      	b.n	80081ba <__lo0bits+0x1e>
 80081f2:	2220      	movs	r2, #32
 80081f4:	e7e1      	b.n	80081ba <__lo0bits+0x1e>
	...

080081f8 <__i2b>:
 80081f8:	b510      	push	{r4, lr}
 80081fa:	460c      	mov	r4, r1
 80081fc:	2101      	movs	r1, #1
 80081fe:	f7ff febb 	bl	8007f78 <_Balloc>
 8008202:	4602      	mov	r2, r0
 8008204:	b928      	cbnz	r0, 8008212 <__i2b+0x1a>
 8008206:	4b05      	ldr	r3, [pc, #20]	; (800821c <__i2b+0x24>)
 8008208:	4805      	ldr	r0, [pc, #20]	; (8008220 <__i2b+0x28>)
 800820a:	f240 1145 	movw	r1, #325	; 0x145
 800820e:	f000 fd9d 	bl	8008d4c <__assert_func>
 8008212:	2301      	movs	r3, #1
 8008214:	6144      	str	r4, [r0, #20]
 8008216:	6103      	str	r3, [r0, #16]
 8008218:	bd10      	pop	{r4, pc}
 800821a:	bf00      	nop
 800821c:	08009538 	.word	0x08009538
 8008220:	080095a9 	.word	0x080095a9

08008224 <__multiply>:
 8008224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	4691      	mov	r9, r2
 800822a:	690a      	ldr	r2, [r1, #16]
 800822c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008230:	429a      	cmp	r2, r3
 8008232:	bfb8      	it	lt
 8008234:	460b      	movlt	r3, r1
 8008236:	460c      	mov	r4, r1
 8008238:	bfbc      	itt	lt
 800823a:	464c      	movlt	r4, r9
 800823c:	4699      	movlt	r9, r3
 800823e:	6927      	ldr	r7, [r4, #16]
 8008240:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008244:	68a3      	ldr	r3, [r4, #8]
 8008246:	6861      	ldr	r1, [r4, #4]
 8008248:	eb07 060a 	add.w	r6, r7, sl
 800824c:	42b3      	cmp	r3, r6
 800824e:	b085      	sub	sp, #20
 8008250:	bfb8      	it	lt
 8008252:	3101      	addlt	r1, #1
 8008254:	f7ff fe90 	bl	8007f78 <_Balloc>
 8008258:	b930      	cbnz	r0, 8008268 <__multiply+0x44>
 800825a:	4602      	mov	r2, r0
 800825c:	4b44      	ldr	r3, [pc, #272]	; (8008370 <__multiply+0x14c>)
 800825e:	4845      	ldr	r0, [pc, #276]	; (8008374 <__multiply+0x150>)
 8008260:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008264:	f000 fd72 	bl	8008d4c <__assert_func>
 8008268:	f100 0514 	add.w	r5, r0, #20
 800826c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008270:	462b      	mov	r3, r5
 8008272:	2200      	movs	r2, #0
 8008274:	4543      	cmp	r3, r8
 8008276:	d321      	bcc.n	80082bc <__multiply+0x98>
 8008278:	f104 0314 	add.w	r3, r4, #20
 800827c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008280:	f109 0314 	add.w	r3, r9, #20
 8008284:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008288:	9202      	str	r2, [sp, #8]
 800828a:	1b3a      	subs	r2, r7, r4
 800828c:	3a15      	subs	r2, #21
 800828e:	f022 0203 	bic.w	r2, r2, #3
 8008292:	3204      	adds	r2, #4
 8008294:	f104 0115 	add.w	r1, r4, #21
 8008298:	428f      	cmp	r7, r1
 800829a:	bf38      	it	cc
 800829c:	2204      	movcc	r2, #4
 800829e:	9201      	str	r2, [sp, #4]
 80082a0:	9a02      	ldr	r2, [sp, #8]
 80082a2:	9303      	str	r3, [sp, #12]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d80c      	bhi.n	80082c2 <__multiply+0x9e>
 80082a8:	2e00      	cmp	r6, #0
 80082aa:	dd03      	ble.n	80082b4 <__multiply+0x90>
 80082ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d05b      	beq.n	800836c <__multiply+0x148>
 80082b4:	6106      	str	r6, [r0, #16]
 80082b6:	b005      	add	sp, #20
 80082b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082bc:	f843 2b04 	str.w	r2, [r3], #4
 80082c0:	e7d8      	b.n	8008274 <__multiply+0x50>
 80082c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80082c6:	f1ba 0f00 	cmp.w	sl, #0
 80082ca:	d024      	beq.n	8008316 <__multiply+0xf2>
 80082cc:	f104 0e14 	add.w	lr, r4, #20
 80082d0:	46a9      	mov	r9, r5
 80082d2:	f04f 0c00 	mov.w	ip, #0
 80082d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80082da:	f8d9 1000 	ldr.w	r1, [r9]
 80082de:	fa1f fb82 	uxth.w	fp, r2
 80082e2:	b289      	uxth	r1, r1
 80082e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80082e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80082ec:	f8d9 2000 	ldr.w	r2, [r9]
 80082f0:	4461      	add	r1, ip
 80082f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80082fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082fe:	b289      	uxth	r1, r1
 8008300:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008304:	4577      	cmp	r7, lr
 8008306:	f849 1b04 	str.w	r1, [r9], #4
 800830a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800830e:	d8e2      	bhi.n	80082d6 <__multiply+0xb2>
 8008310:	9a01      	ldr	r2, [sp, #4]
 8008312:	f845 c002 	str.w	ip, [r5, r2]
 8008316:	9a03      	ldr	r2, [sp, #12]
 8008318:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800831c:	3304      	adds	r3, #4
 800831e:	f1b9 0f00 	cmp.w	r9, #0
 8008322:	d021      	beq.n	8008368 <__multiply+0x144>
 8008324:	6829      	ldr	r1, [r5, #0]
 8008326:	f104 0c14 	add.w	ip, r4, #20
 800832a:	46ae      	mov	lr, r5
 800832c:	f04f 0a00 	mov.w	sl, #0
 8008330:	f8bc b000 	ldrh.w	fp, [ip]
 8008334:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008338:	fb09 220b 	mla	r2, r9, fp, r2
 800833c:	4452      	add	r2, sl
 800833e:	b289      	uxth	r1, r1
 8008340:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008344:	f84e 1b04 	str.w	r1, [lr], #4
 8008348:	f85c 1b04 	ldr.w	r1, [ip], #4
 800834c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008350:	f8be 1000 	ldrh.w	r1, [lr]
 8008354:	fb09 110a 	mla	r1, r9, sl, r1
 8008358:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800835c:	4567      	cmp	r7, ip
 800835e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008362:	d8e5      	bhi.n	8008330 <__multiply+0x10c>
 8008364:	9a01      	ldr	r2, [sp, #4]
 8008366:	50a9      	str	r1, [r5, r2]
 8008368:	3504      	adds	r5, #4
 800836a:	e799      	b.n	80082a0 <__multiply+0x7c>
 800836c:	3e01      	subs	r6, #1
 800836e:	e79b      	b.n	80082a8 <__multiply+0x84>
 8008370:	08009538 	.word	0x08009538
 8008374:	080095a9 	.word	0x080095a9

08008378 <__pow5mult>:
 8008378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800837c:	4615      	mov	r5, r2
 800837e:	f012 0203 	ands.w	r2, r2, #3
 8008382:	4606      	mov	r6, r0
 8008384:	460f      	mov	r7, r1
 8008386:	d007      	beq.n	8008398 <__pow5mult+0x20>
 8008388:	4c25      	ldr	r4, [pc, #148]	; (8008420 <__pow5mult+0xa8>)
 800838a:	3a01      	subs	r2, #1
 800838c:	2300      	movs	r3, #0
 800838e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008392:	f7ff fe53 	bl	800803c <__multadd>
 8008396:	4607      	mov	r7, r0
 8008398:	10ad      	asrs	r5, r5, #2
 800839a:	d03d      	beq.n	8008418 <__pow5mult+0xa0>
 800839c:	69f4      	ldr	r4, [r6, #28]
 800839e:	b97c      	cbnz	r4, 80083c0 <__pow5mult+0x48>
 80083a0:	2010      	movs	r0, #16
 80083a2:	f7ff fd23 	bl	8007dec <malloc>
 80083a6:	4602      	mov	r2, r0
 80083a8:	61f0      	str	r0, [r6, #28]
 80083aa:	b928      	cbnz	r0, 80083b8 <__pow5mult+0x40>
 80083ac:	4b1d      	ldr	r3, [pc, #116]	; (8008424 <__pow5mult+0xac>)
 80083ae:	481e      	ldr	r0, [pc, #120]	; (8008428 <__pow5mult+0xb0>)
 80083b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80083b4:	f000 fcca 	bl	8008d4c <__assert_func>
 80083b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083bc:	6004      	str	r4, [r0, #0]
 80083be:	60c4      	str	r4, [r0, #12]
 80083c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80083c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083c8:	b94c      	cbnz	r4, 80083de <__pow5mult+0x66>
 80083ca:	f240 2171 	movw	r1, #625	; 0x271
 80083ce:	4630      	mov	r0, r6
 80083d0:	f7ff ff12 	bl	80081f8 <__i2b>
 80083d4:	2300      	movs	r3, #0
 80083d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80083da:	4604      	mov	r4, r0
 80083dc:	6003      	str	r3, [r0, #0]
 80083de:	f04f 0900 	mov.w	r9, #0
 80083e2:	07eb      	lsls	r3, r5, #31
 80083e4:	d50a      	bpl.n	80083fc <__pow5mult+0x84>
 80083e6:	4639      	mov	r1, r7
 80083e8:	4622      	mov	r2, r4
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff ff1a 	bl	8008224 <__multiply>
 80083f0:	4639      	mov	r1, r7
 80083f2:	4680      	mov	r8, r0
 80083f4:	4630      	mov	r0, r6
 80083f6:	f7ff fdff 	bl	8007ff8 <_Bfree>
 80083fa:	4647      	mov	r7, r8
 80083fc:	106d      	asrs	r5, r5, #1
 80083fe:	d00b      	beq.n	8008418 <__pow5mult+0xa0>
 8008400:	6820      	ldr	r0, [r4, #0]
 8008402:	b938      	cbnz	r0, 8008414 <__pow5mult+0x9c>
 8008404:	4622      	mov	r2, r4
 8008406:	4621      	mov	r1, r4
 8008408:	4630      	mov	r0, r6
 800840a:	f7ff ff0b 	bl	8008224 <__multiply>
 800840e:	6020      	str	r0, [r4, #0]
 8008410:	f8c0 9000 	str.w	r9, [r0]
 8008414:	4604      	mov	r4, r0
 8008416:	e7e4      	b.n	80083e2 <__pow5mult+0x6a>
 8008418:	4638      	mov	r0, r7
 800841a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800841e:	bf00      	nop
 8008420:	080096f8 	.word	0x080096f8
 8008424:	080094c9 	.word	0x080094c9
 8008428:	080095a9 	.word	0x080095a9

0800842c <__lshift>:
 800842c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008430:	460c      	mov	r4, r1
 8008432:	6849      	ldr	r1, [r1, #4]
 8008434:	6923      	ldr	r3, [r4, #16]
 8008436:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800843a:	68a3      	ldr	r3, [r4, #8]
 800843c:	4607      	mov	r7, r0
 800843e:	4691      	mov	r9, r2
 8008440:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008444:	f108 0601 	add.w	r6, r8, #1
 8008448:	42b3      	cmp	r3, r6
 800844a:	db0b      	blt.n	8008464 <__lshift+0x38>
 800844c:	4638      	mov	r0, r7
 800844e:	f7ff fd93 	bl	8007f78 <_Balloc>
 8008452:	4605      	mov	r5, r0
 8008454:	b948      	cbnz	r0, 800846a <__lshift+0x3e>
 8008456:	4602      	mov	r2, r0
 8008458:	4b28      	ldr	r3, [pc, #160]	; (80084fc <__lshift+0xd0>)
 800845a:	4829      	ldr	r0, [pc, #164]	; (8008500 <__lshift+0xd4>)
 800845c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008460:	f000 fc74 	bl	8008d4c <__assert_func>
 8008464:	3101      	adds	r1, #1
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	e7ee      	b.n	8008448 <__lshift+0x1c>
 800846a:	2300      	movs	r3, #0
 800846c:	f100 0114 	add.w	r1, r0, #20
 8008470:	f100 0210 	add.w	r2, r0, #16
 8008474:	4618      	mov	r0, r3
 8008476:	4553      	cmp	r3, sl
 8008478:	db33      	blt.n	80084e2 <__lshift+0xb6>
 800847a:	6920      	ldr	r0, [r4, #16]
 800847c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008480:	f104 0314 	add.w	r3, r4, #20
 8008484:	f019 091f 	ands.w	r9, r9, #31
 8008488:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800848c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008490:	d02b      	beq.n	80084ea <__lshift+0xbe>
 8008492:	f1c9 0e20 	rsb	lr, r9, #32
 8008496:	468a      	mov	sl, r1
 8008498:	2200      	movs	r2, #0
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	fa00 f009 	lsl.w	r0, r0, r9
 80084a0:	4310      	orrs	r0, r2
 80084a2:	f84a 0b04 	str.w	r0, [sl], #4
 80084a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084aa:	459c      	cmp	ip, r3
 80084ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80084b0:	d8f3      	bhi.n	800849a <__lshift+0x6e>
 80084b2:	ebac 0304 	sub.w	r3, ip, r4
 80084b6:	3b15      	subs	r3, #21
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	3304      	adds	r3, #4
 80084be:	f104 0015 	add.w	r0, r4, #21
 80084c2:	4584      	cmp	ip, r0
 80084c4:	bf38      	it	cc
 80084c6:	2304      	movcc	r3, #4
 80084c8:	50ca      	str	r2, [r1, r3]
 80084ca:	b10a      	cbz	r2, 80084d0 <__lshift+0xa4>
 80084cc:	f108 0602 	add.w	r6, r8, #2
 80084d0:	3e01      	subs	r6, #1
 80084d2:	4638      	mov	r0, r7
 80084d4:	612e      	str	r6, [r5, #16]
 80084d6:	4621      	mov	r1, r4
 80084d8:	f7ff fd8e 	bl	8007ff8 <_Bfree>
 80084dc:	4628      	mov	r0, r5
 80084de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80084e6:	3301      	adds	r3, #1
 80084e8:	e7c5      	b.n	8008476 <__lshift+0x4a>
 80084ea:	3904      	subs	r1, #4
 80084ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80084f4:	459c      	cmp	ip, r3
 80084f6:	d8f9      	bhi.n	80084ec <__lshift+0xc0>
 80084f8:	e7ea      	b.n	80084d0 <__lshift+0xa4>
 80084fa:	bf00      	nop
 80084fc:	08009538 	.word	0x08009538
 8008500:	080095a9 	.word	0x080095a9

08008504 <__mcmp>:
 8008504:	b530      	push	{r4, r5, lr}
 8008506:	6902      	ldr	r2, [r0, #16]
 8008508:	690c      	ldr	r4, [r1, #16]
 800850a:	1b12      	subs	r2, r2, r4
 800850c:	d10e      	bne.n	800852c <__mcmp+0x28>
 800850e:	f100 0314 	add.w	r3, r0, #20
 8008512:	3114      	adds	r1, #20
 8008514:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008518:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800851c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008520:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008524:	42a5      	cmp	r5, r4
 8008526:	d003      	beq.n	8008530 <__mcmp+0x2c>
 8008528:	d305      	bcc.n	8008536 <__mcmp+0x32>
 800852a:	2201      	movs	r2, #1
 800852c:	4610      	mov	r0, r2
 800852e:	bd30      	pop	{r4, r5, pc}
 8008530:	4283      	cmp	r3, r0
 8008532:	d3f3      	bcc.n	800851c <__mcmp+0x18>
 8008534:	e7fa      	b.n	800852c <__mcmp+0x28>
 8008536:	f04f 32ff 	mov.w	r2, #4294967295
 800853a:	e7f7      	b.n	800852c <__mcmp+0x28>

0800853c <__mdiff>:
 800853c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008540:	460c      	mov	r4, r1
 8008542:	4606      	mov	r6, r0
 8008544:	4611      	mov	r1, r2
 8008546:	4620      	mov	r0, r4
 8008548:	4690      	mov	r8, r2
 800854a:	f7ff ffdb 	bl	8008504 <__mcmp>
 800854e:	1e05      	subs	r5, r0, #0
 8008550:	d110      	bne.n	8008574 <__mdiff+0x38>
 8008552:	4629      	mov	r1, r5
 8008554:	4630      	mov	r0, r6
 8008556:	f7ff fd0f 	bl	8007f78 <_Balloc>
 800855a:	b930      	cbnz	r0, 800856a <__mdiff+0x2e>
 800855c:	4b3a      	ldr	r3, [pc, #232]	; (8008648 <__mdiff+0x10c>)
 800855e:	4602      	mov	r2, r0
 8008560:	f240 2137 	movw	r1, #567	; 0x237
 8008564:	4839      	ldr	r0, [pc, #228]	; (800864c <__mdiff+0x110>)
 8008566:	f000 fbf1 	bl	8008d4c <__assert_func>
 800856a:	2301      	movs	r3, #1
 800856c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008574:	bfa4      	itt	ge
 8008576:	4643      	movge	r3, r8
 8008578:	46a0      	movge	r8, r4
 800857a:	4630      	mov	r0, r6
 800857c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008580:	bfa6      	itte	ge
 8008582:	461c      	movge	r4, r3
 8008584:	2500      	movge	r5, #0
 8008586:	2501      	movlt	r5, #1
 8008588:	f7ff fcf6 	bl	8007f78 <_Balloc>
 800858c:	b920      	cbnz	r0, 8008598 <__mdiff+0x5c>
 800858e:	4b2e      	ldr	r3, [pc, #184]	; (8008648 <__mdiff+0x10c>)
 8008590:	4602      	mov	r2, r0
 8008592:	f240 2145 	movw	r1, #581	; 0x245
 8008596:	e7e5      	b.n	8008564 <__mdiff+0x28>
 8008598:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800859c:	6926      	ldr	r6, [r4, #16]
 800859e:	60c5      	str	r5, [r0, #12]
 80085a0:	f104 0914 	add.w	r9, r4, #20
 80085a4:	f108 0514 	add.w	r5, r8, #20
 80085a8:	f100 0e14 	add.w	lr, r0, #20
 80085ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80085b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085b4:	f108 0210 	add.w	r2, r8, #16
 80085b8:	46f2      	mov	sl, lr
 80085ba:	2100      	movs	r1, #0
 80085bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80085c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80085c4:	fa11 f88b 	uxtah	r8, r1, fp
 80085c8:	b299      	uxth	r1, r3
 80085ca:	0c1b      	lsrs	r3, r3, #16
 80085cc:	eba8 0801 	sub.w	r8, r8, r1
 80085d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80085d8:	fa1f f888 	uxth.w	r8, r8
 80085dc:	1419      	asrs	r1, r3, #16
 80085de:	454e      	cmp	r6, r9
 80085e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085e4:	f84a 3b04 	str.w	r3, [sl], #4
 80085e8:	d8e8      	bhi.n	80085bc <__mdiff+0x80>
 80085ea:	1b33      	subs	r3, r6, r4
 80085ec:	3b15      	subs	r3, #21
 80085ee:	f023 0303 	bic.w	r3, r3, #3
 80085f2:	3304      	adds	r3, #4
 80085f4:	3415      	adds	r4, #21
 80085f6:	42a6      	cmp	r6, r4
 80085f8:	bf38      	it	cc
 80085fa:	2304      	movcc	r3, #4
 80085fc:	441d      	add	r5, r3
 80085fe:	4473      	add	r3, lr
 8008600:	469e      	mov	lr, r3
 8008602:	462e      	mov	r6, r5
 8008604:	4566      	cmp	r6, ip
 8008606:	d30e      	bcc.n	8008626 <__mdiff+0xea>
 8008608:	f10c 0203 	add.w	r2, ip, #3
 800860c:	1b52      	subs	r2, r2, r5
 800860e:	f022 0203 	bic.w	r2, r2, #3
 8008612:	3d03      	subs	r5, #3
 8008614:	45ac      	cmp	ip, r5
 8008616:	bf38      	it	cc
 8008618:	2200      	movcc	r2, #0
 800861a:	4413      	add	r3, r2
 800861c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008620:	b17a      	cbz	r2, 8008642 <__mdiff+0x106>
 8008622:	6107      	str	r7, [r0, #16]
 8008624:	e7a4      	b.n	8008570 <__mdiff+0x34>
 8008626:	f856 8b04 	ldr.w	r8, [r6], #4
 800862a:	fa11 f288 	uxtah	r2, r1, r8
 800862e:	1414      	asrs	r4, r2, #16
 8008630:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008634:	b292      	uxth	r2, r2
 8008636:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800863a:	f84e 2b04 	str.w	r2, [lr], #4
 800863e:	1421      	asrs	r1, r4, #16
 8008640:	e7e0      	b.n	8008604 <__mdiff+0xc8>
 8008642:	3f01      	subs	r7, #1
 8008644:	e7ea      	b.n	800861c <__mdiff+0xe0>
 8008646:	bf00      	nop
 8008648:	08009538 	.word	0x08009538
 800864c:	080095a9 	.word	0x080095a9

08008650 <__ulp>:
 8008650:	b082      	sub	sp, #8
 8008652:	ed8d 0b00 	vstr	d0, [sp]
 8008656:	9a01      	ldr	r2, [sp, #4]
 8008658:	4b0f      	ldr	r3, [pc, #60]	; (8008698 <__ulp+0x48>)
 800865a:	4013      	ands	r3, r2
 800865c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008660:	2b00      	cmp	r3, #0
 8008662:	dc08      	bgt.n	8008676 <__ulp+0x26>
 8008664:	425b      	negs	r3, r3
 8008666:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800866a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800866e:	da04      	bge.n	800867a <__ulp+0x2a>
 8008670:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008674:	4113      	asrs	r3, r2
 8008676:	2200      	movs	r2, #0
 8008678:	e008      	b.n	800868c <__ulp+0x3c>
 800867a:	f1a2 0314 	sub.w	r3, r2, #20
 800867e:	2b1e      	cmp	r3, #30
 8008680:	bfda      	itte	le
 8008682:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008686:	40da      	lsrle	r2, r3
 8008688:	2201      	movgt	r2, #1
 800868a:	2300      	movs	r3, #0
 800868c:	4619      	mov	r1, r3
 800868e:	4610      	mov	r0, r2
 8008690:	ec41 0b10 	vmov	d0, r0, r1
 8008694:	b002      	add	sp, #8
 8008696:	4770      	bx	lr
 8008698:	7ff00000 	.word	0x7ff00000

0800869c <__b2d>:
 800869c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a0:	6906      	ldr	r6, [r0, #16]
 80086a2:	f100 0814 	add.w	r8, r0, #20
 80086a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80086aa:	1f37      	subs	r7, r6, #4
 80086ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80086b0:	4610      	mov	r0, r2
 80086b2:	f7ff fd53 	bl	800815c <__hi0bits>
 80086b6:	f1c0 0320 	rsb	r3, r0, #32
 80086ba:	280a      	cmp	r0, #10
 80086bc:	600b      	str	r3, [r1, #0]
 80086be:	491b      	ldr	r1, [pc, #108]	; (800872c <__b2d+0x90>)
 80086c0:	dc15      	bgt.n	80086ee <__b2d+0x52>
 80086c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80086c6:	fa22 f30c 	lsr.w	r3, r2, ip
 80086ca:	45b8      	cmp	r8, r7
 80086cc:	ea43 0501 	orr.w	r5, r3, r1
 80086d0:	bf34      	ite	cc
 80086d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80086d6:	2300      	movcs	r3, #0
 80086d8:	3015      	adds	r0, #21
 80086da:	fa02 f000 	lsl.w	r0, r2, r0
 80086de:	fa23 f30c 	lsr.w	r3, r3, ip
 80086e2:	4303      	orrs	r3, r0
 80086e4:	461c      	mov	r4, r3
 80086e6:	ec45 4b10 	vmov	d0, r4, r5
 80086ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ee:	45b8      	cmp	r8, r7
 80086f0:	bf3a      	itte	cc
 80086f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80086f6:	f1a6 0708 	subcc.w	r7, r6, #8
 80086fa:	2300      	movcs	r3, #0
 80086fc:	380b      	subs	r0, #11
 80086fe:	d012      	beq.n	8008726 <__b2d+0x8a>
 8008700:	f1c0 0120 	rsb	r1, r0, #32
 8008704:	fa23 f401 	lsr.w	r4, r3, r1
 8008708:	4082      	lsls	r2, r0
 800870a:	4322      	orrs	r2, r4
 800870c:	4547      	cmp	r7, r8
 800870e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008712:	bf8c      	ite	hi
 8008714:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008718:	2200      	movls	r2, #0
 800871a:	4083      	lsls	r3, r0
 800871c:	40ca      	lsrs	r2, r1
 800871e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008722:	4313      	orrs	r3, r2
 8008724:	e7de      	b.n	80086e4 <__b2d+0x48>
 8008726:	ea42 0501 	orr.w	r5, r2, r1
 800872a:	e7db      	b.n	80086e4 <__b2d+0x48>
 800872c:	3ff00000 	.word	0x3ff00000

08008730 <__d2b>:
 8008730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008734:	460f      	mov	r7, r1
 8008736:	2101      	movs	r1, #1
 8008738:	ec59 8b10 	vmov	r8, r9, d0
 800873c:	4616      	mov	r6, r2
 800873e:	f7ff fc1b 	bl	8007f78 <_Balloc>
 8008742:	4604      	mov	r4, r0
 8008744:	b930      	cbnz	r0, 8008754 <__d2b+0x24>
 8008746:	4602      	mov	r2, r0
 8008748:	4b24      	ldr	r3, [pc, #144]	; (80087dc <__d2b+0xac>)
 800874a:	4825      	ldr	r0, [pc, #148]	; (80087e0 <__d2b+0xb0>)
 800874c:	f240 310f 	movw	r1, #783	; 0x30f
 8008750:	f000 fafc 	bl	8008d4c <__assert_func>
 8008754:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800875c:	bb2d      	cbnz	r5, 80087aa <__d2b+0x7a>
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	f1b8 0300 	subs.w	r3, r8, #0
 8008764:	d026      	beq.n	80087b4 <__d2b+0x84>
 8008766:	4668      	mov	r0, sp
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	f7ff fd17 	bl	800819c <__lo0bits>
 800876e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008772:	b1e8      	cbz	r0, 80087b0 <__d2b+0x80>
 8008774:	f1c0 0320 	rsb	r3, r0, #32
 8008778:	fa02 f303 	lsl.w	r3, r2, r3
 800877c:	430b      	orrs	r3, r1
 800877e:	40c2      	lsrs	r2, r0
 8008780:	6163      	str	r3, [r4, #20]
 8008782:	9201      	str	r2, [sp, #4]
 8008784:	9b01      	ldr	r3, [sp, #4]
 8008786:	61a3      	str	r3, [r4, #24]
 8008788:	2b00      	cmp	r3, #0
 800878a:	bf14      	ite	ne
 800878c:	2202      	movne	r2, #2
 800878e:	2201      	moveq	r2, #1
 8008790:	6122      	str	r2, [r4, #16]
 8008792:	b1bd      	cbz	r5, 80087c4 <__d2b+0x94>
 8008794:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008798:	4405      	add	r5, r0
 800879a:	603d      	str	r5, [r7, #0]
 800879c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087a0:	6030      	str	r0, [r6, #0]
 80087a2:	4620      	mov	r0, r4
 80087a4:	b003      	add	sp, #12
 80087a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087ae:	e7d6      	b.n	800875e <__d2b+0x2e>
 80087b0:	6161      	str	r1, [r4, #20]
 80087b2:	e7e7      	b.n	8008784 <__d2b+0x54>
 80087b4:	a801      	add	r0, sp, #4
 80087b6:	f7ff fcf1 	bl	800819c <__lo0bits>
 80087ba:	9b01      	ldr	r3, [sp, #4]
 80087bc:	6163      	str	r3, [r4, #20]
 80087be:	3020      	adds	r0, #32
 80087c0:	2201      	movs	r2, #1
 80087c2:	e7e5      	b.n	8008790 <__d2b+0x60>
 80087c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087cc:	6038      	str	r0, [r7, #0]
 80087ce:	6918      	ldr	r0, [r3, #16]
 80087d0:	f7ff fcc4 	bl	800815c <__hi0bits>
 80087d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087d8:	e7e2      	b.n	80087a0 <__d2b+0x70>
 80087da:	bf00      	nop
 80087dc:	08009538 	.word	0x08009538
 80087e0:	080095a9 	.word	0x080095a9

080087e4 <__ratio>:
 80087e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	4688      	mov	r8, r1
 80087ea:	4669      	mov	r1, sp
 80087ec:	4681      	mov	r9, r0
 80087ee:	f7ff ff55 	bl	800869c <__b2d>
 80087f2:	a901      	add	r1, sp, #4
 80087f4:	4640      	mov	r0, r8
 80087f6:	ec55 4b10 	vmov	r4, r5, d0
 80087fa:	f7ff ff4f 	bl	800869c <__b2d>
 80087fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008802:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008806:	eba3 0c02 	sub.w	ip, r3, r2
 800880a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800880e:	1a9b      	subs	r3, r3, r2
 8008810:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008814:	ec51 0b10 	vmov	r0, r1, d0
 8008818:	2b00      	cmp	r3, #0
 800881a:	bfd6      	itet	le
 800881c:	460a      	movle	r2, r1
 800881e:	462a      	movgt	r2, r5
 8008820:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008824:	468b      	mov	fp, r1
 8008826:	462f      	mov	r7, r5
 8008828:	bfd4      	ite	le
 800882a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800882e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008832:	4620      	mov	r0, r4
 8008834:	ee10 2a10 	vmov	r2, s0
 8008838:	465b      	mov	r3, fp
 800883a:	4639      	mov	r1, r7
 800883c:	f7f8 f806 	bl	800084c <__aeabi_ddiv>
 8008840:	ec41 0b10 	vmov	d0, r0, r1
 8008844:	b003      	add	sp, #12
 8008846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800884a <__copybits>:
 800884a:	3901      	subs	r1, #1
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	1149      	asrs	r1, r1, #5
 8008850:	6914      	ldr	r4, [r2, #16]
 8008852:	3101      	adds	r1, #1
 8008854:	f102 0314 	add.w	r3, r2, #20
 8008858:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800885c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008860:	1f05      	subs	r5, r0, #4
 8008862:	42a3      	cmp	r3, r4
 8008864:	d30c      	bcc.n	8008880 <__copybits+0x36>
 8008866:	1aa3      	subs	r3, r4, r2
 8008868:	3b11      	subs	r3, #17
 800886a:	f023 0303 	bic.w	r3, r3, #3
 800886e:	3211      	adds	r2, #17
 8008870:	42a2      	cmp	r2, r4
 8008872:	bf88      	it	hi
 8008874:	2300      	movhi	r3, #0
 8008876:	4418      	add	r0, r3
 8008878:	2300      	movs	r3, #0
 800887a:	4288      	cmp	r0, r1
 800887c:	d305      	bcc.n	800888a <__copybits+0x40>
 800887e:	bd70      	pop	{r4, r5, r6, pc}
 8008880:	f853 6b04 	ldr.w	r6, [r3], #4
 8008884:	f845 6f04 	str.w	r6, [r5, #4]!
 8008888:	e7eb      	b.n	8008862 <__copybits+0x18>
 800888a:	f840 3b04 	str.w	r3, [r0], #4
 800888e:	e7f4      	b.n	800887a <__copybits+0x30>

08008890 <__any_on>:
 8008890:	f100 0214 	add.w	r2, r0, #20
 8008894:	6900      	ldr	r0, [r0, #16]
 8008896:	114b      	asrs	r3, r1, #5
 8008898:	4298      	cmp	r0, r3
 800889a:	b510      	push	{r4, lr}
 800889c:	db11      	blt.n	80088c2 <__any_on+0x32>
 800889e:	dd0a      	ble.n	80088b6 <__any_on+0x26>
 80088a0:	f011 011f 	ands.w	r1, r1, #31
 80088a4:	d007      	beq.n	80088b6 <__any_on+0x26>
 80088a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80088aa:	fa24 f001 	lsr.w	r0, r4, r1
 80088ae:	fa00 f101 	lsl.w	r1, r0, r1
 80088b2:	428c      	cmp	r4, r1
 80088b4:	d10b      	bne.n	80088ce <__any_on+0x3e>
 80088b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d803      	bhi.n	80088c6 <__any_on+0x36>
 80088be:	2000      	movs	r0, #0
 80088c0:	bd10      	pop	{r4, pc}
 80088c2:	4603      	mov	r3, r0
 80088c4:	e7f7      	b.n	80088b6 <__any_on+0x26>
 80088c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088ca:	2900      	cmp	r1, #0
 80088cc:	d0f5      	beq.n	80088ba <__any_on+0x2a>
 80088ce:	2001      	movs	r0, #1
 80088d0:	e7f6      	b.n	80088c0 <__any_on+0x30>

080088d2 <__ascii_wctomb>:
 80088d2:	b149      	cbz	r1, 80088e8 <__ascii_wctomb+0x16>
 80088d4:	2aff      	cmp	r2, #255	; 0xff
 80088d6:	bf85      	ittet	hi
 80088d8:	238a      	movhi	r3, #138	; 0x8a
 80088da:	6003      	strhi	r3, [r0, #0]
 80088dc:	700a      	strbls	r2, [r1, #0]
 80088de:	f04f 30ff 	movhi.w	r0, #4294967295
 80088e2:	bf98      	it	ls
 80088e4:	2001      	movls	r0, #1
 80088e6:	4770      	bx	lr
 80088e8:	4608      	mov	r0, r1
 80088ea:	4770      	bx	lr

080088ec <__ssputs_r>:
 80088ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f0:	688e      	ldr	r6, [r1, #8]
 80088f2:	461f      	mov	r7, r3
 80088f4:	42be      	cmp	r6, r7
 80088f6:	680b      	ldr	r3, [r1, #0]
 80088f8:	4682      	mov	sl, r0
 80088fa:	460c      	mov	r4, r1
 80088fc:	4690      	mov	r8, r2
 80088fe:	d82c      	bhi.n	800895a <__ssputs_r+0x6e>
 8008900:	898a      	ldrh	r2, [r1, #12]
 8008902:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008906:	d026      	beq.n	8008956 <__ssputs_r+0x6a>
 8008908:	6965      	ldr	r5, [r4, #20]
 800890a:	6909      	ldr	r1, [r1, #16]
 800890c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008910:	eba3 0901 	sub.w	r9, r3, r1
 8008914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008918:	1c7b      	adds	r3, r7, #1
 800891a:	444b      	add	r3, r9
 800891c:	106d      	asrs	r5, r5, #1
 800891e:	429d      	cmp	r5, r3
 8008920:	bf38      	it	cc
 8008922:	461d      	movcc	r5, r3
 8008924:	0553      	lsls	r3, r2, #21
 8008926:	d527      	bpl.n	8008978 <__ssputs_r+0x8c>
 8008928:	4629      	mov	r1, r5
 800892a:	f7ff fa87 	bl	8007e3c <_malloc_r>
 800892e:	4606      	mov	r6, r0
 8008930:	b360      	cbz	r0, 800898c <__ssputs_r+0xa0>
 8008932:	6921      	ldr	r1, [r4, #16]
 8008934:	464a      	mov	r2, r9
 8008936:	f7fe f825 	bl	8006984 <memcpy>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008944:	81a3      	strh	r3, [r4, #12]
 8008946:	6126      	str	r6, [r4, #16]
 8008948:	6165      	str	r5, [r4, #20]
 800894a:	444e      	add	r6, r9
 800894c:	eba5 0509 	sub.w	r5, r5, r9
 8008950:	6026      	str	r6, [r4, #0]
 8008952:	60a5      	str	r5, [r4, #8]
 8008954:	463e      	mov	r6, r7
 8008956:	42be      	cmp	r6, r7
 8008958:	d900      	bls.n	800895c <__ssputs_r+0x70>
 800895a:	463e      	mov	r6, r7
 800895c:	6820      	ldr	r0, [r4, #0]
 800895e:	4632      	mov	r2, r6
 8008960:	4641      	mov	r1, r8
 8008962:	f000 f9c9 	bl	8008cf8 <memmove>
 8008966:	68a3      	ldr	r3, [r4, #8]
 8008968:	1b9b      	subs	r3, r3, r6
 800896a:	60a3      	str	r3, [r4, #8]
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	4433      	add	r3, r6
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	2000      	movs	r0, #0
 8008974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008978:	462a      	mov	r2, r5
 800897a:	f000 fa1b 	bl	8008db4 <_realloc_r>
 800897e:	4606      	mov	r6, r0
 8008980:	2800      	cmp	r0, #0
 8008982:	d1e0      	bne.n	8008946 <__ssputs_r+0x5a>
 8008984:	6921      	ldr	r1, [r4, #16]
 8008986:	4650      	mov	r0, sl
 8008988:	f7fe fe8c 	bl	80076a4 <_free_r>
 800898c:	230c      	movs	r3, #12
 800898e:	f8ca 3000 	str.w	r3, [sl]
 8008992:	89a3      	ldrh	r3, [r4, #12]
 8008994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008998:	81a3      	strh	r3, [r4, #12]
 800899a:	f04f 30ff 	mov.w	r0, #4294967295
 800899e:	e7e9      	b.n	8008974 <__ssputs_r+0x88>

080089a0 <_svfiprintf_r>:
 80089a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a4:	4698      	mov	r8, r3
 80089a6:	898b      	ldrh	r3, [r1, #12]
 80089a8:	061b      	lsls	r3, r3, #24
 80089aa:	b09d      	sub	sp, #116	; 0x74
 80089ac:	4607      	mov	r7, r0
 80089ae:	460d      	mov	r5, r1
 80089b0:	4614      	mov	r4, r2
 80089b2:	d50e      	bpl.n	80089d2 <_svfiprintf_r+0x32>
 80089b4:	690b      	ldr	r3, [r1, #16]
 80089b6:	b963      	cbnz	r3, 80089d2 <_svfiprintf_r+0x32>
 80089b8:	2140      	movs	r1, #64	; 0x40
 80089ba:	f7ff fa3f 	bl	8007e3c <_malloc_r>
 80089be:	6028      	str	r0, [r5, #0]
 80089c0:	6128      	str	r0, [r5, #16]
 80089c2:	b920      	cbnz	r0, 80089ce <_svfiprintf_r+0x2e>
 80089c4:	230c      	movs	r3, #12
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295
 80089cc:	e0d0      	b.n	8008b70 <_svfiprintf_r+0x1d0>
 80089ce:	2340      	movs	r3, #64	; 0x40
 80089d0:	616b      	str	r3, [r5, #20]
 80089d2:	2300      	movs	r3, #0
 80089d4:	9309      	str	r3, [sp, #36]	; 0x24
 80089d6:	2320      	movs	r3, #32
 80089d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80089e0:	2330      	movs	r3, #48	; 0x30
 80089e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008b88 <_svfiprintf_r+0x1e8>
 80089e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089ea:	f04f 0901 	mov.w	r9, #1
 80089ee:	4623      	mov	r3, r4
 80089f0:	469a      	mov	sl, r3
 80089f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089f6:	b10a      	cbz	r2, 80089fc <_svfiprintf_r+0x5c>
 80089f8:	2a25      	cmp	r2, #37	; 0x25
 80089fa:	d1f9      	bne.n	80089f0 <_svfiprintf_r+0x50>
 80089fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008a00:	d00b      	beq.n	8008a1a <_svfiprintf_r+0x7a>
 8008a02:	465b      	mov	r3, fp
 8008a04:	4622      	mov	r2, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f7ff ff6f 	bl	80088ec <__ssputs_r>
 8008a0e:	3001      	adds	r0, #1
 8008a10:	f000 80a9 	beq.w	8008b66 <_svfiprintf_r+0x1c6>
 8008a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a16:	445a      	add	r2, fp
 8008a18:	9209      	str	r2, [sp, #36]	; 0x24
 8008a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 80a1 	beq.w	8008b66 <_svfiprintf_r+0x1c6>
 8008a24:	2300      	movs	r3, #0
 8008a26:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a2e:	f10a 0a01 	add.w	sl, sl, #1
 8008a32:	9304      	str	r3, [sp, #16]
 8008a34:	9307      	str	r3, [sp, #28]
 8008a36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a3a:	931a      	str	r3, [sp, #104]	; 0x68
 8008a3c:	4654      	mov	r4, sl
 8008a3e:	2205      	movs	r2, #5
 8008a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a44:	4850      	ldr	r0, [pc, #320]	; (8008b88 <_svfiprintf_r+0x1e8>)
 8008a46:	f7f7 fbc3 	bl	80001d0 <memchr>
 8008a4a:	9a04      	ldr	r2, [sp, #16]
 8008a4c:	b9d8      	cbnz	r0, 8008a86 <_svfiprintf_r+0xe6>
 8008a4e:	06d0      	lsls	r0, r2, #27
 8008a50:	bf44      	itt	mi
 8008a52:	2320      	movmi	r3, #32
 8008a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a58:	0711      	lsls	r1, r2, #28
 8008a5a:	bf44      	itt	mi
 8008a5c:	232b      	movmi	r3, #43	; 0x2b
 8008a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a62:	f89a 3000 	ldrb.w	r3, [sl]
 8008a66:	2b2a      	cmp	r3, #42	; 0x2a
 8008a68:	d015      	beq.n	8008a96 <_svfiprintf_r+0xf6>
 8008a6a:	9a07      	ldr	r2, [sp, #28]
 8008a6c:	4654      	mov	r4, sl
 8008a6e:	2000      	movs	r0, #0
 8008a70:	f04f 0c0a 	mov.w	ip, #10
 8008a74:	4621      	mov	r1, r4
 8008a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a7a:	3b30      	subs	r3, #48	; 0x30
 8008a7c:	2b09      	cmp	r3, #9
 8008a7e:	d94d      	bls.n	8008b1c <_svfiprintf_r+0x17c>
 8008a80:	b1b0      	cbz	r0, 8008ab0 <_svfiprintf_r+0x110>
 8008a82:	9207      	str	r2, [sp, #28]
 8008a84:	e014      	b.n	8008ab0 <_svfiprintf_r+0x110>
 8008a86:	eba0 0308 	sub.w	r3, r0, r8
 8008a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	46a2      	mov	sl, r4
 8008a94:	e7d2      	b.n	8008a3c <_svfiprintf_r+0x9c>
 8008a96:	9b03      	ldr	r3, [sp, #12]
 8008a98:	1d19      	adds	r1, r3, #4
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	9103      	str	r1, [sp, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bfbb      	ittet	lt
 8008aa2:	425b      	neglt	r3, r3
 8008aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8008aa8:	9307      	strge	r3, [sp, #28]
 8008aaa:	9307      	strlt	r3, [sp, #28]
 8008aac:	bfb8      	it	lt
 8008aae:	9204      	strlt	r2, [sp, #16]
 8008ab0:	7823      	ldrb	r3, [r4, #0]
 8008ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ab4:	d10c      	bne.n	8008ad0 <_svfiprintf_r+0x130>
 8008ab6:	7863      	ldrb	r3, [r4, #1]
 8008ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aba:	d134      	bne.n	8008b26 <_svfiprintf_r+0x186>
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	1d1a      	adds	r2, r3, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	9203      	str	r2, [sp, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bfb8      	it	lt
 8008ac8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008acc:	3402      	adds	r4, #2
 8008ace:	9305      	str	r3, [sp, #20]
 8008ad0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008b98 <_svfiprintf_r+0x1f8>
 8008ad4:	7821      	ldrb	r1, [r4, #0]
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	4650      	mov	r0, sl
 8008ada:	f7f7 fb79 	bl	80001d0 <memchr>
 8008ade:	b138      	cbz	r0, 8008af0 <_svfiprintf_r+0x150>
 8008ae0:	9b04      	ldr	r3, [sp, #16]
 8008ae2:	eba0 000a 	sub.w	r0, r0, sl
 8008ae6:	2240      	movs	r2, #64	; 0x40
 8008ae8:	4082      	lsls	r2, r0
 8008aea:	4313      	orrs	r3, r2
 8008aec:	3401      	adds	r4, #1
 8008aee:	9304      	str	r3, [sp, #16]
 8008af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af4:	4825      	ldr	r0, [pc, #148]	; (8008b8c <_svfiprintf_r+0x1ec>)
 8008af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008afa:	2206      	movs	r2, #6
 8008afc:	f7f7 fb68 	bl	80001d0 <memchr>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d038      	beq.n	8008b76 <_svfiprintf_r+0x1d6>
 8008b04:	4b22      	ldr	r3, [pc, #136]	; (8008b90 <_svfiprintf_r+0x1f0>)
 8008b06:	bb1b      	cbnz	r3, 8008b50 <_svfiprintf_r+0x1b0>
 8008b08:	9b03      	ldr	r3, [sp, #12]
 8008b0a:	3307      	adds	r3, #7
 8008b0c:	f023 0307 	bic.w	r3, r3, #7
 8008b10:	3308      	adds	r3, #8
 8008b12:	9303      	str	r3, [sp, #12]
 8008b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b16:	4433      	add	r3, r6
 8008b18:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1a:	e768      	b.n	80089ee <_svfiprintf_r+0x4e>
 8008b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b20:	460c      	mov	r4, r1
 8008b22:	2001      	movs	r0, #1
 8008b24:	e7a6      	b.n	8008a74 <_svfiprintf_r+0xd4>
 8008b26:	2300      	movs	r3, #0
 8008b28:	3401      	adds	r4, #1
 8008b2a:	9305      	str	r3, [sp, #20]
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	f04f 0c0a 	mov.w	ip, #10
 8008b32:	4620      	mov	r0, r4
 8008b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b38:	3a30      	subs	r2, #48	; 0x30
 8008b3a:	2a09      	cmp	r2, #9
 8008b3c:	d903      	bls.n	8008b46 <_svfiprintf_r+0x1a6>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0c6      	beq.n	8008ad0 <_svfiprintf_r+0x130>
 8008b42:	9105      	str	r1, [sp, #20]
 8008b44:	e7c4      	b.n	8008ad0 <_svfiprintf_r+0x130>
 8008b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e7f0      	b.n	8008b32 <_svfiprintf_r+0x192>
 8008b50:	ab03      	add	r3, sp, #12
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	462a      	mov	r2, r5
 8008b56:	4b0f      	ldr	r3, [pc, #60]	; (8008b94 <_svfiprintf_r+0x1f4>)
 8008b58:	a904      	add	r1, sp, #16
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	f7fd f9a8 	bl	8005eb0 <_printf_float>
 8008b60:	1c42      	adds	r2, r0, #1
 8008b62:	4606      	mov	r6, r0
 8008b64:	d1d6      	bne.n	8008b14 <_svfiprintf_r+0x174>
 8008b66:	89ab      	ldrh	r3, [r5, #12]
 8008b68:	065b      	lsls	r3, r3, #25
 8008b6a:	f53f af2d 	bmi.w	80089c8 <_svfiprintf_r+0x28>
 8008b6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b70:	b01d      	add	sp, #116	; 0x74
 8008b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b76:	ab03      	add	r3, sp, #12
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	462a      	mov	r2, r5
 8008b7c:	4b05      	ldr	r3, [pc, #20]	; (8008b94 <_svfiprintf_r+0x1f4>)
 8008b7e:	a904      	add	r1, sp, #16
 8008b80:	4638      	mov	r0, r7
 8008b82:	f7fd fc39 	bl	80063f8 <_printf_i>
 8008b86:	e7eb      	b.n	8008b60 <_svfiprintf_r+0x1c0>
 8008b88:	08009805 	.word	0x08009805
 8008b8c:	0800980f 	.word	0x0800980f
 8008b90:	08005eb1 	.word	0x08005eb1
 8008b94:	080088ed 	.word	0x080088ed
 8008b98:	0800980b 	.word	0x0800980b

08008b9c <__sflush_r>:
 8008b9c:	898a      	ldrh	r2, [r1, #12]
 8008b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	0710      	lsls	r0, r2, #28
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	d458      	bmi.n	8008c5c <__sflush_r+0xc0>
 8008baa:	684b      	ldr	r3, [r1, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	dc05      	bgt.n	8008bbc <__sflush_r+0x20>
 8008bb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	dc02      	bgt.n	8008bbc <__sflush_r+0x20>
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bbe:	2e00      	cmp	r6, #0
 8008bc0:	d0f9      	beq.n	8008bb6 <__sflush_r+0x1a>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bc8:	682f      	ldr	r7, [r5, #0]
 8008bca:	6a21      	ldr	r1, [r4, #32]
 8008bcc:	602b      	str	r3, [r5, #0]
 8008bce:	d032      	beq.n	8008c36 <__sflush_r+0x9a>
 8008bd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	075a      	lsls	r2, r3, #29
 8008bd6:	d505      	bpl.n	8008be4 <__sflush_r+0x48>
 8008bd8:	6863      	ldr	r3, [r4, #4]
 8008bda:	1ac0      	subs	r0, r0, r3
 8008bdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bde:	b10b      	cbz	r3, 8008be4 <__sflush_r+0x48>
 8008be0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008be2:	1ac0      	subs	r0, r0, r3
 8008be4:	2300      	movs	r3, #0
 8008be6:	4602      	mov	r2, r0
 8008be8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bea:	6a21      	ldr	r1, [r4, #32]
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b0      	blx	r6
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	d106      	bne.n	8008c04 <__sflush_r+0x68>
 8008bf6:	6829      	ldr	r1, [r5, #0]
 8008bf8:	291d      	cmp	r1, #29
 8008bfa:	d82b      	bhi.n	8008c54 <__sflush_r+0xb8>
 8008bfc:	4a29      	ldr	r2, [pc, #164]	; (8008ca4 <__sflush_r+0x108>)
 8008bfe:	410a      	asrs	r2, r1
 8008c00:	07d6      	lsls	r6, r2, #31
 8008c02:	d427      	bmi.n	8008c54 <__sflush_r+0xb8>
 8008c04:	2200      	movs	r2, #0
 8008c06:	6062      	str	r2, [r4, #4]
 8008c08:	04d9      	lsls	r1, r3, #19
 8008c0a:	6922      	ldr	r2, [r4, #16]
 8008c0c:	6022      	str	r2, [r4, #0]
 8008c0e:	d504      	bpl.n	8008c1a <__sflush_r+0x7e>
 8008c10:	1c42      	adds	r2, r0, #1
 8008c12:	d101      	bne.n	8008c18 <__sflush_r+0x7c>
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	b903      	cbnz	r3, 8008c1a <__sflush_r+0x7e>
 8008c18:	6560      	str	r0, [r4, #84]	; 0x54
 8008c1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c1c:	602f      	str	r7, [r5, #0]
 8008c1e:	2900      	cmp	r1, #0
 8008c20:	d0c9      	beq.n	8008bb6 <__sflush_r+0x1a>
 8008c22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c26:	4299      	cmp	r1, r3
 8008c28:	d002      	beq.n	8008c30 <__sflush_r+0x94>
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f7fe fd3a 	bl	80076a4 <_free_r>
 8008c30:	2000      	movs	r0, #0
 8008c32:	6360      	str	r0, [r4, #52]	; 0x34
 8008c34:	e7c0      	b.n	8008bb8 <__sflush_r+0x1c>
 8008c36:	2301      	movs	r3, #1
 8008c38:	4628      	mov	r0, r5
 8008c3a:	47b0      	blx	r6
 8008c3c:	1c41      	adds	r1, r0, #1
 8008c3e:	d1c8      	bne.n	8008bd2 <__sflush_r+0x36>
 8008c40:	682b      	ldr	r3, [r5, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d0c5      	beq.n	8008bd2 <__sflush_r+0x36>
 8008c46:	2b1d      	cmp	r3, #29
 8008c48:	d001      	beq.n	8008c4e <__sflush_r+0xb2>
 8008c4a:	2b16      	cmp	r3, #22
 8008c4c:	d101      	bne.n	8008c52 <__sflush_r+0xb6>
 8008c4e:	602f      	str	r7, [r5, #0]
 8008c50:	e7b1      	b.n	8008bb6 <__sflush_r+0x1a>
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	e7ad      	b.n	8008bb8 <__sflush_r+0x1c>
 8008c5c:	690f      	ldr	r7, [r1, #16]
 8008c5e:	2f00      	cmp	r7, #0
 8008c60:	d0a9      	beq.n	8008bb6 <__sflush_r+0x1a>
 8008c62:	0793      	lsls	r3, r2, #30
 8008c64:	680e      	ldr	r6, [r1, #0]
 8008c66:	bf08      	it	eq
 8008c68:	694b      	ldreq	r3, [r1, #20]
 8008c6a:	600f      	str	r7, [r1, #0]
 8008c6c:	bf18      	it	ne
 8008c6e:	2300      	movne	r3, #0
 8008c70:	eba6 0807 	sub.w	r8, r6, r7
 8008c74:	608b      	str	r3, [r1, #8]
 8008c76:	f1b8 0f00 	cmp.w	r8, #0
 8008c7a:	dd9c      	ble.n	8008bb6 <__sflush_r+0x1a>
 8008c7c:	6a21      	ldr	r1, [r4, #32]
 8008c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c80:	4643      	mov	r3, r8
 8008c82:	463a      	mov	r2, r7
 8008c84:	4628      	mov	r0, r5
 8008c86:	47b0      	blx	r6
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	dc06      	bgt.n	8008c9a <__sflush_r+0xfe>
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	e78e      	b.n	8008bb8 <__sflush_r+0x1c>
 8008c9a:	4407      	add	r7, r0
 8008c9c:	eba8 0800 	sub.w	r8, r8, r0
 8008ca0:	e7e9      	b.n	8008c76 <__sflush_r+0xda>
 8008ca2:	bf00      	nop
 8008ca4:	dfbffffe 	.word	0xdfbffffe

08008ca8 <_fflush_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	690b      	ldr	r3, [r1, #16]
 8008cac:	4605      	mov	r5, r0
 8008cae:	460c      	mov	r4, r1
 8008cb0:	b913      	cbnz	r3, 8008cb8 <_fflush_r+0x10>
 8008cb2:	2500      	movs	r5, #0
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	b118      	cbz	r0, 8008cc2 <_fflush_r+0x1a>
 8008cba:	6a03      	ldr	r3, [r0, #32]
 8008cbc:	b90b      	cbnz	r3, 8008cc2 <_fflush_r+0x1a>
 8008cbe:	f7fd fd37 	bl	8006730 <__sinit>
 8008cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0f3      	beq.n	8008cb2 <_fflush_r+0xa>
 8008cca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ccc:	07d0      	lsls	r0, r2, #31
 8008cce:	d404      	bmi.n	8008cda <_fflush_r+0x32>
 8008cd0:	0599      	lsls	r1, r3, #22
 8008cd2:	d402      	bmi.n	8008cda <_fflush_r+0x32>
 8008cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cd6:	f7fd fe53 	bl	8006980 <__retarget_lock_acquire_recursive>
 8008cda:	4628      	mov	r0, r5
 8008cdc:	4621      	mov	r1, r4
 8008cde:	f7ff ff5d 	bl	8008b9c <__sflush_r>
 8008ce2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ce4:	07da      	lsls	r2, r3, #31
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	d4e4      	bmi.n	8008cb4 <_fflush_r+0xc>
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	059b      	lsls	r3, r3, #22
 8008cee:	d4e1      	bmi.n	8008cb4 <_fflush_r+0xc>
 8008cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cf2:	f7fd fe46 	bl	8006982 <__retarget_lock_release_recursive>
 8008cf6:	e7dd      	b.n	8008cb4 <_fflush_r+0xc>

08008cf8 <memmove>:
 8008cf8:	4288      	cmp	r0, r1
 8008cfa:	b510      	push	{r4, lr}
 8008cfc:	eb01 0402 	add.w	r4, r1, r2
 8008d00:	d902      	bls.n	8008d08 <memmove+0x10>
 8008d02:	4284      	cmp	r4, r0
 8008d04:	4623      	mov	r3, r4
 8008d06:	d807      	bhi.n	8008d18 <memmove+0x20>
 8008d08:	1e43      	subs	r3, r0, #1
 8008d0a:	42a1      	cmp	r1, r4
 8008d0c:	d008      	beq.n	8008d20 <memmove+0x28>
 8008d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d16:	e7f8      	b.n	8008d0a <memmove+0x12>
 8008d18:	4402      	add	r2, r0
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	428a      	cmp	r2, r1
 8008d1e:	d100      	bne.n	8008d22 <memmove+0x2a>
 8008d20:	bd10      	pop	{r4, pc}
 8008d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d2a:	e7f7      	b.n	8008d1c <memmove+0x24>

08008d2c <_sbrk_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4d06      	ldr	r5, [pc, #24]	; (8008d48 <_sbrk_r+0x1c>)
 8008d30:	2300      	movs	r3, #0
 8008d32:	4604      	mov	r4, r0
 8008d34:	4608      	mov	r0, r1
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	f7f9 f8ae 	bl	8001e98 <_sbrk>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_sbrk_r+0x1a>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_sbrk_r+0x1a>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	20000580 	.word	0x20000580

08008d4c <__assert_func>:
 8008d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d4e:	4614      	mov	r4, r2
 8008d50:	461a      	mov	r2, r3
 8008d52:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <__assert_func+0x2c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4605      	mov	r5, r0
 8008d58:	68d8      	ldr	r0, [r3, #12]
 8008d5a:	b14c      	cbz	r4, 8008d70 <__assert_func+0x24>
 8008d5c:	4b07      	ldr	r3, [pc, #28]	; (8008d7c <__assert_func+0x30>)
 8008d5e:	9100      	str	r1, [sp, #0]
 8008d60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d64:	4906      	ldr	r1, [pc, #24]	; (8008d80 <__assert_func+0x34>)
 8008d66:	462b      	mov	r3, r5
 8008d68:	f000 f854 	bl	8008e14 <fiprintf>
 8008d6c:	f000 f864 	bl	8008e38 <abort>
 8008d70:	4b04      	ldr	r3, [pc, #16]	; (8008d84 <__assert_func+0x38>)
 8008d72:	461c      	mov	r4, r3
 8008d74:	e7f3      	b.n	8008d5e <__assert_func+0x12>
 8008d76:	bf00      	nop
 8008d78:	200001d0 	.word	0x200001d0
 8008d7c:	08009816 	.word	0x08009816
 8008d80:	08009823 	.word	0x08009823
 8008d84:	08009851 	.word	0x08009851

08008d88 <_calloc_r>:
 8008d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d8a:	fba1 2402 	umull	r2, r4, r1, r2
 8008d8e:	b94c      	cbnz	r4, 8008da4 <_calloc_r+0x1c>
 8008d90:	4611      	mov	r1, r2
 8008d92:	9201      	str	r2, [sp, #4]
 8008d94:	f7ff f852 	bl	8007e3c <_malloc_r>
 8008d98:	9a01      	ldr	r2, [sp, #4]
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	b930      	cbnz	r0, 8008dac <_calloc_r+0x24>
 8008d9e:	4628      	mov	r0, r5
 8008da0:	b003      	add	sp, #12
 8008da2:	bd30      	pop	{r4, r5, pc}
 8008da4:	220c      	movs	r2, #12
 8008da6:	6002      	str	r2, [r0, #0]
 8008da8:	2500      	movs	r5, #0
 8008daa:	e7f8      	b.n	8008d9e <_calloc_r+0x16>
 8008dac:	4621      	mov	r1, r4
 8008dae:	f7fd fd58 	bl	8006862 <memset>
 8008db2:	e7f4      	b.n	8008d9e <_calloc_r+0x16>

08008db4 <_realloc_r>:
 8008db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db8:	4680      	mov	r8, r0
 8008dba:	4614      	mov	r4, r2
 8008dbc:	460e      	mov	r6, r1
 8008dbe:	b921      	cbnz	r1, 8008dca <_realloc_r+0x16>
 8008dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	f7ff b839 	b.w	8007e3c <_malloc_r>
 8008dca:	b92a      	cbnz	r2, 8008dd8 <_realloc_r+0x24>
 8008dcc:	f7fe fc6a 	bl	80076a4 <_free_r>
 8008dd0:	4625      	mov	r5, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd8:	f000 f835 	bl	8008e46 <_malloc_usable_size_r>
 8008ddc:	4284      	cmp	r4, r0
 8008dde:	4607      	mov	r7, r0
 8008de0:	d802      	bhi.n	8008de8 <_realloc_r+0x34>
 8008de2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008de6:	d812      	bhi.n	8008e0e <_realloc_r+0x5a>
 8008de8:	4621      	mov	r1, r4
 8008dea:	4640      	mov	r0, r8
 8008dec:	f7ff f826 	bl	8007e3c <_malloc_r>
 8008df0:	4605      	mov	r5, r0
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d0ed      	beq.n	8008dd2 <_realloc_r+0x1e>
 8008df6:	42bc      	cmp	r4, r7
 8008df8:	4622      	mov	r2, r4
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	bf28      	it	cs
 8008dfe:	463a      	movcs	r2, r7
 8008e00:	f7fd fdc0 	bl	8006984 <memcpy>
 8008e04:	4631      	mov	r1, r6
 8008e06:	4640      	mov	r0, r8
 8008e08:	f7fe fc4c 	bl	80076a4 <_free_r>
 8008e0c:	e7e1      	b.n	8008dd2 <_realloc_r+0x1e>
 8008e0e:	4635      	mov	r5, r6
 8008e10:	e7df      	b.n	8008dd2 <_realloc_r+0x1e>
	...

08008e14 <fiprintf>:
 8008e14:	b40e      	push	{r1, r2, r3}
 8008e16:	b503      	push	{r0, r1, lr}
 8008e18:	4601      	mov	r1, r0
 8008e1a:	ab03      	add	r3, sp, #12
 8008e1c:	4805      	ldr	r0, [pc, #20]	; (8008e34 <fiprintf+0x20>)
 8008e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e22:	6800      	ldr	r0, [r0, #0]
 8008e24:	9301      	str	r3, [sp, #4]
 8008e26:	f000 f83f 	bl	8008ea8 <_vfiprintf_r>
 8008e2a:	b002      	add	sp, #8
 8008e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e30:	b003      	add	sp, #12
 8008e32:	4770      	bx	lr
 8008e34:	200001d0 	.word	0x200001d0

08008e38 <abort>:
 8008e38:	b508      	push	{r3, lr}
 8008e3a:	2006      	movs	r0, #6
 8008e3c:	f000 fa0c 	bl	8009258 <raise>
 8008e40:	2001      	movs	r0, #1
 8008e42:	f7f8 ffb1 	bl	8001da8 <_exit>

08008e46 <_malloc_usable_size_r>:
 8008e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e4a:	1f18      	subs	r0, r3, #4
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	bfbc      	itt	lt
 8008e50:	580b      	ldrlt	r3, [r1, r0]
 8008e52:	18c0      	addlt	r0, r0, r3
 8008e54:	4770      	bx	lr

08008e56 <__sfputc_r>:
 8008e56:	6893      	ldr	r3, [r2, #8]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	b410      	push	{r4}
 8008e5e:	6093      	str	r3, [r2, #8]
 8008e60:	da08      	bge.n	8008e74 <__sfputc_r+0x1e>
 8008e62:	6994      	ldr	r4, [r2, #24]
 8008e64:	42a3      	cmp	r3, r4
 8008e66:	db01      	blt.n	8008e6c <__sfputc_r+0x16>
 8008e68:	290a      	cmp	r1, #10
 8008e6a:	d103      	bne.n	8008e74 <__sfputc_r+0x1e>
 8008e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e70:	f000 b934 	b.w	80090dc <__swbuf_r>
 8008e74:	6813      	ldr	r3, [r2, #0]
 8008e76:	1c58      	adds	r0, r3, #1
 8008e78:	6010      	str	r0, [r2, #0]
 8008e7a:	7019      	strb	r1, [r3, #0]
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <__sfputs_r>:
 8008e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e86:	4606      	mov	r6, r0
 8008e88:	460f      	mov	r7, r1
 8008e8a:	4614      	mov	r4, r2
 8008e8c:	18d5      	adds	r5, r2, r3
 8008e8e:	42ac      	cmp	r4, r5
 8008e90:	d101      	bne.n	8008e96 <__sfputs_r+0x12>
 8008e92:	2000      	movs	r0, #0
 8008e94:	e007      	b.n	8008ea6 <__sfputs_r+0x22>
 8008e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e9a:	463a      	mov	r2, r7
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f7ff ffda 	bl	8008e56 <__sfputc_r>
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	d1f3      	bne.n	8008e8e <__sfputs_r+0xa>
 8008ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ea8 <_vfiprintf_r>:
 8008ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	460d      	mov	r5, r1
 8008eae:	b09d      	sub	sp, #116	; 0x74
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	4698      	mov	r8, r3
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	b118      	cbz	r0, 8008ec0 <_vfiprintf_r+0x18>
 8008eb8:	6a03      	ldr	r3, [r0, #32]
 8008eba:	b90b      	cbnz	r3, 8008ec0 <_vfiprintf_r+0x18>
 8008ebc:	f7fd fc38 	bl	8006730 <__sinit>
 8008ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ec2:	07d9      	lsls	r1, r3, #31
 8008ec4:	d405      	bmi.n	8008ed2 <_vfiprintf_r+0x2a>
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	059a      	lsls	r2, r3, #22
 8008eca:	d402      	bmi.n	8008ed2 <_vfiprintf_r+0x2a>
 8008ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ece:	f7fd fd57 	bl	8006980 <__retarget_lock_acquire_recursive>
 8008ed2:	89ab      	ldrh	r3, [r5, #12]
 8008ed4:	071b      	lsls	r3, r3, #28
 8008ed6:	d501      	bpl.n	8008edc <_vfiprintf_r+0x34>
 8008ed8:	692b      	ldr	r3, [r5, #16]
 8008eda:	b99b      	cbnz	r3, 8008f04 <_vfiprintf_r+0x5c>
 8008edc:	4629      	mov	r1, r5
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f000 f93a 	bl	8009158 <__swsetup_r>
 8008ee4:	b170      	cbz	r0, 8008f04 <_vfiprintf_r+0x5c>
 8008ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ee8:	07dc      	lsls	r4, r3, #31
 8008eea:	d504      	bpl.n	8008ef6 <_vfiprintf_r+0x4e>
 8008eec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef0:	b01d      	add	sp, #116	; 0x74
 8008ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef6:	89ab      	ldrh	r3, [r5, #12]
 8008ef8:	0598      	lsls	r0, r3, #22
 8008efa:	d4f7      	bmi.n	8008eec <_vfiprintf_r+0x44>
 8008efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008efe:	f7fd fd40 	bl	8006982 <__retarget_lock_release_recursive>
 8008f02:	e7f3      	b.n	8008eec <_vfiprintf_r+0x44>
 8008f04:	2300      	movs	r3, #0
 8008f06:	9309      	str	r3, [sp, #36]	; 0x24
 8008f08:	2320      	movs	r3, #32
 8008f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f12:	2330      	movs	r3, #48	; 0x30
 8008f14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80090c8 <_vfiprintf_r+0x220>
 8008f18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f1c:	f04f 0901 	mov.w	r9, #1
 8008f20:	4623      	mov	r3, r4
 8008f22:	469a      	mov	sl, r3
 8008f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f28:	b10a      	cbz	r2, 8008f2e <_vfiprintf_r+0x86>
 8008f2a:	2a25      	cmp	r2, #37	; 0x25
 8008f2c:	d1f9      	bne.n	8008f22 <_vfiprintf_r+0x7a>
 8008f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8008f32:	d00b      	beq.n	8008f4c <_vfiprintf_r+0xa4>
 8008f34:	465b      	mov	r3, fp
 8008f36:	4622      	mov	r2, r4
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f7ff ffa2 	bl	8008e84 <__sfputs_r>
 8008f40:	3001      	adds	r0, #1
 8008f42:	f000 80a9 	beq.w	8009098 <_vfiprintf_r+0x1f0>
 8008f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f48:	445a      	add	r2, fp
 8008f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 80a1 	beq.w	8009098 <_vfiprintf_r+0x1f0>
 8008f56:	2300      	movs	r3, #0
 8008f58:	f04f 32ff 	mov.w	r2, #4294967295
 8008f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f60:	f10a 0a01 	add.w	sl, sl, #1
 8008f64:	9304      	str	r3, [sp, #16]
 8008f66:	9307      	str	r3, [sp, #28]
 8008f68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8008f6e:	4654      	mov	r4, sl
 8008f70:	2205      	movs	r2, #5
 8008f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f76:	4854      	ldr	r0, [pc, #336]	; (80090c8 <_vfiprintf_r+0x220>)
 8008f78:	f7f7 f92a 	bl	80001d0 <memchr>
 8008f7c:	9a04      	ldr	r2, [sp, #16]
 8008f7e:	b9d8      	cbnz	r0, 8008fb8 <_vfiprintf_r+0x110>
 8008f80:	06d1      	lsls	r1, r2, #27
 8008f82:	bf44      	itt	mi
 8008f84:	2320      	movmi	r3, #32
 8008f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f8a:	0713      	lsls	r3, r2, #28
 8008f8c:	bf44      	itt	mi
 8008f8e:	232b      	movmi	r3, #43	; 0x2b
 8008f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f94:	f89a 3000 	ldrb.w	r3, [sl]
 8008f98:	2b2a      	cmp	r3, #42	; 0x2a
 8008f9a:	d015      	beq.n	8008fc8 <_vfiprintf_r+0x120>
 8008f9c:	9a07      	ldr	r2, [sp, #28]
 8008f9e:	4654      	mov	r4, sl
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	f04f 0c0a 	mov.w	ip, #10
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fac:	3b30      	subs	r3, #48	; 0x30
 8008fae:	2b09      	cmp	r3, #9
 8008fb0:	d94d      	bls.n	800904e <_vfiprintf_r+0x1a6>
 8008fb2:	b1b0      	cbz	r0, 8008fe2 <_vfiprintf_r+0x13a>
 8008fb4:	9207      	str	r2, [sp, #28]
 8008fb6:	e014      	b.n	8008fe2 <_vfiprintf_r+0x13a>
 8008fb8:	eba0 0308 	sub.w	r3, r0, r8
 8008fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	9304      	str	r3, [sp, #16]
 8008fc4:	46a2      	mov	sl, r4
 8008fc6:	e7d2      	b.n	8008f6e <_vfiprintf_r+0xc6>
 8008fc8:	9b03      	ldr	r3, [sp, #12]
 8008fca:	1d19      	adds	r1, r3, #4
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	9103      	str	r1, [sp, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	bfbb      	ittet	lt
 8008fd4:	425b      	neglt	r3, r3
 8008fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8008fda:	9307      	strge	r3, [sp, #28]
 8008fdc:	9307      	strlt	r3, [sp, #28]
 8008fde:	bfb8      	it	lt
 8008fe0:	9204      	strlt	r2, [sp, #16]
 8008fe2:	7823      	ldrb	r3, [r4, #0]
 8008fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8008fe6:	d10c      	bne.n	8009002 <_vfiprintf_r+0x15a>
 8008fe8:	7863      	ldrb	r3, [r4, #1]
 8008fea:	2b2a      	cmp	r3, #42	; 0x2a
 8008fec:	d134      	bne.n	8009058 <_vfiprintf_r+0x1b0>
 8008fee:	9b03      	ldr	r3, [sp, #12]
 8008ff0:	1d1a      	adds	r2, r3, #4
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	9203      	str	r2, [sp, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	bfb8      	it	lt
 8008ffa:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ffe:	3402      	adds	r4, #2
 8009000:	9305      	str	r3, [sp, #20]
 8009002:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80090d8 <_vfiprintf_r+0x230>
 8009006:	7821      	ldrb	r1, [r4, #0]
 8009008:	2203      	movs	r2, #3
 800900a:	4650      	mov	r0, sl
 800900c:	f7f7 f8e0 	bl	80001d0 <memchr>
 8009010:	b138      	cbz	r0, 8009022 <_vfiprintf_r+0x17a>
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	eba0 000a 	sub.w	r0, r0, sl
 8009018:	2240      	movs	r2, #64	; 0x40
 800901a:	4082      	lsls	r2, r0
 800901c:	4313      	orrs	r3, r2
 800901e:	3401      	adds	r4, #1
 8009020:	9304      	str	r3, [sp, #16]
 8009022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009026:	4829      	ldr	r0, [pc, #164]	; (80090cc <_vfiprintf_r+0x224>)
 8009028:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800902c:	2206      	movs	r2, #6
 800902e:	f7f7 f8cf 	bl	80001d0 <memchr>
 8009032:	2800      	cmp	r0, #0
 8009034:	d03f      	beq.n	80090b6 <_vfiprintf_r+0x20e>
 8009036:	4b26      	ldr	r3, [pc, #152]	; (80090d0 <_vfiprintf_r+0x228>)
 8009038:	bb1b      	cbnz	r3, 8009082 <_vfiprintf_r+0x1da>
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	3307      	adds	r3, #7
 800903e:	f023 0307 	bic.w	r3, r3, #7
 8009042:	3308      	adds	r3, #8
 8009044:	9303      	str	r3, [sp, #12]
 8009046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009048:	443b      	add	r3, r7
 800904a:	9309      	str	r3, [sp, #36]	; 0x24
 800904c:	e768      	b.n	8008f20 <_vfiprintf_r+0x78>
 800904e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009052:	460c      	mov	r4, r1
 8009054:	2001      	movs	r0, #1
 8009056:	e7a6      	b.n	8008fa6 <_vfiprintf_r+0xfe>
 8009058:	2300      	movs	r3, #0
 800905a:	3401      	adds	r4, #1
 800905c:	9305      	str	r3, [sp, #20]
 800905e:	4619      	mov	r1, r3
 8009060:	f04f 0c0a 	mov.w	ip, #10
 8009064:	4620      	mov	r0, r4
 8009066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800906a:	3a30      	subs	r2, #48	; 0x30
 800906c:	2a09      	cmp	r2, #9
 800906e:	d903      	bls.n	8009078 <_vfiprintf_r+0x1d0>
 8009070:	2b00      	cmp	r3, #0
 8009072:	d0c6      	beq.n	8009002 <_vfiprintf_r+0x15a>
 8009074:	9105      	str	r1, [sp, #20]
 8009076:	e7c4      	b.n	8009002 <_vfiprintf_r+0x15a>
 8009078:	fb0c 2101 	mla	r1, ip, r1, r2
 800907c:	4604      	mov	r4, r0
 800907e:	2301      	movs	r3, #1
 8009080:	e7f0      	b.n	8009064 <_vfiprintf_r+0x1bc>
 8009082:	ab03      	add	r3, sp, #12
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	462a      	mov	r2, r5
 8009088:	4b12      	ldr	r3, [pc, #72]	; (80090d4 <_vfiprintf_r+0x22c>)
 800908a:	a904      	add	r1, sp, #16
 800908c:	4630      	mov	r0, r6
 800908e:	f7fc ff0f 	bl	8005eb0 <_printf_float>
 8009092:	4607      	mov	r7, r0
 8009094:	1c78      	adds	r0, r7, #1
 8009096:	d1d6      	bne.n	8009046 <_vfiprintf_r+0x19e>
 8009098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800909a:	07d9      	lsls	r1, r3, #31
 800909c:	d405      	bmi.n	80090aa <_vfiprintf_r+0x202>
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	059a      	lsls	r2, r3, #22
 80090a2:	d402      	bmi.n	80090aa <_vfiprintf_r+0x202>
 80090a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090a6:	f7fd fc6c 	bl	8006982 <__retarget_lock_release_recursive>
 80090aa:	89ab      	ldrh	r3, [r5, #12]
 80090ac:	065b      	lsls	r3, r3, #25
 80090ae:	f53f af1d 	bmi.w	8008eec <_vfiprintf_r+0x44>
 80090b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090b4:	e71c      	b.n	8008ef0 <_vfiprintf_r+0x48>
 80090b6:	ab03      	add	r3, sp, #12
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	462a      	mov	r2, r5
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <_vfiprintf_r+0x22c>)
 80090be:	a904      	add	r1, sp, #16
 80090c0:	4630      	mov	r0, r6
 80090c2:	f7fd f999 	bl	80063f8 <_printf_i>
 80090c6:	e7e4      	b.n	8009092 <_vfiprintf_r+0x1ea>
 80090c8:	08009805 	.word	0x08009805
 80090cc:	0800980f 	.word	0x0800980f
 80090d0:	08005eb1 	.word	0x08005eb1
 80090d4:	08008e85 	.word	0x08008e85
 80090d8:	0800980b 	.word	0x0800980b

080090dc <__swbuf_r>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	460e      	mov	r6, r1
 80090e0:	4614      	mov	r4, r2
 80090e2:	4605      	mov	r5, r0
 80090e4:	b118      	cbz	r0, 80090ee <__swbuf_r+0x12>
 80090e6:	6a03      	ldr	r3, [r0, #32]
 80090e8:	b90b      	cbnz	r3, 80090ee <__swbuf_r+0x12>
 80090ea:	f7fd fb21 	bl	8006730 <__sinit>
 80090ee:	69a3      	ldr	r3, [r4, #24]
 80090f0:	60a3      	str	r3, [r4, #8]
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	071a      	lsls	r2, r3, #28
 80090f6:	d525      	bpl.n	8009144 <__swbuf_r+0x68>
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	b31b      	cbz	r3, 8009144 <__swbuf_r+0x68>
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	6922      	ldr	r2, [r4, #16]
 8009100:	1a98      	subs	r0, r3, r2
 8009102:	6963      	ldr	r3, [r4, #20]
 8009104:	b2f6      	uxtb	r6, r6
 8009106:	4283      	cmp	r3, r0
 8009108:	4637      	mov	r7, r6
 800910a:	dc04      	bgt.n	8009116 <__swbuf_r+0x3a>
 800910c:	4621      	mov	r1, r4
 800910e:	4628      	mov	r0, r5
 8009110:	f7ff fdca 	bl	8008ca8 <_fflush_r>
 8009114:	b9e0      	cbnz	r0, 8009150 <__swbuf_r+0x74>
 8009116:	68a3      	ldr	r3, [r4, #8]
 8009118:	3b01      	subs	r3, #1
 800911a:	60a3      	str	r3, [r4, #8]
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	1c5a      	adds	r2, r3, #1
 8009120:	6022      	str	r2, [r4, #0]
 8009122:	701e      	strb	r6, [r3, #0]
 8009124:	6962      	ldr	r2, [r4, #20]
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	429a      	cmp	r2, r3
 800912a:	d004      	beq.n	8009136 <__swbuf_r+0x5a>
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	07db      	lsls	r3, r3, #31
 8009130:	d506      	bpl.n	8009140 <__swbuf_r+0x64>
 8009132:	2e0a      	cmp	r6, #10
 8009134:	d104      	bne.n	8009140 <__swbuf_r+0x64>
 8009136:	4621      	mov	r1, r4
 8009138:	4628      	mov	r0, r5
 800913a:	f7ff fdb5 	bl	8008ca8 <_fflush_r>
 800913e:	b938      	cbnz	r0, 8009150 <__swbuf_r+0x74>
 8009140:	4638      	mov	r0, r7
 8009142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009144:	4621      	mov	r1, r4
 8009146:	4628      	mov	r0, r5
 8009148:	f000 f806 	bl	8009158 <__swsetup_r>
 800914c:	2800      	cmp	r0, #0
 800914e:	d0d5      	beq.n	80090fc <__swbuf_r+0x20>
 8009150:	f04f 37ff 	mov.w	r7, #4294967295
 8009154:	e7f4      	b.n	8009140 <__swbuf_r+0x64>
	...

08009158 <__swsetup_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4b2a      	ldr	r3, [pc, #168]	; (8009204 <__swsetup_r+0xac>)
 800915c:	4605      	mov	r5, r0
 800915e:	6818      	ldr	r0, [r3, #0]
 8009160:	460c      	mov	r4, r1
 8009162:	b118      	cbz	r0, 800916c <__swsetup_r+0x14>
 8009164:	6a03      	ldr	r3, [r0, #32]
 8009166:	b90b      	cbnz	r3, 800916c <__swsetup_r+0x14>
 8009168:	f7fd fae2 	bl	8006730 <__sinit>
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009172:	0718      	lsls	r0, r3, #28
 8009174:	d422      	bmi.n	80091bc <__swsetup_r+0x64>
 8009176:	06d9      	lsls	r1, r3, #27
 8009178:	d407      	bmi.n	800918a <__swsetup_r+0x32>
 800917a:	2309      	movs	r3, #9
 800917c:	602b      	str	r3, [r5, #0]
 800917e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009182:	81a3      	strh	r3, [r4, #12]
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	e034      	b.n	80091f4 <__swsetup_r+0x9c>
 800918a:	0758      	lsls	r0, r3, #29
 800918c:	d512      	bpl.n	80091b4 <__swsetup_r+0x5c>
 800918e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009190:	b141      	cbz	r1, 80091a4 <__swsetup_r+0x4c>
 8009192:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009196:	4299      	cmp	r1, r3
 8009198:	d002      	beq.n	80091a0 <__swsetup_r+0x48>
 800919a:	4628      	mov	r0, r5
 800919c:	f7fe fa82 	bl	80076a4 <_free_r>
 80091a0:	2300      	movs	r3, #0
 80091a2:	6363      	str	r3, [r4, #52]	; 0x34
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	2300      	movs	r3, #0
 80091ae:	6063      	str	r3, [r4, #4]
 80091b0:	6923      	ldr	r3, [r4, #16]
 80091b2:	6023      	str	r3, [r4, #0]
 80091b4:	89a3      	ldrh	r3, [r4, #12]
 80091b6:	f043 0308 	orr.w	r3, r3, #8
 80091ba:	81a3      	strh	r3, [r4, #12]
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	b94b      	cbnz	r3, 80091d4 <__swsetup_r+0x7c>
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091ca:	d003      	beq.n	80091d4 <__swsetup_r+0x7c>
 80091cc:	4621      	mov	r1, r4
 80091ce:	4628      	mov	r0, r5
 80091d0:	f000 f884 	bl	80092dc <__smakebuf_r>
 80091d4:	89a0      	ldrh	r0, [r4, #12]
 80091d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091da:	f010 0301 	ands.w	r3, r0, #1
 80091de:	d00a      	beq.n	80091f6 <__swsetup_r+0x9e>
 80091e0:	2300      	movs	r3, #0
 80091e2:	60a3      	str	r3, [r4, #8]
 80091e4:	6963      	ldr	r3, [r4, #20]
 80091e6:	425b      	negs	r3, r3
 80091e8:	61a3      	str	r3, [r4, #24]
 80091ea:	6923      	ldr	r3, [r4, #16]
 80091ec:	b943      	cbnz	r3, 8009200 <__swsetup_r+0xa8>
 80091ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091f2:	d1c4      	bne.n	800917e <__swsetup_r+0x26>
 80091f4:	bd38      	pop	{r3, r4, r5, pc}
 80091f6:	0781      	lsls	r1, r0, #30
 80091f8:	bf58      	it	pl
 80091fa:	6963      	ldrpl	r3, [r4, #20]
 80091fc:	60a3      	str	r3, [r4, #8]
 80091fe:	e7f4      	b.n	80091ea <__swsetup_r+0x92>
 8009200:	2000      	movs	r0, #0
 8009202:	e7f7      	b.n	80091f4 <__swsetup_r+0x9c>
 8009204:	200001d0 	.word	0x200001d0

08009208 <_raise_r>:
 8009208:	291f      	cmp	r1, #31
 800920a:	b538      	push	{r3, r4, r5, lr}
 800920c:	4604      	mov	r4, r0
 800920e:	460d      	mov	r5, r1
 8009210:	d904      	bls.n	800921c <_raise_r+0x14>
 8009212:	2316      	movs	r3, #22
 8009214:	6003      	str	r3, [r0, #0]
 8009216:	f04f 30ff 	mov.w	r0, #4294967295
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800921e:	b112      	cbz	r2, 8009226 <_raise_r+0x1e>
 8009220:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009224:	b94b      	cbnz	r3, 800923a <_raise_r+0x32>
 8009226:	4620      	mov	r0, r4
 8009228:	f000 f830 	bl	800928c <_getpid_r>
 800922c:	462a      	mov	r2, r5
 800922e:	4601      	mov	r1, r0
 8009230:	4620      	mov	r0, r4
 8009232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009236:	f000 b817 	b.w	8009268 <_kill_r>
 800923a:	2b01      	cmp	r3, #1
 800923c:	d00a      	beq.n	8009254 <_raise_r+0x4c>
 800923e:	1c59      	adds	r1, r3, #1
 8009240:	d103      	bne.n	800924a <_raise_r+0x42>
 8009242:	2316      	movs	r3, #22
 8009244:	6003      	str	r3, [r0, #0]
 8009246:	2001      	movs	r0, #1
 8009248:	e7e7      	b.n	800921a <_raise_r+0x12>
 800924a:	2400      	movs	r4, #0
 800924c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009250:	4628      	mov	r0, r5
 8009252:	4798      	blx	r3
 8009254:	2000      	movs	r0, #0
 8009256:	e7e0      	b.n	800921a <_raise_r+0x12>

08009258 <raise>:
 8009258:	4b02      	ldr	r3, [pc, #8]	; (8009264 <raise+0xc>)
 800925a:	4601      	mov	r1, r0
 800925c:	6818      	ldr	r0, [r3, #0]
 800925e:	f7ff bfd3 	b.w	8009208 <_raise_r>
 8009262:	bf00      	nop
 8009264:	200001d0 	.word	0x200001d0

08009268 <_kill_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4d07      	ldr	r5, [pc, #28]	; (8009288 <_kill_r+0x20>)
 800926c:	2300      	movs	r3, #0
 800926e:	4604      	mov	r4, r0
 8009270:	4608      	mov	r0, r1
 8009272:	4611      	mov	r1, r2
 8009274:	602b      	str	r3, [r5, #0]
 8009276:	f7f8 fd87 	bl	8001d88 <_kill>
 800927a:	1c43      	adds	r3, r0, #1
 800927c:	d102      	bne.n	8009284 <_kill_r+0x1c>
 800927e:	682b      	ldr	r3, [r5, #0]
 8009280:	b103      	cbz	r3, 8009284 <_kill_r+0x1c>
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	bd38      	pop	{r3, r4, r5, pc}
 8009286:	bf00      	nop
 8009288:	20000580 	.word	0x20000580

0800928c <_getpid_r>:
 800928c:	f7f8 bd74 	b.w	8001d78 <_getpid>

08009290 <__swhatbuf_r>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	460c      	mov	r4, r1
 8009294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009298:	2900      	cmp	r1, #0
 800929a:	b096      	sub	sp, #88	; 0x58
 800929c:	4615      	mov	r5, r2
 800929e:	461e      	mov	r6, r3
 80092a0:	da0d      	bge.n	80092be <__swhatbuf_r+0x2e>
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092a8:	f04f 0100 	mov.w	r1, #0
 80092ac:	bf0c      	ite	eq
 80092ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80092b2:	2340      	movne	r3, #64	; 0x40
 80092b4:	2000      	movs	r0, #0
 80092b6:	6031      	str	r1, [r6, #0]
 80092b8:	602b      	str	r3, [r5, #0]
 80092ba:	b016      	add	sp, #88	; 0x58
 80092bc:	bd70      	pop	{r4, r5, r6, pc}
 80092be:	466a      	mov	r2, sp
 80092c0:	f000 f848 	bl	8009354 <_fstat_r>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	dbec      	blt.n	80092a2 <__swhatbuf_r+0x12>
 80092c8:	9901      	ldr	r1, [sp, #4]
 80092ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80092ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80092d2:	4259      	negs	r1, r3
 80092d4:	4159      	adcs	r1, r3
 80092d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092da:	e7eb      	b.n	80092b4 <__swhatbuf_r+0x24>

080092dc <__smakebuf_r>:
 80092dc:	898b      	ldrh	r3, [r1, #12]
 80092de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092e0:	079d      	lsls	r5, r3, #30
 80092e2:	4606      	mov	r6, r0
 80092e4:	460c      	mov	r4, r1
 80092e6:	d507      	bpl.n	80092f8 <__smakebuf_r+0x1c>
 80092e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	6123      	str	r3, [r4, #16]
 80092f0:	2301      	movs	r3, #1
 80092f2:	6163      	str	r3, [r4, #20]
 80092f4:	b002      	add	sp, #8
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	ab01      	add	r3, sp, #4
 80092fa:	466a      	mov	r2, sp
 80092fc:	f7ff ffc8 	bl	8009290 <__swhatbuf_r>
 8009300:	9900      	ldr	r1, [sp, #0]
 8009302:	4605      	mov	r5, r0
 8009304:	4630      	mov	r0, r6
 8009306:	f7fe fd99 	bl	8007e3c <_malloc_r>
 800930a:	b948      	cbnz	r0, 8009320 <__smakebuf_r+0x44>
 800930c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009310:	059a      	lsls	r2, r3, #22
 8009312:	d4ef      	bmi.n	80092f4 <__smakebuf_r+0x18>
 8009314:	f023 0303 	bic.w	r3, r3, #3
 8009318:	f043 0302 	orr.w	r3, r3, #2
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	e7e3      	b.n	80092e8 <__smakebuf_r+0xc>
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	6020      	str	r0, [r4, #0]
 8009324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009328:	81a3      	strh	r3, [r4, #12]
 800932a:	9b00      	ldr	r3, [sp, #0]
 800932c:	6163      	str	r3, [r4, #20]
 800932e:	9b01      	ldr	r3, [sp, #4]
 8009330:	6120      	str	r0, [r4, #16]
 8009332:	b15b      	cbz	r3, 800934c <__smakebuf_r+0x70>
 8009334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009338:	4630      	mov	r0, r6
 800933a:	f000 f81d 	bl	8009378 <_isatty_r>
 800933e:	b128      	cbz	r0, 800934c <__smakebuf_r+0x70>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	f023 0303 	bic.w	r3, r3, #3
 8009346:	f043 0301 	orr.w	r3, r3, #1
 800934a:	81a3      	strh	r3, [r4, #12]
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	431d      	orrs	r5, r3
 8009350:	81a5      	strh	r5, [r4, #12]
 8009352:	e7cf      	b.n	80092f4 <__smakebuf_r+0x18>

08009354 <_fstat_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	4d07      	ldr	r5, [pc, #28]	; (8009374 <_fstat_r+0x20>)
 8009358:	2300      	movs	r3, #0
 800935a:	4604      	mov	r4, r0
 800935c:	4608      	mov	r0, r1
 800935e:	4611      	mov	r1, r2
 8009360:	602b      	str	r3, [r5, #0]
 8009362:	f7f8 fd70 	bl	8001e46 <_fstat>
 8009366:	1c43      	adds	r3, r0, #1
 8009368:	d102      	bne.n	8009370 <_fstat_r+0x1c>
 800936a:	682b      	ldr	r3, [r5, #0]
 800936c:	b103      	cbz	r3, 8009370 <_fstat_r+0x1c>
 800936e:	6023      	str	r3, [r4, #0]
 8009370:	bd38      	pop	{r3, r4, r5, pc}
 8009372:	bf00      	nop
 8009374:	20000580 	.word	0x20000580

08009378 <_isatty_r>:
 8009378:	b538      	push	{r3, r4, r5, lr}
 800937a:	4d06      	ldr	r5, [pc, #24]	; (8009394 <_isatty_r+0x1c>)
 800937c:	2300      	movs	r3, #0
 800937e:	4604      	mov	r4, r0
 8009380:	4608      	mov	r0, r1
 8009382:	602b      	str	r3, [r5, #0]
 8009384:	f7f8 fd6f 	bl	8001e66 <_isatty>
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	d102      	bne.n	8009392 <_isatty_r+0x1a>
 800938c:	682b      	ldr	r3, [r5, #0]
 800938e:	b103      	cbz	r3, 8009392 <_isatty_r+0x1a>
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	bd38      	pop	{r3, r4, r5, pc}
 8009394:	20000580 	.word	0x20000580

08009398 <_init>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	bf00      	nop
 800939c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939e:	bc08      	pop	{r3}
 80093a0:	469e      	mov	lr, r3
 80093a2:	4770      	bx	lr

080093a4 <_fini>:
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	bf00      	nop
 80093a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093aa:	bc08      	pop	{r3}
 80093ac:	469e      	mov	lr, r3
 80093ae:	4770      	bx	lr
