
GPSTrackingNeo6mv2Reciever.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003260  08003260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003298  08003298  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003298  08003298  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003298  08003298  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000130  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a1ae  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a4a  00000000  00000000  0002a22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000758  00000000  00000000  0002bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000059c  00000000  00000000  0002c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e89f  00000000  00000000  0002c96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a87c  00000000  00000000  0004b20b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b5914  00000000  00000000  00055a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001c74  00000000  00000000  0010b39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0010d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003248 	.word	0x08003248

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003248 	.word	0x08003248

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa1c 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f807 	bl	80001e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8be 	bl	8000354 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80001d8:	f000 f88c 	bl	80002f4 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 f85a 	bl	8000294 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	e7fe      	b.n	80001e0 <main+0x18>

080001e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b096      	sub	sp, #88	; 0x58
 80001e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80001ec:	2228      	movs	r2, #40	; 0x28
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f002 fffc 	bl	80031ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f6:	f107 031c 	add.w	r3, r7, #28
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000206:	463b      	mov	r3, r7
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
 8000214:	615a      	str	r2, [r3, #20]
 8000216:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000218:	2302      	movs	r3, #2
 800021a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021c:	2301      	movs	r3, #1
 800021e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000220:	2310      	movs	r3, #16
 8000222:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000228:	2300      	movs	r3, #0
 800022a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800022c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000230:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000232:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000236:	4618      	mov	r0, r3
 8000238:	f000 fd46 	bl	8000cc8 <HAL_RCC_OscConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000242:	f000 f8b7 	bl	80003b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000246:	230f      	movs	r3, #15
 8000248:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024a:	2302      	movs	r3, #2
 800024c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025c:	f107 031c 	add.w	r3, r7, #28
 8000260:	2102      	movs	r1, #2
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fd6e 	bl	8001d44 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800026e:	f000 f8a1 	bl	80003b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000272:	2301      	movs	r3, #1
 8000274:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027a:	463b      	mov	r3, r7
 800027c:	4618      	mov	r0, r3
 800027e:	f001 ff97 	bl	80021b0 <HAL_RCCEx_PeriphCLKConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000288:	f000 f894 	bl	80003b4 <Error_Handler>
  }
}
 800028c:	bf00      	nop
 800028e:	3758      	adds	r7, #88	; 0x58
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000298:	4b14      	ldr	r3, [pc, #80]	; (80002ec <MX_USART1_UART_Init+0x58>)
 800029a:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <MX_USART1_UART_Init+0x5c>)
 800029c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800029e:	4b13      	ldr	r3, [pc, #76]	; (80002ec <MX_USART1_UART_Init+0x58>)
 80002a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002a6:	4b11      	ldr	r3, [pc, #68]	; (80002ec <MX_USART1_UART_Init+0x58>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002ac:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <MX_USART1_UART_Init+0x58>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <MX_USART1_UART_Init+0x58>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <MX_USART1_UART_Init+0x58>)
 80002ba:	220c      	movs	r2, #12
 80002bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002be:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <MX_USART1_UART_Init+0x58>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <MX_USART1_UART_Init+0x58>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_USART1_UART_Init+0x58>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <MX_USART1_UART_Init+0x58>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002d6:	4805      	ldr	r0, [pc, #20]	; (80002ec <MX_USART1_UART_Init+0x58>)
 80002d8:	f002 f8a0 	bl	800241c <HAL_UART_Init>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80002e2:	f000 f867 	bl	80003b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000028 	.word	0x20000028
 80002f0:	40013800 	.word	0x40013800

080002f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80002f8:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_USART3_UART_Init+0x58>)
 80002fa:	4a15      	ldr	r2, [pc, #84]	; (8000350 <MX_USART3_UART_Init+0x5c>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_USART3_UART_Init+0x58>)
 8000300:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000304:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_USART3_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_USART3_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_USART3_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_USART3_UART_Init+0x58>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_USART3_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_USART3_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <MX_USART3_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_USART3_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_USART3_UART_Init+0x58>)
 8000338:	f002 f870 	bl	800241c <HAL_UART_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000342:	f000 f837 	bl	80003b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	200000b0 	.word	0x200000b0
 8000350:	40004800 	.word	0x40004800

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_GPIO_Init+0x5c>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <MX_GPIO_Init+0x5c>)
 8000360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000364:	6153      	str	r3, [r2, #20]
 8000366:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_GPIO_Init+0x5c>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_GPIO_Init+0x5c>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <MX_GPIO_Init+0x5c>)
 8000378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_GPIO_Init+0x5c>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_GPIO_Init+0x5c>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <MX_GPIO_Init+0x5c>)
 8000390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_GPIO_Init+0x5c>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000

080003b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b8:	b672      	cpsid	i
}
 80003ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003bc:	e7fe      	b.n	80003bc <Error_Handler+0x8>
	...

080003c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <HAL_MspInit+0x44>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <HAL_MspInit+0x44>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6193      	str	r3, [r2, #24]
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <HAL_MspInit+0x44>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <HAL_MspInit+0x44>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	4a08      	ldr	r2, [pc, #32]	; (8000404 <HAL_MspInit+0x44>)
 80003e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e8:	61d3      	str	r3, [r2, #28]
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <HAL_MspInit+0x44>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003f6:	2007      	movs	r0, #7
 80003f8:	f000 fa3c 	bl	8000874 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40021000 	.word	0x40021000

08000408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08c      	sub	sp, #48	; 0x30
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000410:	f107 031c 	add.w	r3, r7, #28
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a36      	ldr	r2, [pc, #216]	; (8000500 <HAL_UART_MspInit+0xf8>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d130      	bne.n	800048c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800042a:	4b36      	ldr	r3, [pc, #216]	; (8000504 <HAL_UART_MspInit+0xfc>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a35      	ldr	r2, [pc, #212]	; (8000504 <HAL_UART_MspInit+0xfc>)
 8000430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b33      	ldr	r3, [pc, #204]	; (8000504 <HAL_UART_MspInit+0xfc>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800043e:	61bb      	str	r3, [r7, #24]
 8000440:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b30      	ldr	r3, [pc, #192]	; (8000504 <HAL_UART_MspInit+0xfc>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a2f      	ldr	r2, [pc, #188]	; (8000504 <HAL_UART_MspInit+0xfc>)
 8000448:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b2d      	ldr	r3, [pc, #180]	; (8000504 <HAL_UART_MspInit+0xfc>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000456:	617b      	str	r3, [r7, #20]
 8000458:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800045a:	2330      	movs	r3, #48	; 0x30
 800045c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045e:	2302      	movs	r3, #2
 8000460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000466:	2303      	movs	r3, #3
 8000468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800046a:	2307      	movs	r3, #7
 800046c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046e:	f107 031c 	add.w	r3, r7, #28
 8000472:	4619      	mov	r1, r3
 8000474:	4824      	ldr	r0, [pc, #144]	; (8000508 <HAL_UART_MspInit+0x100>)
 8000476:	f000 fab5 	bl	80009e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	2025      	movs	r0, #37	; 0x25
 8000480:	f000 fa03 	bl	800088a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000484:	2025      	movs	r0, #37	; 0x25
 8000486:	f000 fa1c 	bl	80008c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800048a:	e035      	b.n	80004f8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a1e      	ldr	r2, [pc, #120]	; (800050c <HAL_UART_MspInit+0x104>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d130      	bne.n	80004f8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000496:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <HAL_UART_MspInit+0xfc>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a1a      	ldr	r2, [pc, #104]	; (8000504 <HAL_UART_MspInit+0xfc>)
 800049c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <HAL_UART_MspInit+0xfc>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <HAL_UART_MspInit+0xfc>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a14      	ldr	r2, [pc, #80]	; (8000504 <HAL_UART_MspInit+0xfc>)
 80004b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <HAL_UART_MspInit+0xfc>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80004c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80004ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004cc:	2302      	movs	r3, #2
 80004ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d4:	2303      	movs	r3, #3
 80004d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80004d8:	2307      	movs	r3, #7
 80004da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004dc:	f107 031c 	add.w	r3, r7, #28
 80004e0:	4619      	mov	r1, r3
 80004e2:	480b      	ldr	r0, [pc, #44]	; (8000510 <HAL_UART_MspInit+0x108>)
 80004e4:	f000 fa7e 	bl	80009e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2100      	movs	r1, #0
 80004ec:	2027      	movs	r0, #39	; 0x27
 80004ee:	f000 f9cc 	bl	800088a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80004f2:	2027      	movs	r0, #39	; 0x27
 80004f4:	f000 f9e5 	bl	80008c2 <HAL_NVIC_EnableIRQ>
}
 80004f8:	bf00      	nop
 80004fa:	3730      	adds	r7, #48	; 0x30
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40013800 	.word	0x40013800
 8000504:	40021000 	.word	0x40021000
 8000508:	48000800 	.word	0x48000800
 800050c:	40004800 	.word	0x40004800
 8000510:	48000400 	.word	0x48000400

08000514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <NMI_Handler+0x4>

0800051a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <HardFault_Handler+0x4>

08000520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <MemManage_Handler+0x4>

08000526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <BusFault_Handler+0x4>

0800052c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <UsageFault_Handler+0x4>

08000532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000560:	f000 f898 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}

08000568 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <USART1_IRQHandler+0x10>)
 800056e:	f001 ffa3 	bl	80024b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000028 	.word	0x20000028

0800057c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXT line 28.
  */
void USART3_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <USART3_IRQHandler+0x10>)
 8000582:	f001 ff99 	bl	80024b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200000b0 	.word	0x200000b0

08000590 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <SystemInit+0x20>)
 8000596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800059a:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <SystemInit+0x20>)
 800059c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005ec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b8:	f7ff ffea 	bl	8000590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005be:	490d      	ldr	r1, [pc, #52]	; (80005f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c0:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <LoopForever+0xe>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c4:	e002      	b.n	80005cc <LoopCopyDataInit>

080005c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ca:	3304      	adds	r3, #4

080005cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d0:	d3f9      	bcc.n	80005c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d2:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d4:	4c0a      	ldr	r4, [pc, #40]	; (8000600 <LoopForever+0x16>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d8:	e001      	b.n	80005de <LoopFillZerobss>

080005da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005dc:	3204      	adds	r2, #4

080005de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e0:	d3fb      	bcc.n	80005da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005e2:	f002 fe0d 	bl	8003200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e6:	f7ff fdef 	bl	80001c8 <main>

080005ea <LoopForever>:

LoopForever:
    b LoopForever
 80005ea:	e7fe      	b.n	80005ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005ec:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f8:	080032a0 	.word	0x080032a0
  ldr r2, =_sbss
 80005fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000600:	2000013c 	.word	0x2000013c

08000604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_2_IRQHandler>
	...

08000608 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_Init+0x28>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_Init+0x28>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f92b 	bl	8000874 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f808 	bl	8000634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000624:	f7ff fecc 	bl	80003c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40022000 	.word	0x40022000

08000634 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_InitTick+0x54>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_InitTick+0x58>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	fbb3 f3f1 	udiv	r3, r3, r1
 800064e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f943 	bl	80008de <HAL_SYSTICK_Config>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e00e      	b.n	8000680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d80a      	bhi.n	800067e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000668:	2200      	movs	r2, #0
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f000 f90b 	bl	800088a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000674:	4a06      	ldr	r2, [pc, #24]	; (8000690 <HAL_InitTick+0x5c>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800067a:	2300      	movs	r3, #0
 800067c:	e000      	b.n	8000680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000000 	.word	0x20000000
 800068c:	20000008 	.word	0x20000008
 8000690:	20000004 	.word	0x20000004

08000694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_IncTick+0x20>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x24>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <HAL_IncTick+0x24>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000138 	.word	0x20000138

080006bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return uwTick;  
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <HAL_GetTick+0x14>)
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000138 	.word	0x20000138

080006d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	60d3      	str	r3, [r2, #12]
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <__NVIC_GetPriorityGrouping+0x18>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	f003 0307 	and.w	r3, r3, #7
}
 800072a:	4618      	mov	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	2b00      	cmp	r3, #0
 8000748:	db0b      	blt.n	8000762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f003 021f 	and.w	r2, r3, #31
 8000750:	4907      	ldr	r1, [pc, #28]	; (8000770 <__NVIC_EnableIRQ+0x38>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	095b      	lsrs	r3, r3, #5
 8000758:	2001      	movs	r0, #1
 800075a:	fa00 f202 	lsl.w	r2, r0, r2
 800075e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000e100 	.word	0xe000e100

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	f1c3 0307 	rsb	r3, r3, #7
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	bf28      	it	cs
 80007e6:	2304      	movcs	r3, #4
 80007e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3304      	adds	r3, #4
 80007ee:	2b06      	cmp	r3, #6
 80007f0:	d902      	bls.n	80007f8 <NVIC_EncodePriority+0x30>
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3b03      	subs	r3, #3
 80007f6:	e000      	b.n	80007fa <NVIC_EncodePriority+0x32>
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43da      	mvns	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	401a      	ands	r2, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000810:	f04f 31ff 	mov.w	r1, #4294967295
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	43d9      	mvns	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	4313      	orrs	r3, r2
         );
}
 8000822:	4618      	mov	r0, r3
 8000824:	3724      	adds	r7, #36	; 0x24
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000840:	d301      	bcc.n	8000846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2301      	movs	r3, #1
 8000844:	e00f      	b.n	8000866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <SysTick_Config+0x40>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084e:	210f      	movs	r1, #15
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f7ff ff8e 	bl	8000774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <SysTick_Config+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SysTick_Config+0x40>)
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	e000e010 	.word	0xe000e010

08000874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ff29 	bl	80006d4 <__NVIC_SetPriorityGrouping>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800089c:	f7ff ff3e 	bl	800071c <__NVIC_GetPriorityGrouping>
 80008a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	68b9      	ldr	r1, [r7, #8]
 80008a6:	6978      	ldr	r0, [r7, #20]
 80008a8:	f7ff ff8e 	bl	80007c8 <NVIC_EncodePriority>
 80008ac:	4602      	mov	r2, r0
 80008ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff5d 	bl	8000774 <__NVIC_SetPriority>
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff31 	bl	8000738 <__NVIC_EnableIRQ>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffa2 	bl	8000830 <SysTick_Config>
 80008ec:	4603      	mov	r3, r0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000904:	2b02      	cmp	r3, #2
 8000906:	d008      	beq.n	800091a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2204      	movs	r2, #4
 800090c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e020      	b.n	800095c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f022 020e 	bic.w	r2, r2, #14
 8000928:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f022 0201 	bic.w	r2, r2, #1
 8000938:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000942:	2101      	movs	r1, #1
 8000944:	fa01 f202 	lsl.w	r2, r1, r2
 8000948:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000970:	2300      	movs	r3, #0
 8000972:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800097a:	2b02      	cmp	r3, #2
 800097c:	d005      	beq.n	800098a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2204      	movs	r2, #4
 8000982:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	e027      	b.n	80009da <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f022 020e 	bic.w	r2, r2, #14
 8000998:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f022 0201 	bic.w	r2, r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009b2:	2101      	movs	r1, #1
 80009b4:	fa01 f202 	lsl.w	r2, r1, r2
 80009b8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2201      	movs	r2, #1
 80009be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d003      	beq.n	80009da <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	4798      	blx	r3
    } 
  }
  return status;
 80009da:	7bfb      	ldrb	r3, [r7, #15]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b087      	sub	sp, #28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f2:	e14e      	b.n	8000c92 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	2101      	movs	r1, #1
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 8140 	beq.w	8000c8c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 0303 	and.w	r3, r3, #3
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d005      	beq.n	8000a24 <HAL_GPIO_Init+0x40>
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d130      	bne.n	8000a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	2203      	movs	r2, #3
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	68da      	ldr	r2, [r3, #12]
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	091b      	lsrs	r3, r3, #4
 8000a70:	f003 0201 	and.w	r2, r3, #1
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 0303 	and.w	r3, r3, #3
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d017      	beq.n	8000ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	689a      	ldr	r2, [r3, #8]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d123      	bne.n	8000b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	08da      	lsrs	r2, r3, #3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3208      	adds	r2, #8
 8000ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	691a      	ldr	r2, [r3, #16]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	08da      	lsrs	r2, r3, #3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3208      	adds	r2, #8
 8000b10:	6939      	ldr	r1, [r7, #16]
 8000b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2203      	movs	r2, #3
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 0203 	and.w	r2, r3, #3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 809a 	beq.w	8000c8c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b58:	4b55      	ldr	r3, [pc, #340]	; (8000cb0 <HAL_GPIO_Init+0x2cc>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a54      	ldr	r2, [pc, #336]	; (8000cb0 <HAL_GPIO_Init+0x2cc>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b52      	ldr	r3, [pc, #328]	; (8000cb0 <HAL_GPIO_Init+0x2cc>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b70:	4a50      	ldr	r2, [pc, #320]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	089b      	lsrs	r3, r3, #2
 8000b76:	3302      	adds	r3, #2
 8000b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	220f      	movs	r2, #15
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b9a:	d013      	beq.n	8000bc4 <HAL_GPIO_Init+0x1e0>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a46      	ldr	r2, [pc, #280]	; (8000cb8 <HAL_GPIO_Init+0x2d4>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d00d      	beq.n	8000bc0 <HAL_GPIO_Init+0x1dc>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a45      	ldr	r2, [pc, #276]	; (8000cbc <HAL_GPIO_Init+0x2d8>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d007      	beq.n	8000bbc <HAL_GPIO_Init+0x1d8>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a44      	ldr	r2, [pc, #272]	; (8000cc0 <HAL_GPIO_Init+0x2dc>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d101      	bne.n	8000bb8 <HAL_GPIO_Init+0x1d4>
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	e006      	b.n	8000bc6 <HAL_GPIO_Init+0x1e2>
 8000bb8:	2305      	movs	r3, #5
 8000bba:	e004      	b.n	8000bc6 <HAL_GPIO_Init+0x1e2>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	e002      	b.n	8000bc6 <HAL_GPIO_Init+0x1e2>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e000      	b.n	8000bc6 <HAL_GPIO_Init+0x1e2>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	f002 0203 	and.w	r2, r2, #3
 8000bcc:	0092      	lsls	r2, r2, #2
 8000bce:	4093      	lsls	r3, r2
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bd6:	4937      	ldr	r1, [pc, #220]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	3302      	adds	r3, #2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000be4:	4b37      	ldr	r3, [pc, #220]	; (8000cc4 <HAL_GPIO_Init+0x2e0>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c08:	4a2e      	ldr	r2, [pc, #184]	; (8000cc4 <HAL_GPIO_Init+0x2e0>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <HAL_GPIO_Init+0x2e0>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c32:	4a24      	ldr	r2, [pc, #144]	; (8000cc4 <HAL_GPIO_Init+0x2e0>)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c38:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <HAL_GPIO_Init+0x2e0>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c5c:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <HAL_GPIO_Init+0x2e0>)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_GPIO_Init+0x2e0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <HAL_GPIO_Init+0x2e0>)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	fa22 f303 	lsr.w	r3, r2, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f47f aea9 	bne.w	80009f4 <HAL_GPIO_Init+0x10>
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	371c      	adds	r7, #28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	48000400 	.word	0x48000400
 8000cbc:	48000800 	.word	0x48000800
 8000cc0:	48000c00 	.word	0x48000c00
 8000cc4:	40010400 	.word	0x40010400

08000cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cd8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f001 b823 	b.w	8001d34 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 817d 	beq.w	8000ffe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d04:	4bbc      	ldr	r3, [pc, #752]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 030c 	and.w	r3, r3, #12
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	d00c      	beq.n	8000d2a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d10:	4bb9      	ldr	r3, [pc, #740]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 030c 	and.w	r3, r3, #12
 8000d18:	2b08      	cmp	r3, #8
 8000d1a:	d15c      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x10e>
 8000d1c:	4bb6      	ldr	r3, [pc, #728]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d28:	d155      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x10e>
 8000d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d2e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d32:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d36:	fa93 f3a3 	rbit	r3, r3
 8000d3a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d42:	fab3 f383 	clz	r3, r3
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	095b      	lsrs	r3, r3, #5
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d102      	bne.n	8000d5c <HAL_RCC_OscConfig+0x94>
 8000d56:	4ba8      	ldr	r3, [pc, #672]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	e015      	b.n	8000d88 <HAL_RCC_OscConfig+0xc0>
 8000d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d60:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d64:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d68:	fa93 f3a3 	rbit	r3, r3
 8000d6c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d74:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d78:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d84:	4b9c      	ldr	r3, [pc, #624]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d8c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d90:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d94:	fa92 f2a2 	rbit	r2, r2
 8000d98:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d9c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	f042 0220 	orr.w	r2, r2, #32
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	f002 021f 	and.w	r2, r2, #31
 8000db0:	2101      	movs	r1, #1
 8000db2:	fa01 f202 	lsl.w	r2, r1, r2
 8000db6:	4013      	ands	r3, r2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 811f 	beq.w	8000ffc <HAL_RCC_OscConfig+0x334>
 8000dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f040 8116 	bne.w	8000ffc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	f000 bfaf 	b.w	8001d34 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de6:	d106      	bne.n	8000df6 <HAL_RCC_OscConfig+0x12e>
 8000de8:	4b83      	ldr	r3, [pc, #524]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a82      	ldr	r2, [pc, #520]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e036      	b.n	8000e64 <HAL_RCC_OscConfig+0x19c>
 8000df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x158>
 8000e06:	4b7c      	ldr	r3, [pc, #496]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a7b      	ldr	r2, [pc, #492]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	4b79      	ldr	r3, [pc, #484]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a78      	ldr	r2, [pc, #480]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	e021      	b.n	8000e64 <HAL_RCC_OscConfig+0x19c>
 8000e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e30:	d10c      	bne.n	8000e4c <HAL_RCC_OscConfig+0x184>
 8000e32:	4b71      	ldr	r3, [pc, #452]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a70      	ldr	r2, [pc, #448]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b6e      	ldr	r3, [pc, #440]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a6d      	ldr	r2, [pc, #436]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e00b      	b.n	8000e64 <HAL_RCC_OscConfig+0x19c>
 8000e4c:	4b6a      	ldr	r3, [pc, #424]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a69      	ldr	r2, [pc, #420]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b67      	ldr	r3, [pc, #412]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a66      	ldr	r2, [pc, #408]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e62:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e64:	4b64      	ldr	r3, [pc, #400]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	f023 020f 	bic.w	r2, r3, #15
 8000e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	495f      	ldr	r1, [pc, #380]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d059      	beq.n	8000f42 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fc15 	bl	80006bc <HAL_GetTick>
 8000e92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e96:	e00a      	b.n	8000eae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e98:	f7ff fc10 	bl	80006bc <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b64      	cmp	r3, #100	; 0x64
 8000ea6:	d902      	bls.n	8000eae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	f000 bf43 	b.w	8001d34 <HAL_RCC_OscConfig+0x106c>
 8000eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000eba:	fa93 f3a3 	rbit	r3, r3
 8000ebe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000ec2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec6:	fab3 f383 	clz	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	095b      	lsrs	r3, r3, #5
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d102      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x218>
 8000eda:	4b47      	ldr	r3, [pc, #284]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	e015      	b.n	8000f0c <HAL_RCC_OscConfig+0x244>
 8000ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000eec:	fa93 f3a3 	rbit	r3, r3
 8000ef0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000efc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f00:	fa93 f3a3 	rbit	r3, r3
 8000f04:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f08:	4b3b      	ldr	r3, [pc, #236]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f10:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f14:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f18:	fa92 f2a2 	rbit	r2, r2
 8000f1c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f20:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f24:	fab2 f282 	clz	r2, r2
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	f042 0220 	orr.w	r2, r2, #32
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	f002 021f 	and.w	r2, r2, #31
 8000f34:	2101      	movs	r1, #1
 8000f36:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0ab      	beq.n	8000e98 <HAL_RCC_OscConfig+0x1d0>
 8000f40:	e05d      	b.n	8000ffe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f42:	f7ff fbbb 	bl	80006bc <HAL_GetTick>
 8000f46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4a:	e00a      	b.n	8000f62 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f4c:	f7ff fbb6 	bl	80006bc <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b64      	cmp	r3, #100	; 0x64
 8000f5a:	d902      	bls.n	8000f62 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	f000 bee9 	b.w	8001d34 <HAL_RCC_OscConfig+0x106c>
 8000f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f66:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7a:	fab3 f383 	clz	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	095b      	lsrs	r3, r3, #5
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d102      	bne.n	8000f94 <HAL_RCC_OscConfig+0x2cc>
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	e015      	b.n	8000fc0 <HAL_RCC_OscConfig+0x2f8>
 8000f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f98:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fa0:	fa93 f3a3 	rbit	r3, r3
 8000fa4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fac:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fb0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000fb4:	fa93 f3a3 	rbit	r3, r3
 8000fb8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fc4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000fc8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fcc:	fa92 f2a2 	rbit	r2, r2
 8000fd0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000fd4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fd8:	fab2 f282 	clz	r2, r2
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	f042 0220 	orr.w	r2, r2, #32
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	f002 021f 	and.w	r2, r2, #31
 8000fe8:	2101      	movs	r1, #1
 8000fea:	fa01 f202 	lsl.w	r2, r1, r2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1ab      	bne.n	8000f4c <HAL_RCC_OscConfig+0x284>
 8000ff4:	e003      	b.n	8000ffe <HAL_RCC_OscConfig+0x336>
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001002:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 817d 	beq.w	800130e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001014:	4ba6      	ldr	r3, [pc, #664]	; (80012b0 <HAL_RCC_OscConfig+0x5e8>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00b      	beq.n	8001038 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001020:	4ba3      	ldr	r3, [pc, #652]	; (80012b0 <HAL_RCC_OscConfig+0x5e8>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b08      	cmp	r3, #8
 800102a:	d172      	bne.n	8001112 <HAL_RCC_OscConfig+0x44a>
 800102c:	4ba0      	ldr	r3, [pc, #640]	; (80012b0 <HAL_RCC_OscConfig+0x5e8>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d16c      	bne.n	8001112 <HAL_RCC_OscConfig+0x44a>
 8001038:	2302      	movs	r3, #2
 800103a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001042:	fa93 f3a3 	rbit	r3, r3
 8001046:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800104a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104e:	fab3 f383 	clz	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	095b      	lsrs	r3, r3, #5
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <HAL_RCC_OscConfig+0x3a0>
 8001062:	4b93      	ldr	r3, [pc, #588]	; (80012b0 <HAL_RCC_OscConfig+0x5e8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	e013      	b.n	8001090 <HAL_RCC_OscConfig+0x3c8>
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001072:	fa93 f3a3 	rbit	r3, r3
 8001076:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800107a:	2302      	movs	r3, #2
 800107c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001080:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001084:	fa93 f3a3 	rbit	r3, r3
 8001088:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800108c:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <HAL_RCC_OscConfig+0x5e8>)
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	2202      	movs	r2, #2
 8001092:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001096:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800109a:	fa92 f2a2 	rbit	r2, r2
 800109e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010a2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010a6:	fab2 f282 	clz	r2, r2
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	f042 0220 	orr.w	r2, r2, #32
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	f002 021f 	and.w	r2, r2, #31
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f202 	lsl.w	r2, r1, r2
 80010bc:	4013      	ands	r3, r2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00a      	beq.n	80010d8 <HAL_RCC_OscConfig+0x410>
 80010c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d002      	beq.n	80010d8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f000 be2e 	b.w	8001d34 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d8:	4b75      	ldr	r3, [pc, #468]	; (80012b0 <HAL_RCC_OscConfig+0x5e8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	21f8      	movs	r1, #248	; 0xf8
 80010ee:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010f6:	fa91 f1a1 	rbit	r1, r1
 80010fa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010fe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001102:	fab1 f181 	clz	r1, r1
 8001106:	b2c9      	uxtb	r1, r1
 8001108:	408b      	lsls	r3, r1
 800110a:	4969      	ldr	r1, [pc, #420]	; (80012b0 <HAL_RCC_OscConfig+0x5e8>)
 800110c:	4313      	orrs	r3, r2
 800110e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001110:	e0fd      	b.n	800130e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 8088 	beq.w	8001234 <HAL_RCC_OscConfig+0x56c>
 8001124:	2301      	movs	r3, #1
 8001126:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001136:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800113a:	fab3 f383 	clz	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001144:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	461a      	mov	r2, r3
 800114c:	2301      	movs	r3, #1
 800114e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fab4 	bl	80006bc <HAL_GetTick>
 8001154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001158:	e00a      	b.n	8001170 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115a:	f7ff faaf 	bl	80006bc <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d902      	bls.n	8001170 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	f000 bde2 	b.w	8001d34 <HAL_RCC_OscConfig+0x106c>
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001176:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800117a:	fa93 f3a3 	rbit	r3, r3
 800117e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001182:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001186:	fab3 f383 	clz	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	095b      	lsrs	r3, r3, #5
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b01      	cmp	r3, #1
 8001198:	d102      	bne.n	80011a0 <HAL_RCC_OscConfig+0x4d8>
 800119a:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <HAL_RCC_OscConfig+0x5e8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	e013      	b.n	80011c8 <HAL_RCC_OscConfig+0x500>
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011c4:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <HAL_RCC_OscConfig+0x5e8>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	2202      	movs	r2, #2
 80011ca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80011ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011d2:	fa92 f2a2 	rbit	r2, r2
 80011d6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011da:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011de:	fab2 f282 	clz	r2, r2
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	f042 0220 	orr.w	r2, r2, #32
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	f002 021f 	and.w	r2, r2, #31
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0af      	beq.n	800115a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fa:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <HAL_RCC_OscConfig+0x5e8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001206:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	21f8      	movs	r1, #248	; 0xf8
 8001210:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001214:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001218:	fa91 f1a1 	rbit	r1, r1
 800121c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001220:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001224:	fab1 f181 	clz	r1, r1
 8001228:	b2c9      	uxtb	r1, r1
 800122a:	408b      	lsls	r3, r1
 800122c:	4920      	ldr	r1, [pc, #128]	; (80012b0 <HAL_RCC_OscConfig+0x5e8>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
 8001232:	e06c      	b.n	800130e <HAL_RCC_OscConfig+0x646>
 8001234:	2301      	movs	r3, #1
 8001236:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001246:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001254:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	461a      	mov	r2, r3
 800125c:	2300      	movs	r3, #0
 800125e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fa2c 	bl	80006bc <HAL_GetTick>
 8001264:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001268:	e00a      	b.n	8001280 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126a:	f7ff fa27 	bl	80006bc <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d902      	bls.n	8001280 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	f000 bd5a 	b.w	8001d34 <HAL_RCC_OscConfig+0x106c>
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001286:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800128a:	fa93 f3a3 	rbit	r3, r3
 800128e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	fab3 f383 	clz	r3, r3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	095b      	lsrs	r3, r3, #5
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d104      	bne.n	80012b4 <HAL_RCC_OscConfig+0x5ec>
 80012aa:	4b01      	ldr	r3, [pc, #4]	; (80012b0 <HAL_RCC_OscConfig+0x5e8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	e015      	b.n	80012dc <HAL_RCC_OscConfig+0x614>
 80012b0:	40021000 	.word	0x40021000
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012d0:	fa93 f3a3 	rbit	r3, r3
 80012d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012d8:	4bc8      	ldr	r3, [pc, #800]	; (80015fc <HAL_RCC_OscConfig+0x934>)
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	2202      	movs	r2, #2
 80012de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012e6:	fa92 f2a2 	rbit	r2, r2
 80012ea:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012f2:	fab2 f282 	clz	r2, r2
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	f042 0220 	orr.w	r2, r2, #32
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	f002 021f 	and.w	r2, r2, #31
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f202 	lsl.w	r2, r1, r2
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1ad      	bne.n	800126a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001312:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8110 	beq.w	8001544 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001328:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d079      	beq.n	8001428 <HAL_RCC_OscConfig+0x760>
 8001334:	2301      	movs	r3, #1
 8001336:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	4bab      	ldr	r3, [pc, #684]	; (8001600 <HAL_RCC_OscConfig+0x938>)
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	461a      	mov	r2, r3
 800135a:	2301      	movs	r3, #1
 800135c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135e:	f7ff f9ad 	bl	80006bc <HAL_GetTick>
 8001362:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001366:	e00a      	b.n	800137e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001368:	f7ff f9a8 	bl	80006bc <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d902      	bls.n	800137e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	f000 bcdb 	b.w	8001d34 <HAL_RCC_OscConfig+0x106c>
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001394:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001398:	2202      	movs	r2, #2
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	fa93 f2a3 	rbit	r2, r3
 80013aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013bc:	2202      	movs	r2, #2
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	fa93 f2a3 	rbit	r2, r3
 80013ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d8:	4b88      	ldr	r3, [pc, #544]	; (80015fc <HAL_RCC_OscConfig+0x934>)
 80013da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013e4:	2102      	movs	r1, #2
 80013e6:	6019      	str	r1, [r3, #0]
 80013e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	fa93 f1a3 	rbit	r1, r3
 80013f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013fe:	6019      	str	r1, [r3, #0]
  return result;
 8001400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001404:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	fab3 f383 	clz	r3, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	2101      	movs	r1, #1
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0a0      	beq.n	8001368 <HAL_RCC_OscConfig+0x6a0>
 8001426:	e08d      	b.n	8001544 <HAL_RCC_OscConfig+0x87c>
 8001428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001438:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	fa93 f2a3 	rbit	r2, r3
 8001442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001446:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800144a:	601a      	str	r2, [r3, #0]
  return result;
 800144c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001450:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001454:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	4b68      	ldr	r3, [pc, #416]	; (8001600 <HAL_RCC_OscConfig+0x938>)
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	461a      	mov	r2, r3
 8001466:	2300      	movs	r3, #0
 8001468:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff f927 	bl	80006bc <HAL_GetTick>
 800146e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001472:	e00a      	b.n	800148a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff f922 	bl	80006bc <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d902      	bls.n	800148a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	f000 bc55 	b.w	8001d34 <HAL_RCC_OscConfig+0x106c>
 800148a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001492:	2202      	movs	r2, #2
 8001494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	fa93 f2a3 	rbit	r2, r3
 80014a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014b6:	2202      	movs	r2, #2
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	fa93 f2a3 	rbit	r2, r3
 80014c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014da:	2202      	movs	r2, #2
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	fa93 f2a3 	rbit	r2, r3
 80014ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f6:	4b41      	ldr	r3, [pc, #260]	; (80015fc <HAL_RCC_OscConfig+0x934>)
 80014f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001502:	2102      	movs	r1, #2
 8001504:	6019      	str	r1, [r3, #0]
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	fa93 f1a3 	rbit	r1, r3
 8001514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001518:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800151c:	6019      	str	r1, [r3, #0]
  return result;
 800151e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001522:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	fab3 f383 	clz	r3, r3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	2101      	movs	r1, #1
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d197      	bne.n	8001474 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001548:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 81a1 	beq.w	800189c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001560:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_RCC_OscConfig+0x934>)
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d116      	bne.n	800159a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_RCC_OscConfig+0x934>)
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	4a22      	ldr	r2, [pc, #136]	; (80015fc <HAL_RCC_OscConfig+0x934>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001576:	61d3      	str	r3, [r2, #28]
 8001578:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_RCC_OscConfig+0x934>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001584:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001592:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001594:	2301      	movs	r3, #1
 8001596:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <HAL_RCC_OscConfig+0x93c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d11a      	bne.n	80015dc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <HAL_RCC_OscConfig+0x93c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a16      	ldr	r2, [pc, #88]	; (8001604 <HAL_RCC_OscConfig+0x93c>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b2:	f7ff f883 	bl	80006bc <HAL_GetTick>
 80015b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ba:	e009      	b.n	80015d0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015bc:	f7ff f87e 	bl	80006bc <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e3b1      	b.n	8001d34 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <HAL_RCC_OscConfig+0x93c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0ef      	beq.n	80015bc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d10d      	bne.n	8001608 <HAL_RCC_OscConfig+0x940>
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <HAL_RCC_OscConfig+0x934>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4a02      	ldr	r2, [pc, #8]	; (80015fc <HAL_RCC_OscConfig+0x934>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6213      	str	r3, [r2, #32]
 80015f8:	e03c      	b.n	8001674 <HAL_RCC_OscConfig+0x9ac>
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	10908120 	.word	0x10908120
 8001604:	40007000 	.word	0x40007000
 8001608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10c      	bne.n	8001632 <HAL_RCC_OscConfig+0x96a>
 8001618:	4bc1      	ldr	r3, [pc, #772]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4ac0      	ldr	r2, [pc, #768]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	4bbe      	ldr	r3, [pc, #760]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4abd      	ldr	r2, [pc, #756]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 800162a:	f023 0304 	bic.w	r3, r3, #4
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	e020      	b.n	8001674 <HAL_RCC_OscConfig+0x9ac>
 8001632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001636:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b05      	cmp	r3, #5
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x994>
 8001642:	4bb7      	ldr	r3, [pc, #732]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4ab6      	ldr	r2, [pc, #728]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6213      	str	r3, [r2, #32]
 800164e:	4bb4      	ldr	r3, [pc, #720]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4ab3      	ldr	r2, [pc, #716]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6213      	str	r3, [r2, #32]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0x9ac>
 800165c:	4bb0      	ldr	r3, [pc, #704]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4aaf      	ldr	r2, [pc, #700]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	4bad      	ldr	r3, [pc, #692]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4aac      	ldr	r2, [pc, #688]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 800166e:	f023 0304 	bic.w	r3, r3, #4
 8001672:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 8081 	beq.w	8001788 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff f819 	bl	80006bc <HAL_GetTick>
 800168a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7ff f814 	bl	80006bc <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e345      	b.n	8001d34 <HAL_RCC_OscConfig+0x106c>
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016b0:	2202      	movs	r2, #2
 80016b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	fa93 f2a3 	rbit	r2, r3
 80016c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016d4:	2202      	movs	r2, #2
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	fa93 f2a3 	rbit	r2, r3
 80016e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016ee:	601a      	str	r2, [r3, #0]
  return result;
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	095b      	lsrs	r3, r3, #5
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d102      	bne.n	8001714 <HAL_RCC_OscConfig+0xa4c>
 800170e:	4b84      	ldr	r3, [pc, #528]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	e013      	b.n	800173c <HAL_RCC_OscConfig+0xa74>
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800171c:	2202      	movs	r2, #2
 800171e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fa93 f2a3 	rbit	r2, r3
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	4b79      	ldr	r3, [pc, #484]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001740:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001744:	2102      	movs	r1, #2
 8001746:	6011      	str	r1, [r2, #0]
 8001748:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800174c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	fa92 f1a2 	rbit	r1, r2
 8001756:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800175a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800175e:	6011      	str	r1, [r2, #0]
  return result;
 8001760:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001764:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	fab2 f282 	clz	r2, r2
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	f002 021f 	and.w	r2, r2, #31
 800177a:	2101      	movs	r1, #1
 800177c:	fa01 f202 	lsl.w	r2, r1, r2
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d084      	beq.n	8001690 <HAL_RCC_OscConfig+0x9c8>
 8001786:	e07f      	b.n	8001888 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7fe ff98 	bl	80006bc <HAL_GetTick>
 800178c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001790:	e00b      	b.n	80017aa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7fe ff93 	bl	80006bc <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e2c4      	b.n	8001d34 <HAL_RCC_OscConfig+0x106c>
 80017aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017b2:	2202      	movs	r2, #2
 80017b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	fa93 f2a3 	rbit	r2, r3
 80017c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017d6:	2202      	movs	r2, #2
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fa93 f2a3 	rbit	r2, r3
 80017e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017f0:	601a      	str	r2, [r3, #0]
  return result;
 80017f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f043 0302 	orr.w	r3, r3, #2
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d102      	bne.n	8001816 <HAL_RCC_OscConfig+0xb4e>
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	e013      	b.n	800183e <HAL_RCC_OscConfig+0xb76>
 8001816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800181e:	2202      	movs	r2, #2
 8001820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001826:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fa93 f2a3 	rbit	r2, r3
 8001830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001834:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	4b39      	ldr	r3, [pc, #228]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001842:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001846:	2102      	movs	r1, #2
 8001848:	6011      	str	r1, [r2, #0]
 800184a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800184e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	fa92 f1a2 	rbit	r1, r2
 8001858:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800185c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001860:	6011      	str	r1, [r2, #0]
  return result;
 8001862:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001866:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	fab2 f282 	clz	r2, r2
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	f002 021f 	and.w	r2, r2, #31
 800187c:	2101      	movs	r1, #1
 800187e:	fa01 f202 	lsl.w	r2, r1, r2
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d184      	bne.n	8001792 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001888:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	4a22      	ldr	r2, [pc, #136]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 8001896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 8242 	beq.w	8001d32 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <HAL_RCC_OscConfig+0xc58>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	f000 8213 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	f040 8162 	bne.w	8001b92 <HAL_RCC_OscConfig+0xeca>
 80018ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	fa93 f2a3 	rbit	r2, r3
 80018ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018f2:	601a      	str	r2, [r3, #0]
  return result;
 80018f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001908:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	461a      	mov	r2, r3
 8001910:	2300      	movs	r3, #0
 8001912:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7fe fed2 	bl	80006bc <HAL_GetTick>
 8001918:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191c:	e00c      	b.n	8001938 <HAL_RCC_OscConfig+0xc70>
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7fe feca 	bl	80006bc <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e1fd      	b.n	8001d34 <HAL_RCC_OscConfig+0x106c>
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001940:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	fa93 f2a3 	rbit	r2, r3
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800195c:	601a      	str	r2, [r3, #0]
  return result;
 800195e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001962:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001966:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d102      	bne.n	8001982 <HAL_RCC_OscConfig+0xcba>
 800197c:	4bb0      	ldr	r3, [pc, #704]	; (8001c40 <HAL_RCC_OscConfig+0xf78>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	e027      	b.n	80019d2 <HAL_RCC_OscConfig+0xd0a>
 8001982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001986:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800198a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001994:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	fa93 f2a3 	rbit	r2, r3
 800199e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ac:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fa93 f2a3 	rbit	r2, r3
 80019c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	4b9c      	ldr	r3, [pc, #624]	; (8001c40 <HAL_RCC_OscConfig+0xf78>)
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019d6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019de:	6011      	str	r1, [r2, #0]
 80019e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	fa92 f1a2 	rbit	r1, r2
 80019ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019f6:	6011      	str	r1, [r2, #0]
  return result;
 80019f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019fc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	fab2 f282 	clz	r2, r2
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	f042 0220 	orr.w	r2, r2, #32
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	f002 021f 	and.w	r2, r2, #31
 8001a12:	2101      	movs	r1, #1
 8001a14:	fa01 f202 	lsl.w	r2, r1, r2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d182      	bne.n	8001924 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1e:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <HAL_RCC_OscConfig+0xf78>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	430b      	orrs	r3, r1
 8001a40:	497f      	ldr	r1, [pc, #508]	; (8001c40 <HAL_RCC_OscConfig+0xf78>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	fa93 f2a3 	rbit	r2, r3
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a6a:	601a      	str	r2, [r3, #0]
  return result;
 8001a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a70:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a74:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	461a      	mov	r2, r3
 8001a88:	2301      	movs	r3, #1
 8001a8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7fe fe16 	bl	80006bc <HAL_GetTick>
 8001a90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a94:	e009      	b.n	8001aaa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a96:	f7fe fe11 	bl	80006bc <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e144      	b.n	8001d34 <HAL_RCC_OscConfig+0x106c>
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ab2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	fa93 f2a3 	rbit	r2, r3
 8001ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aca:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ace:	601a      	str	r2, [r3, #0]
  return result;
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ad8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	095b      	lsrs	r3, r3, #5
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d102      	bne.n	8001af4 <HAL_RCC_OscConfig+0xe2c>
 8001aee:	4b54      	ldr	r3, [pc, #336]	; (8001c40 <HAL_RCC_OscConfig+0xf78>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	e027      	b.n	8001b44 <HAL_RCC_OscConfig+0xe7c>
 8001af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001afc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b06:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	fa93 f2a3 	rbit	r2, r3
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f2a3 	rbit	r2, r3
 8001b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <HAL_RCC_OscConfig+0xf78>)
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b48:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b50:	6011      	str	r1, [r2, #0]
 8001b52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b56:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	fa92 f1a2 	rbit	r1, r2
 8001b60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b64:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b68:	6011      	str	r1, [r2, #0]
  return result;
 8001b6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b6e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	fab2 f282 	clz	r2, r2
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	f042 0220 	orr.w	r2, r2, #32
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	f002 021f 	and.w	r2, r2, #31
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d082      	beq.n	8001a96 <HAL_RCC_OscConfig+0xdce>
 8001b90:	e0cf      	b.n	8001d32 <HAL_RCC_OscConfig+0x106a>
 8001b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b96:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	fa93 f2a3 	rbit	r2, r3
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bb6:	601a      	str	r2, [r3, #0]
  return result;
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bc0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7fe fd70 	bl	80006bc <HAL_GetTick>
 8001bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be0:	e009      	b.n	8001bf6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be2:	f7fe fd6b 	bl	80006bc <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e09e      	b.n	8001d34 <HAL_RCC_OscConfig+0x106c>
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c08:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c1a:	601a      	str	r2, [r3, #0]
  return result;
 8001c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c20:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	095b      	lsrs	r3, r3, #5
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d104      	bne.n	8001c44 <HAL_RCC_OscConfig+0xf7c>
 8001c3a:	4b01      	ldr	r3, [pc, #4]	; (8001c40 <HAL_RCC_OscConfig+0xf78>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	e029      	b.n	8001c94 <HAL_RCC_OscConfig+0xfcc>
 8001c40:	40021000 	.word	0x40021000
 8001c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c48:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c64:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	fa93 f2a3 	rbit	r2, r3
 8001c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <HAL_RCC_OscConfig+0x1078>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c98:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ca0:	6011      	str	r1, [r2, #0]
 8001ca2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	fa92 f1a2 	rbit	r1, r2
 8001cb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cb8:	6011      	str	r1, [r2, #0]
  return result;
 8001cba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cbe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f042 0220 	orr.w	r2, r2, #32
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f002 021f 	and.w	r2, r2, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d180      	bne.n	8001be2 <HAL_RCC_OscConfig+0xf1a>
 8001ce0:	e027      	b.n	8001d32 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e01e      	b.n	8001d34 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_RCC_OscConfig+0x1078>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d02:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d10b      	bne.n	8001d2e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b09e      	sub	sp, #120	; 0x78
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e162      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b90      	ldr	r3, [pc, #576]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d910      	bls.n	8001d8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b8d      	ldr	r3, [pc, #564]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 0207 	bic.w	r2, r3, #7
 8001d72:	498b      	ldr	r1, [pc, #556]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e14a      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b82      	ldr	r3, [pc, #520]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	497f      	ldr	r1, [pc, #508]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80dc 	beq.w	8001f70 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d13c      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xf6>
 8001dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d102      	bne.n	8001dea <HAL_RCC_ClockConfig+0xa6>
 8001de4:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	e00f      	b.n	8001e0a <HAL_RCC_ClockConfig+0xc6>
 8001dea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	667b      	str	r3, [r7, #100]	; 0x64
 8001df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfc:	663b      	str	r3, [r7, #96]	; 0x60
 8001dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e06:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e0e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e12:	fa92 f2a2 	rbit	r2, r2
 8001e16:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e1a:	fab2 f282 	clz	r2, r2
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	f042 0220 	orr.w	r2, r2, #32
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	f002 021f 	and.w	r2, r2, #31
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d17b      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0f3      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d13c      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x178>
 8001e42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	095b      	lsrs	r3, r3, #5
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d102      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x128>
 8001e66:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	e00f      	b.n	8001e8c <HAL_RCC_ClockConfig+0x148>
 8001e6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	647b      	str	r3, [r7, #68]	; 0x44
 8001e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8001e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e88:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e90:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e94:	fa92 f2a2 	rbit	r2, r2
 8001e98:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e9c:	fab2 f282 	clz	r2, r2
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f042 0220 	orr.w	r2, r2, #32
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	f002 021f 	and.w	r2, r2, #31
 8001eac:	2101      	movs	r1, #1
 8001eae:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d13a      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0b2      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x1a0>
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	e00d      	b.n	8001f00 <HAL_RCC_ClockConfig+0x1bc>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	2202      	movs	r2, #2
 8001f02:	61ba      	str	r2, [r7, #24]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	fa92 f2a2 	rbit	r2, r2
 8001f0a:	617a      	str	r2, [r7, #20]
  return result;
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	fab2 f282 	clz	r2, r2
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f042 0220 	orr.w	r2, r2, #32
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f002 021f 	and.w	r2, r2, #31
 8001f1e:	2101      	movs	r1, #1
 8001f20:	fa01 f202 	lsl.w	r2, r1, r2
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e079      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f023 0203 	bic.w	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	491a      	ldr	r1, [pc, #104]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f40:	f7fe fbbc 	bl	80006bc <HAL_GetTick>
 8001f44:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	e00a      	b.n	8001f5e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f48:	f7fe fbb8 	bl	80006bc <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e061      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 020c 	and.w	r2, r3, #12
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d1eb      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d214      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 0207 	bic.w	r2, r3, #7
 8001f86:	4906      	ldr	r1, [pc, #24]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <HAL_RCC_ClockConfig+0x25c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e040      	b.n	8002022 <HAL_RCC_ClockConfig+0x2de>
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCC_ClockConfig+0x2e8>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	491a      	ldr	r1, [pc, #104]	; (800202c <HAL_RCC_ClockConfig+0x2e8>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_RCC_ClockConfig+0x2e8>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4912      	ldr	r1, [pc, #72]	; (800202c <HAL_RCC_ClockConfig+0x2e8>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fe6:	f000 f829 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8001fea:	4601      	mov	r1, r0
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <HAL_RCC_ClockConfig+0x2e8>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff4:	22f0      	movs	r2, #240	; 0xf0
 8001ff6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	fa92 f2a2 	rbit	r2, r2
 8001ffe:	60fa      	str	r2, [r7, #12]
  return result;
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	40d3      	lsrs	r3, r2
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x2ec>)
 800200c:	5cd3      	ldrb	r3, [r2, r3]
 800200e:	fa21 f303 	lsr.w	r3, r1, r3
 8002012:	4a08      	ldr	r2, [pc, #32]	; (8002034 <HAL_RCC_ClockConfig+0x2f0>)
 8002014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_RCC_ClockConfig+0x2f4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fb0a 	bl	8000634 <HAL_InitTick>
  
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3778      	adds	r7, #120	; 0x78
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	08003260 	.word	0x08003260
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004

0800203c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800203c:	b480      	push	{r7}
 800203e:	b08b      	sub	sp, #44	; 0x2c
 8002040:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002056:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b04      	cmp	r3, #4
 8002064:	d002      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x30>
 8002066:	2b08      	cmp	r3, #8
 8002068:	d003      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x36>
 800206a:	e03c      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_GetSysClockFreq+0xc4>)
 800206e:	623b      	str	r3, [r7, #32]
      break;
 8002070:	e03c      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002078:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800207c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	fa92 f2a2 	rbit	r2, r2
 8002084:	607a      	str	r2, [r7, #4]
  return result;
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	fab2 f282 	clz	r2, r2
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	40d3      	lsrs	r3, r2
 8002090:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	220f      	movs	r2, #15
 80020a0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	fa92 f2a2 	rbit	r2, r2
 80020a8:	60fa      	str	r2, [r7, #12]
  return result;
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	fab2 f282 	clz	r2, r2
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	40d3      	lsrs	r3, r2
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020c4:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
 80020d4:	e004      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	4a0c      	ldr	r2, [pc, #48]	; (800210c <HAL_RCC_GetSysClockFreq+0xd0>)
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	623b      	str	r3, [r7, #32]
      break;
 80020e4:	e002      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020e8:	623b      	str	r3, [r7, #32]
      break;
 80020ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ec:	6a3b      	ldr	r3, [r7, #32]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	372c      	adds	r7, #44	; 0x2c
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	007a1200 	.word	0x007a1200
 8002104:	08003278 	.word	0x08003278
 8002108:	08003288 	.word	0x08003288
 800210c:	003d0900 	.word	0x003d0900

08002110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_RCC_GetHCLKFreq+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000000 	.word	0x20000000

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800212e:	f7ff ffef 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002132:	4601      	mov	r1, r0
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800213c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002140:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	fa92 f2a2 	rbit	r2, r2
 8002148:	603a      	str	r2, [r7, #0]
  return result;
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	fab2 f282 	clz	r2, r2
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	40d3      	lsrs	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	08003270 	.word	0x08003270

0800216c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002172:	f7ff ffcd 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002176:	4601      	mov	r1, r0
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002180:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002184:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	fa92 f2a2 	rbit	r2, r2
 800218c:	603a      	str	r2, [r7, #0]
  return result;
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	40d3      	lsrs	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08003270 	.word	0x08003270

080021b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b092      	sub	sp, #72	; 0x48
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80cd 	beq.w	800236e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d4:	4b8e      	ldr	r3, [pc, #568]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10e      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	4b8b      	ldr	r3, [pc, #556]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	4a8a      	ldr	r2, [pc, #552]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ea:	61d3      	str	r3, [r2, #28]
 80021ec:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b85      	ldr	r3, [pc, #532]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b82      	ldr	r3, [pc, #520]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a81      	ldr	r2, [pc, #516]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7fe fa51 	bl	80006bc <HAL_GetTick>
 800221a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7fe fa4d 	bl	80006bc <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	d901      	bls.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0ea      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b78      	ldr	r3, [pc, #480]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800223c:	4b74      	ldr	r3, [pc, #464]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002244:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002248:	2b00      	cmp	r3, #0
 800224a:	d07d      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002254:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002256:	429a      	cmp	r2, r3
 8002258:	d076      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800225a:	4b6d      	ldr	r3, [pc, #436]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	4b66      	ldr	r3, [pc, #408]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	461a      	mov	r2, r3
 8002284:	2301      	movs	r3, #1
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800228c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	461a      	mov	r2, r3
 80022a8:	2300      	movs	r3, #0
 80022aa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022ac:	4a58      	ldr	r2, [pc, #352]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d045      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe f9fe 	bl	80006bc <HAL_GetTick>
 80022c0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c2:	e00a      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7fe f9fa 	bl	80006bc <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e095      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80022da:	2302      	movs	r3, #2
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
 80022e6:	2302      	movs	r3, #2
 80022e8:	623b      	str	r3, [r7, #32]
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	61fb      	str	r3, [r7, #28]
  return result;
 80022f2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d102      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002308:	4b41      	ldr	r3, [pc, #260]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	e007      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800230e:	2302      	movs	r3, #2
 8002310:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	2202      	movs	r2, #2
 8002320:	613a      	str	r2, [r7, #16]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	fa92 f2a2 	rbit	r2, r2
 8002328:	60fa      	str	r2, [r7, #12]
  return result;
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f002 021f 	and.w	r2, r2, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0bd      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002348:	4b31      	ldr	r3, [pc, #196]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	492e      	ldr	r1, [pc, #184]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002356:	4313      	orrs	r3, r2
 8002358:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800235a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4b2b      	ldr	r3, [pc, #172]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a2a      	ldr	r2, [pc, #168]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800237a:	4b25      	ldr	r3, [pc, #148]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f023 0203 	bic.w	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	4922      	ldr	r1, [pc, #136]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002388:	4313      	orrs	r3, r2
 800238a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0320 	and.w	r3, r3, #32
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f023 0210 	bic.w	r2, r3, #16
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	491a      	ldr	r1, [pc, #104]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	4913      	ldr	r1, [pc, #76]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	490b      	ldr	r1, [pc, #44]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	4904      	ldr	r1, [pc, #16]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002400:	4313      	orrs	r3, r2
 8002402:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3748      	adds	r7, #72	; 0x48
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	40007000 	.word	0x40007000
 8002418:	10908100 	.word	0x10908100

0800241c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e040      	b.n	80024b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fd ffe2 	bl	8000408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2224      	movs	r2, #36	; 0x24
 8002448:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0201 	bic.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fb32 	bl	8002ac4 <UART_SetConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e022      	b.n	80024b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fc5c 	bl	8002d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002486:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002496:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fce3 	bl	8002e74 <UART_CheckIdleState>
 80024ae:	4603      	mov	r3, r0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0ba      	sub	sp, #232	; 0xe8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80024e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80024e6:	4013      	ands	r3, r2
 80024e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80024ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d115      	bne.n	8002520 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00f      	beq.n	8002520 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d009      	beq.n	8002520 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 82ab 	beq.w	8002a6c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4798      	blx	r3
      }
      return;
 800251e:	e2a5      	b.n	8002a6c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002520:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8117 	beq.w	8002758 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800252a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002536:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800253a:	4b85      	ldr	r3, [pc, #532]	; (8002750 <HAL_UART_IRQHandler+0x298>)
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 810a 	beq.w	8002758 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d011      	beq.n	8002574 <HAL_UART_IRQHandler+0xbc>
 8002550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00b      	beq.n	8002574 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2201      	movs	r2, #1
 8002562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d011      	beq.n	80025a4 <HAL_UART_IRQHandler+0xec>
 8002580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2202      	movs	r2, #2
 8002592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259a:	f043 0204 	orr.w	r2, r3, #4
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d011      	beq.n	80025d4 <HAL_UART_IRQHandler+0x11c>
 80025b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00b      	beq.n	80025d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2204      	movs	r2, #4
 80025c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ca:	f043 0202 	orr.w	r2, r3, #2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d017      	beq.n	8002610 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d105      	bne.n	80025f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80025ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00b      	beq.n	8002610 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2208      	movs	r2, #8
 80025fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002606:	f043 0208 	orr.w	r2, r3, #8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002618:	2b00      	cmp	r3, #0
 800261a:	d012      	beq.n	8002642 <HAL_UART_IRQHandler+0x18a>
 800261c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00c      	beq.n	8002642 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002630:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8211 	beq.w	8002a70 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800264e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00d      	beq.n	8002676 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800265a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d005      	beq.n	800269a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800268e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002692:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002696:	2b00      	cmp	r3, #0
 8002698:	d04f      	beq.n	800273a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fcf9 	bl	8003092 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b40      	cmp	r3, #64	; 0x40
 80026ac:	d141      	bne.n	8002732 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3308      	adds	r3, #8
 80026b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026bc:	e853 3f00 	ldrex	r3, [r3]
 80026c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3308      	adds	r3, #8
 80026d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80026de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026ea:	e841 2300 	strex	r3, r2, [r1]
 80026ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1d9      	bne.n	80026ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d013      	beq.n	800272a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002706:	4a13      	ldr	r2, [pc, #76]	; (8002754 <HAL_UART_IRQHandler+0x29c>)
 8002708:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe f92a 	bl	8000968 <HAL_DMA_Abort_IT>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d017      	beq.n	800274a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002724:	4610      	mov	r0, r2
 8002726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002728:	e00f      	b.n	800274a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f9b4 	bl	8002a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002730:	e00b      	b.n	800274a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f9b0 	bl	8002a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002738:	e007      	b.n	800274a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f9ac 	bl	8002a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002748:	e192      	b.n	8002a70 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800274a:	bf00      	nop
    return;
 800274c:	e190      	b.n	8002a70 <HAL_UART_IRQHandler+0x5b8>
 800274e:	bf00      	nop
 8002750:	04000120 	.word	0x04000120
 8002754:	0800315b 	.word	0x0800315b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275c:	2b01      	cmp	r3, #1
 800275e:	f040 814b 	bne.w	80029f8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 8144 	beq.w	80029f8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 813d 	beq.w	80029f8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2210      	movs	r2, #16
 8002784:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	f040 80b5 	bne.w	8002900 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8164 	beq.w	8002a74 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80027b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027b6:	429a      	cmp	r2, r3
 80027b8:	f080 815c 	bcs.w	8002a74 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	f000 8086 	beq.w	80028de <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027de:	e853 3f00 	ldrex	r3, [r3]
 80027e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80027e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002800:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002804:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002808:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800280c:	e841 2300 	strex	r3, r2, [r1]
 8002810:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1da      	bne.n	80027d2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	3308      	adds	r3, #8
 8002822:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002826:	e853 3f00 	ldrex	r3, [r3]
 800282a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800282c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3308      	adds	r3, #8
 800283c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002840:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002844:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002846:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002848:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800284c:	e841 2300 	strex	r3, r2, [r1]
 8002850:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e1      	bne.n	800281c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3308      	adds	r3, #8
 800285e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002862:	e853 3f00 	ldrex	r3, [r3]
 8002866:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800286e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3308      	adds	r3, #8
 8002878:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800287c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800287e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002880:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002882:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002884:	e841 2300 	strex	r3, r2, [r1]
 8002888:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800288a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e3      	bne.n	8002858 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2220      	movs	r2, #32
 8002894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a6:	e853 3f00 	ldrex	r3, [r3]
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ae:	f023 0310 	bic.w	r3, r3, #16
 80028b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80028c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028c8:	e841 2300 	strex	r3, r2, [r1]
 80028cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80028ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1e4      	bne.n	800289e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe f80c 	bl	80008f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	4619      	mov	r1, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f8d7 	bl	8002aac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028fe:	e0b9      	b.n	8002a74 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800290c:	b29b      	uxth	r3, r3
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80ab 	beq.w	8002a78 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002922:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80a6 	beq.w	8002a78 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	e853 3f00 	ldrex	r3, [r3]
 8002938:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800293a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002940:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800294e:	647b      	str	r3, [r7, #68]	; 0x44
 8002950:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002952:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800295c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e4      	bne.n	800292c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3308      	adds	r3, #8
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	e853 3f00 	ldrex	r3, [r3]
 8002970:	623b      	str	r3, [r7, #32]
   return(result);
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3308      	adds	r3, #8
 8002982:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002986:	633a      	str	r2, [r7, #48]	; 0x30
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800298c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800298e:	e841 2300 	strex	r3, r2, [r1]
 8002992:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e3      	bne.n	8002962 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	e853 3f00 	ldrex	r3, [r3]
 80029ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0310 	bic.w	r3, r3, #16
 80029c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d4:	69b9      	ldr	r1, [r7, #24]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	e841 2300 	strex	r3, r2, [r1]
 80029dc:	617b      	str	r3, [r7, #20]
   return(result);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e4      	bne.n	80029ae <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029ee:	4619      	mov	r1, r3
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f85b 	bl	8002aac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029f6:	e03f      	b.n	8002a78 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00e      	beq.n	8002a22 <HAL_UART_IRQHandler+0x56a>
 8002a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fbdd 	bl	80031da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a20:	e02d      	b.n	8002a7e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00e      	beq.n	8002a4c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01c      	beq.n	8002a7c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
    }
    return;
 8002a4a:	e017      	b.n	8002a7c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d012      	beq.n	8002a7e <HAL_UART_IRQHandler+0x5c6>
 8002a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00c      	beq.n	8002a7e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fb8e 	bl	8003186 <UART_EndTransmit_IT>
    return;
 8002a6a:	e008      	b.n	8002a7e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002a6c:	bf00      	nop
 8002a6e:	e006      	b.n	8002a7e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002a70:	bf00      	nop
 8002a72:	e004      	b.n	8002a7e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002a74:	bf00      	nop
 8002a76:	e002      	b.n	8002a7e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002a78:	bf00      	nop
 8002a7a:	e000      	b.n	8002a7e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002a7c:	bf00      	nop
  }

}
 8002a7e:	37e8      	adds	r7, #232	; 0xe8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b8a      	ldr	r3, [pc, #552]	; (8002d18 <UART_SetConfig+0x254>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	6979      	ldr	r1, [r7, #20]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a78      	ldr	r2, [pc, #480]	; (8002d1c <UART_SetConfig+0x258>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d120      	bne.n	8002b82 <UART_SetConfig+0xbe>
 8002b40:	4b77      	ldr	r3, [pc, #476]	; (8002d20 <UART_SetConfig+0x25c>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d817      	bhi.n	8002b7c <UART_SetConfig+0xb8>
 8002b4c:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <UART_SetConfig+0x90>)
 8002b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b52:	bf00      	nop
 8002b54:	08002b65 	.word	0x08002b65
 8002b58:	08002b71 	.word	0x08002b71
 8002b5c:	08002b77 	.word	0x08002b77
 8002b60:	08002b6b 	.word	0x08002b6b
 8002b64:	2300      	movs	r3, #0
 8002b66:	77fb      	strb	r3, [r7, #31]
 8002b68:	e01d      	b.n	8002ba6 <UART_SetConfig+0xe2>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	77fb      	strb	r3, [r7, #31]
 8002b6e:	e01a      	b.n	8002ba6 <UART_SetConfig+0xe2>
 8002b70:	2304      	movs	r3, #4
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e017      	b.n	8002ba6 <UART_SetConfig+0xe2>
 8002b76:	2308      	movs	r3, #8
 8002b78:	77fb      	strb	r3, [r7, #31]
 8002b7a:	e014      	b.n	8002ba6 <UART_SetConfig+0xe2>
 8002b7c:	2310      	movs	r3, #16
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e011      	b.n	8002ba6 <UART_SetConfig+0xe2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a67      	ldr	r2, [pc, #412]	; (8002d24 <UART_SetConfig+0x260>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d102      	bne.n	8002b92 <UART_SetConfig+0xce>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	77fb      	strb	r3, [r7, #31]
 8002b90:	e009      	b.n	8002ba6 <UART_SetConfig+0xe2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a64      	ldr	r2, [pc, #400]	; (8002d28 <UART_SetConfig+0x264>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d102      	bne.n	8002ba2 <UART_SetConfig+0xde>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	77fb      	strb	r3, [r7, #31]
 8002ba0:	e001      	b.n	8002ba6 <UART_SetConfig+0xe2>
 8002ba2:	2310      	movs	r3, #16
 8002ba4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bae:	d15a      	bne.n	8002c66 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002bb0:	7ffb      	ldrb	r3, [r7, #31]
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d827      	bhi.n	8002c06 <UART_SetConfig+0x142>
 8002bb6:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <UART_SetConfig+0xf8>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002be1 	.word	0x08002be1
 8002bc0:	08002be9 	.word	0x08002be9
 8002bc4:	08002bf1 	.word	0x08002bf1
 8002bc8:	08002c07 	.word	0x08002c07
 8002bcc:	08002bf7 	.word	0x08002bf7
 8002bd0:	08002c07 	.word	0x08002c07
 8002bd4:	08002c07 	.word	0x08002c07
 8002bd8:	08002c07 	.word	0x08002c07
 8002bdc:	08002bff 	.word	0x08002bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be0:	f7ff faa2 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8002be4:	61b8      	str	r0, [r7, #24]
        break;
 8002be6:	e013      	b.n	8002c10 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002be8:	f7ff fac0 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 8002bec:	61b8      	str	r0, [r7, #24]
        break;
 8002bee:	e00f      	b.n	8002c10 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bf0:	4b4e      	ldr	r3, [pc, #312]	; (8002d2c <UART_SetConfig+0x268>)
 8002bf2:	61bb      	str	r3, [r7, #24]
        break;
 8002bf4:	e00c      	b.n	8002c10 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bf6:	f7ff fa21 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8002bfa:	61b8      	str	r0, [r7, #24]
        break;
 8002bfc:	e008      	b.n	8002c10 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c02:	61bb      	str	r3, [r7, #24]
        break;
 8002c04:	e004      	b.n	8002c10 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	77bb      	strb	r3, [r7, #30]
        break;
 8002c0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d074      	beq.n	8002d00 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	005a      	lsls	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	441a      	add	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	d916      	bls.n	8002c60 <UART_SetConfig+0x19c>
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c38:	d212      	bcs.n	8002c60 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	f023 030f 	bic.w	r3, r3, #15
 8002c42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	89fb      	ldrh	r3, [r7, #14]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	89fa      	ldrh	r2, [r7, #14]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	e04f      	b.n	8002d00 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	77bb      	strb	r3, [r7, #30]
 8002c64:	e04c      	b.n	8002d00 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c66:	7ffb      	ldrb	r3, [r7, #31]
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d828      	bhi.n	8002cbe <UART_SetConfig+0x1fa>
 8002c6c:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <UART_SetConfig+0x1b0>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002c99 	.word	0x08002c99
 8002c78:	08002ca1 	.word	0x08002ca1
 8002c7c:	08002ca9 	.word	0x08002ca9
 8002c80:	08002cbf 	.word	0x08002cbf
 8002c84:	08002caf 	.word	0x08002caf
 8002c88:	08002cbf 	.word	0x08002cbf
 8002c8c:	08002cbf 	.word	0x08002cbf
 8002c90:	08002cbf 	.word	0x08002cbf
 8002c94:	08002cb7 	.word	0x08002cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c98:	f7ff fa46 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8002c9c:	61b8      	str	r0, [r7, #24]
        break;
 8002c9e:	e013      	b.n	8002cc8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ca0:	f7ff fa64 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 8002ca4:	61b8      	str	r0, [r7, #24]
        break;
 8002ca6:	e00f      	b.n	8002cc8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ca8:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <UART_SetConfig+0x268>)
 8002caa:	61bb      	str	r3, [r7, #24]
        break;
 8002cac:	e00c      	b.n	8002cc8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cae:	f7ff f9c5 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8002cb2:	61b8      	str	r0, [r7, #24]
        break;
 8002cb4:	e008      	b.n	8002cc8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cba:	61bb      	str	r3, [r7, #24]
        break;
 8002cbc:	e004      	b.n	8002cc8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	77bb      	strb	r3, [r7, #30]
        break;
 8002cc6:	bf00      	nop
    }

    if (pclk != 0U)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d018      	beq.n	8002d00 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	085a      	lsrs	r2, r3, #1
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	441a      	add	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b0f      	cmp	r3, #15
 8002ce6:	d909      	bls.n	8002cfc <UART_SetConfig+0x238>
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cee:	d205      	bcs.n	8002cfc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	e001      	b.n	8002d00 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002d0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	efff69f3 	.word	0xefff69f3
 8002d1c:	40013800 	.word	0x40013800
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40004400 	.word	0x40004400
 8002d28:	40004800 	.word	0x40004800
 8002d2c:	007a1200 	.word	0x007a1200

08002d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01a      	beq.n	8002e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e2e:	d10a      	bne.n	8002e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
  }
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b098      	sub	sp, #96	; 0x60
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e84:	f7fd fc1a 	bl	80006bc <HAL_GetTick>
 8002e88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d12e      	bne.n	8002ef6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f88c 	bl	8002fc4 <UART_WaitOnFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d021      	beq.n	8002ef6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	e853 3f00 	ldrex	r3, [r3]
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ed8:	e841 2300 	strex	r3, r2, [r1]
 8002edc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e6      	bne.n	8002eb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e062      	b.n	8002fbc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d149      	bne.n	8002f98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f856 	bl	8002fc4 <UART_WaitOnFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d03c      	beq.n	8002f98 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	e853 3f00 	ldrex	r3, [r3]
 8002f2a:	623b      	str	r3, [r7, #32]
   return(result);
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f3e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e6      	bne.n	8002f1e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	3308      	adds	r3, #8
 8002f56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	e853 3f00 	ldrex	r3, [r3]
 8002f5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f70:	61fa      	str	r2, [r7, #28]
 8002f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f74:	69b9      	ldr	r1, [r7, #24]
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	e841 2300 	strex	r3, r2, [r1]
 8002f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e5      	bne.n	8002f50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e011      	b.n	8002fbc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3758      	adds	r7, #88	; 0x58
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd4:	e049      	b.n	800306a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d045      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fde:	f7fd fb6d 	bl	80006bc <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e048      	b.n	800308a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d031      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b08      	cmp	r3, #8
 8003012:	d110      	bne.n	8003036 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2208      	movs	r2, #8
 800301a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f838 	bl	8003092 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2208      	movs	r2, #8
 8003026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e029      	b.n	800308a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003044:	d111      	bne.n	800306a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800304e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f81e 	bl	8003092 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e00f      	b.n	800308a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4013      	ands	r3, r2
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	bf0c      	ite	eq
 800307a:	2301      	moveq	r3, #1
 800307c:	2300      	movne	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	429a      	cmp	r2, r3
 8003086:	d0a6      	beq.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003092:	b480      	push	{r7}
 8003094:	b095      	sub	sp, #84	; 0x54
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a2:	e853 3f00 	ldrex	r3, [r3]
 80030a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b8:	643b      	str	r3, [r7, #64]	; 0x40
 80030ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030c0:	e841 2300 	strex	r3, r2, [r1]
 80030c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e6      	bne.n	800309a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3308      	adds	r3, #8
 80030d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	e853 3f00 	ldrex	r3, [r3]
 80030da:	61fb      	str	r3, [r7, #28]
   return(result);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3308      	adds	r3, #8
 80030ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f4:	e841 2300 	strex	r3, r2, [r1]
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e5      	bne.n	80030cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003104:	2b01      	cmp	r3, #1
 8003106:	d118      	bne.n	800313a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	60bb      	str	r3, [r7, #8]
   return(result);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f023 0310 	bic.w	r3, r3, #16
 800311c:	647b      	str	r3, [r7, #68]	; 0x44
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	6979      	ldr	r1, [r7, #20]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	613b      	str	r3, [r7, #16]
   return(result);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e6      	bne.n	8003108 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800314e:	bf00      	nop
 8003150:	3754      	adds	r7, #84	; 0x54
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f7ff fc8d 	bl	8002a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b088      	sub	sp, #32
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	e853 3f00 	ldrex	r3, [r3]
 800319a:	60bb      	str	r3, [r7, #8]
   return(result);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b0:	6979      	ldr	r1, [r7, #20]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	e841 2300 	strex	r3, r2, [r1]
 80031b8:	613b      	str	r3, [r7, #16]
   return(result);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e6      	bne.n	800318e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff fc59 	bl	8002a84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031d2:	bf00      	nop
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <memset>:
 80031ee:	4402      	add	r2, r0
 80031f0:	4603      	mov	r3, r0
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d100      	bne.n	80031f8 <memset+0xa>
 80031f6:	4770      	bx	lr
 80031f8:	f803 1b01 	strb.w	r1, [r3], #1
 80031fc:	e7f9      	b.n	80031f2 <memset+0x4>
	...

08003200 <__libc_init_array>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	4d0d      	ldr	r5, [pc, #52]	; (8003238 <__libc_init_array+0x38>)
 8003204:	4c0d      	ldr	r4, [pc, #52]	; (800323c <__libc_init_array+0x3c>)
 8003206:	1b64      	subs	r4, r4, r5
 8003208:	10a4      	asrs	r4, r4, #2
 800320a:	2600      	movs	r6, #0
 800320c:	42a6      	cmp	r6, r4
 800320e:	d109      	bne.n	8003224 <__libc_init_array+0x24>
 8003210:	4d0b      	ldr	r5, [pc, #44]	; (8003240 <__libc_init_array+0x40>)
 8003212:	4c0c      	ldr	r4, [pc, #48]	; (8003244 <__libc_init_array+0x44>)
 8003214:	f000 f818 	bl	8003248 <_init>
 8003218:	1b64      	subs	r4, r4, r5
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	2600      	movs	r6, #0
 800321e:	42a6      	cmp	r6, r4
 8003220:	d105      	bne.n	800322e <__libc_init_array+0x2e>
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	f855 3b04 	ldr.w	r3, [r5], #4
 8003228:	4798      	blx	r3
 800322a:	3601      	adds	r6, #1
 800322c:	e7ee      	b.n	800320c <__libc_init_array+0xc>
 800322e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003232:	4798      	blx	r3
 8003234:	3601      	adds	r6, #1
 8003236:	e7f2      	b.n	800321e <__libc_init_array+0x1e>
 8003238:	08003298 	.word	0x08003298
 800323c:	08003298 	.word	0x08003298
 8003240:	08003298 	.word	0x08003298
 8003244:	0800329c 	.word	0x0800329c

08003248 <_init>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	bf00      	nop
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr

08003254 <_fini>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	bf00      	nop
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr
